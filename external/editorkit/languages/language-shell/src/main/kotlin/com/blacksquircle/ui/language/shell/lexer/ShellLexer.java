/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.shell.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>shell.flex</tt>
 */
public class ShellLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\11\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\3\1\35\1\36\2\35\1\37\1\35\11\40\1\41"+
    "\7\40\1\42\2\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\40"+
    "\1\57\1\60\1\40\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\40\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\40\1\77\1\100\1\101\1\102\41\0"+
    "\2\3\4\40\4\3\1\40\2\3\1\0\7\3\1\40"+
    "\4\3\1\40\5\3\27\40\1\3\37\40\1\3\u01ca\40"+
    "\4\3\14\40\16\3\5\40\7\3\1\40\1\3\1\40"+
    "\21\3\160\0\5\40\1\3\2\40\2\3\4\40\10\3"+
    "\1\40\1\3\3\40\1\3\1\40\1\3\24\40\1\3"+
    "\123\40\1\3\213\40\1\3\5\0\2\3\236\40\11\3"+
    "\46\40\2\3\1\40\7\3\47\40\7\3\1\40\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\40\5\3\3\40\15\3\5\0\6\3"+
    "\1\40\4\3\13\0\5\3\53\40\37\0\4\3\2\40"+
    "\1\0\143\40\1\3\1\40\10\0\1\3\6\0\2\40"+
    "\2\0\1\3\4\0\2\40\12\0\3\40\2\3\1\40"+
    "\17\3\1\0\1\40\1\0\36\40\33\0\2\3\131\40"+
    "\13\0\1\40\16\3\12\0\41\40\11\0\2\40\4\3"+
    "\1\40\5\3\26\40\4\0\1\40\11\0\1\40\3\0"+
    "\1\40\5\0\22\3\31\40\3\0\104\3\1\40\1\3"+
    "\13\40\67\3\33\0\1\3\4\0\66\40\3\0\1\40"+
    "\22\0\1\40\7\0\12\40\2\0\2\3\12\0\1\3"+
    "\7\40\1\3\7\40\1\3\3\0\1\3\10\40\2\3"+
    "\2\40\2\3\26\40\1\3\7\40\1\3\1\40\3\3"+
    "\4\40\2\3\1\0\1\40\7\0\2\3\2\0\2\3"+
    "\3\0\1\40\10\3\1\0\4\3\2\40\1\3\3\40"+
    "\2\0\2\3\12\0\4\40\7\3\1\40\5\3\3\0"+
    "\1\3\6\40\4\3\2\40\2\3\26\40\1\3\7\40"+
    "\1\3\2\40\1\3\2\40\1\3\2\40\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\40\1\3\1\40\7\3\14\0\3\40\1\0"+
    "\13\3\3\0\1\3\11\40\1\3\3\40\1\3\26\40"+
    "\1\3\7\40\1\3\2\40\1\3\5\40\2\3\1\0"+
    "\1\40\10\0\1\3\3\0\1\3\3\0\2\3\1\40"+
    "\17\3\2\40\2\0\2\3\12\0\1\3\1\40\17\3"+
    "\3\0\1\3\10\40\2\3\2\40\2\3\26\40\1\3"+
    "\7\40\1\3\2\40\1\3\5\40\2\3\1\0\1\40"+
    "\7\0\2\3\2\0\2\3\3\0\10\3\2\0\4\3"+
    "\2\40\1\3\3\40\2\0\2\3\12\0\1\3\1\40"+
    "\20\3\1\0\1\40\1\3\6\40\3\3\3\40\1\3"+
    "\4\40\3\3\2\40\1\3\1\40\1\3\2\40\3\3"+
    "\2\40\3\3\3\40\3\3\14\40\4\3\5\0\3\3"+
    "\3\0\1\3\4\0\2\3\1\40\6\3\1\0\16\3"+
    "\12\0\11\3\1\40\7\3\3\0\1\3\10\40\1\3"+
    "\3\40\1\3\27\40\1\3\12\40\1\3\5\40\3\3"+
    "\1\40\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\2\40\6\3\2\40\2\0\2\3\12\0\22\3"+
    "\2\0\1\3\10\40\1\3\3\40\1\3\27\40\1\3"+
    "\12\40\1\3\5\40\2\3\1\0\1\40\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\7\3\1\40\1\3"+
    "\2\40\2\0\2\3\12\0\1\3\2\40\17\3\2\0"+
    "\1\3\10\40\1\3\3\40\1\3\51\40\2\3\1\40"+
    "\7\0\1\3\3\0\1\3\4\0\1\40\10\3\1\0"+
    "\10\3\2\40\2\0\2\3\12\0\12\3\6\40\2\3"+
    "\2\0\1\3\22\40\3\3\30\40\1\3\11\40\1\3"+
    "\1\40\2\3\7\40\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\22\3\2\0\15\3\60\40\1\0"+
    "\2\40\7\0\4\3\10\40\10\0\1\3\12\0\47\3"+
    "\2\40\1\3\1\40\2\3\2\40\1\3\1\40\2\3"+
    "\1\40\6\3\4\40\1\3\7\40\1\3\3\40\1\3"+
    "\1\40\1\3\1\40\2\3\2\40\1\3\4\40\1\0"+
    "\2\40\6\0\1\3\2\0\1\40\2\3\5\40\1\3"+
    "\1\40\1\3\6\0\2\3\12\0\2\3\4\40\40\3"+
    "\1\40\27\3\2\0\6\3\12\0\13\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\2\0\10\40\1\3\44\40"+
    "\4\3\24\0\1\3\2\0\5\40\13\0\1\3\44\0"+
    "\11\3\1\0\71\3\53\40\24\0\1\40\12\0\6\3"+
    "\6\40\4\0\4\40\3\0\1\40\3\0\2\40\7\0"+
    "\3\40\4\0\15\40\14\0\1\40\17\0\2\3\46\40"+
    "\1\3\1\40\5\3\1\40\2\3\53\40\1\3\115\40"+
    "\1\3\4\40\2\3\7\40\1\3\1\40\1\3\4\40"+
    "\2\3\51\40\1\3\4\40\2\3\41\40\1\3\4\40"+
    "\2\3\7\40\1\3\1\40\1\3\4\40\2\3\17\40"+
    "\1\3\71\40\1\3\4\40\2\3\103\40\2\3\3\0"+
    "\40\3\20\40\20\3\125\40\14\3\u016c\40\2\3\21\40"+
    "\1\3\32\40\5\3\113\40\3\3\3\40\17\3\15\40"+
    "\1\3\4\40\3\0\13\3\22\40\3\0\13\3\22\40"+
    "\2\0\14\3\15\40\1\3\3\40\1\3\2\0\14\3"+
    "\64\40\40\0\3\3\1\40\3\3\2\40\1\0\2\3"+
    "\12\0\41\3\3\0\2\3\12\0\6\3\130\40\10\3"+
    "\51\40\1\0\1\40\5\3\106\40\12\3\35\40\3\3"+
    "\14\0\4\3\14\0\12\3\12\0\36\40\2\3\5\40"+
    "\13\3\54\40\4\3\21\0\7\40\2\0\6\3\12\0"+
    "\46\3\27\40\5\0\4\3\65\40\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\40\130\3\5\0"+
    "\57\40\21\0\7\40\4\3\12\0\21\3\11\0\14\3"+
    "\3\0\36\40\15\0\2\40\12\0\54\40\16\0\14\3"+
    "\44\40\24\0\10\3\12\0\3\3\3\40\12\0\44\40"+
    "\122\3\3\0\1\3\25\0\4\40\1\0\4\40\3\0"+
    "\2\40\11\3\300\40\47\0\25\3\4\0\26\40\2\3"+
    "\6\40\2\3\46\40\2\3\6\40\2\3\10\40\1\3"+
    "\1\40\1\3\1\40\1\3\1\40\1\3\37\40\2\3"+
    "\65\40\1\3\7\40\1\3\1\40\3\3\3\40\1\3"+
    "\7\40\3\3\4\40\2\3\6\40\4\3\15\40\5\3"+
    "\3\40\1\3\7\40\16\3\5\0\32\3\5\0\20\3"+
    "\2\40\23\3\1\40\13\3\5\0\5\3\6\0\1\3"+
    "\1\40\15\3\1\40\20\3\15\40\3\3\33\40\25\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\40\4\3"+
    "\1\40\2\3\12\40\1\3\1\40\3\3\5\40\6\3"+
    "\1\40\1\3\1\40\1\3\1\40\1\3\4\40\1\3"+
    "\13\40\2\3\4\40\5\3\5\40\4\3\1\40\21\3"+
    "\51\40\u0177\3\57\40\1\3\57\40\1\3\205\40\6\3"+
    "\4\40\3\0\2\40\14\3\46\40\1\3\1\40\5\3"+
    "\1\40\2\3\70\40\7\3\1\40\17\3\1\0\27\40"+
    "\11\3\7\40\1\3\7\40\1\3\7\40\1\3\7\40"+
    "\1\3\7\40\1\3\7\40\1\3\7\40\1\3\7\40"+
    "\1\3\40\0\57\3\1\40\325\3\3\40\31\3\11\40"+
    "\6\0\1\3\5\40\2\3\5\40\4\3\126\40\2\3"+
    "\2\0\2\3\3\40\1\3\132\40\1\3\4\40\5\3"+
    "\51\40\3\3\136\40\21\3\33\40\65\3\306\40\112\3"+
    "\315\40\63\3\215\40\103\3\56\40\2\3\15\40\3\3"+
    "\20\40\12\0\2\40\24\3\57\40\1\0\4\3\12\0"+
    "\1\3\31\40\7\3\1\0\120\40\2\0\45\3\11\40"+
    "\2\3\147\40\2\3\4\40\1\3\4\40\14\3\13\40"+
    "\115\3\12\40\1\0\3\40\1\0\4\40\1\0\27\40"+
    "\5\0\20\3\1\40\7\3\64\40\14\3\2\0\62\40"+
    "\21\0\13\3\12\0\6\3\22\0\6\40\3\3\1\40"+
    "\4\3\12\0\34\40\10\0\2\3\27\40\15\0\14\3"+
    "\35\40\3\3\4\0\57\40\16\0\16\3\1\40\12\0"+
    "\46\3\51\40\16\0\11\3\3\40\1\0\10\40\2\0"+
    "\2\3\12\0\6\3\27\40\3\3\1\40\1\0\4\3"+
    "\60\40\1\0\1\40\3\0\2\40\2\0\5\40\2\0"+
    "\1\40\1\0\1\40\30\3\3\40\2\3\13\40\5\0"+
    "\2\3\3\40\2\0\12\3\6\40\2\3\6\40\2\3"+
    "\6\40\11\3\7\40\1\3\7\40\221\3\43\40\10\0"+
    "\1\3\2\0\2\3\12\0\6\3\244\40\14\3\27\40"+
    "\4\3\61\40\4\3\156\40\2\3\152\40\46\3\7\40"+
    "\14\3\5\40\5\3\1\40\1\0\12\40\1\3\15\40"+
    "\1\3\5\40\1\3\1\40\1\3\2\40\1\3\2\40"+
    "\1\3\154\40\41\3\153\40\22\3\100\40\2\3\66\40"+
    "\50\3\15\40\3\3\20\0\20\3\7\0\14\3\2\40"+
    "\30\3\3\40\31\3\1\40\6\3\5\40\1\3\207\40"+
    "\2\3\1\0\4\3\1\40\13\3\12\0\7\3\32\40"+
    "\4\3\1\40\1\3\32\40\13\3\131\40\3\3\6\40"+
    "\2\3\6\40\2\3\6\40\2\3\3\40\3\3\2\40"+
    "\3\3\2\40\22\3\3\0\4\3\14\40\1\3\32\40"+
    "\1\3\23\40\1\3\2\40\1\3\17\40\2\3\16\40"+
    "\42\3\173\40\105\3\65\40\210\3\1\0\202\3\35\40"+
    "\3\3\61\40\57\3\37\40\21\3\33\40\65\3\36\40"+
    "\2\3\44\40\4\3\10\40\1\3\5\40\52\3\236\40"+
    "\2\3\12\0\126\3\6\40\2\3\1\40\1\3\54\40"+
    "\1\3\2\40\3\3\1\40\2\3\27\40\252\3\26\40"+
    "\12\3\32\40\106\3\70\40\6\3\2\40\100\3\1\40"+
    "\3\0\1\3\2\0\5\3\4\0\4\40\1\3\3\40"+
    "\1\3\33\40\4\3\3\0\4\3\1\0\40\3\35\40"+
    "\203\3\66\40\12\3\26\40\12\3\23\40\215\3\111\40"+
    "\267\3\3\0\65\40\17\0\37\3\12\0\20\3\3\0"+
    "\55\40\13\0\2\3\1\0\22\3\31\40\7\3\12\0"+
    "\6\3\3\0\44\40\16\0\1\3\12\0\100\3\3\0"+
    "\60\40\16\0\4\40\13\3\12\0\246\3\53\40\15\0"+
    "\10\3\12\0\66\3\157\40\221\3\143\40\235\3\57\40"+
    "\321\3\71\40\307\3\105\40\13\3\1\40\56\0\20\3"+
    "\4\0\15\40\140\3\2\40\u0163\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\40"+
    "\1\3\107\40\1\3\2\40\2\3\1\40\2\3\2\40"+
    "\2\3\4\40\1\3\14\40\1\3\1\40\1\3\7\40"+
    "\1\3\101\40\1\3\4\40\2\3\10\40\1\3\7\40"+
    "\1\3\34\40\1\3\4\40\1\3\5\40\1\3\1\40"+
    "\3\3\7\40\1\3\u0154\40\2\3\31\40\1\3\31\40"+
    "\1\3\37\40\1\3\31\40\1\3\37\40\1\3\31\40"+
    "\1\3\37\40\1\3\31\40\1\3\37\40\1\3\31\40"+
    "\1\3\10\40\2\3\62\0\4\40\1\3\33\40\1\3"+
    "\2\40\1\3\1\40\2\3\1\40\1\3\12\40\1\3"+
    "\4\40\1\3\1\40\1\3\1\40\6\3\1\40\4\3"+
    "\1\40\1\3\1\40\1\3\1\40\1\3\3\40\1\3"+
    "\2\40\1\3\1\40\2\3\1\40\1\3\1\40\1\3"+
    "\1\40\1\3\1\40\1\3\1\40\1\3\2\40\1\3"+
    "\1\40\2\3\4\40\1\3\7\40\1\3\4\40\1\3"+
    "\4\40\1\3\1\40\1\3\12\40\1\3\21\40\5\3"+
    "\3\40\1\3\5\40\1\3\21\40\104\3\327\40\51\3"+
    "\65\40\13\3\336\40\343\3\1\0\36\3\140\0\200\3"+
    "\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\1\1\31\1\32\1\33\14\1"+
    "\1\34\1\35\1\36\1\37\1\40\1\4\1\0\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\10\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21"+
    "\1\55\1\21\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\1\1\65\3\43\1\66\6\43\1\67\2\43\1\70"+
    "\1\71\15\43\1\72\1\73\2\4\2\10\1\55\1\0"+
    "\1\21\1\74\1\75\15\43\1\76\1\43\1\77\4\43"+
    "\1\100\13\43\1\0\1\43\1\101\1\43\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\4\43\1\112"+
    "\3\43\1\113\1\114\1\115\1\116\4\43\1\117\1\43"+
    "\1\120\2\43\1\121\1\43\1\122\3\43\1\123\1\43"+
    "\1\124\1\125\1\126\1\127\1\43\1\130\2\43\1\131"+
    "\1\132\1\133\3\43\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\103\0\103\0\u029e\0\u02e1\0\103"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\u0430\0\103\0\103\0\u0473"+
    "\0\u04b6\0\u04f9\0\103\0\u0192\0\103\0\u053c\0\103\0\u057f"+
    "\0\103\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\103\0\u08e6\0\103"+
    "\0\103\0\103\0\103\0\u0929\0\u096c\0\u09af\0\u0192\0\103"+
    "\0\103\0\103\0\103\0\u09f2\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\u0a35\0\103\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\103\0\103\0\103\0\103\0\u0b84\0\u0bc7\0\103\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0192\0\u0ea8\0\u0eeb\0\u0192\0\u0192\0\u0f2e\0\u0f71"+
    "\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\103\0\103\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\103\0\103\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u0192\0\u17d1\0\u0192\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u0192\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u0192\0\u1c87\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192\0\u0192"+
    "\0\u0192\0\u0192\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u0192\0\u0192\0\u0192\0\u0192\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u0192\0\u1fee\0\u0192\0\u2031\0\u2074\0\u0192"+
    "\0\u20b7\0\u0192\0\u20fa\0\u213d\0\u2180\0\u0192\0\u21c3\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u2206\0\u0192\0\u2249\0\u228c\0\u0192"+
    "\0\u0192\0\u0192\0\u22cf\0\u2312\0\u2355\0\u0192\0\u0192\0\u0192";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\2\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\6\34\1\35\1\36\1\37"+
    "\1\40\1\34\1\41\1\34\1\42\1\43\1\44\1\45"+
    "\1\46\1\34\1\47\1\34\1\50\4\34\1\51\1\52"+
    "\1\53\1\54\1\34\1\55\2\34\1\56\1\57\1\60"+
    "\1\61\105\0\1\3\132\0\1\62\50\0\2\6\1\0"+
    "\1\6\1\0\2\6\1\63\34\6\1\64\36\6\2\65"+
    "\1\0\1\65\1\0\1\65\1\66\74\65\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\26\67\36\0\1\70\63\0\1\71\16\0\1\72\50\0"+
    "\2\13\1\0\1\13\1\0\7\13\1\73\27\13\1\74"+
    "\36\13\17\0\1\75\12\0\1\76\70\0\1\77\11\0"+
    "\1\100\72\0\1\101\7\0\1\102\75\0\2\103\106\0"+
    "\1\104\73\0\1\103\1\0\2\25\7\0\1\105\1\106"+
    "\2\0\1\107\4\0\1\25\2\0\1\105\2\0\1\106"+
    "\17\0\1\107\30\0\1\103\1\0\2\25\10\0\1\106"+
    "\7\0\1\25\5\0\1\106\56\0\1\110\1\111\102\0"+
    "\1\112\47\0\1\113\32\0\1\114\1\115\47\0\4\2"+
    "\1\116\76\2\32\0\1\117\50\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\16\67"+
    "\1\120\7\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\1\121\13\67\1\122"+
    "\11\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\14\67\1\123\11\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\2\67\1\124\6\67\1\125\5\67\1\126"+
    "\2\67\1\127\1\67\1\130\1\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\1\131\6\67\1\132\4\67\1\133\4\67\1\134\4\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\5\67\1\135\5\67\1\136\12\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\4\67\1\137\7\67\1\140\11\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\4\67\1\141\21\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\4\67\1\142\1\67\1\143\17\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\4\67\1\144\1\67\1\145\7\67\1\146\7\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\11\67\1\147\1\150\1\151\12\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\1\152\5\67\1\153\17\67\36\0"+
    "\1\154\45\0\1\155\2\0\1\6\1\156\2\6\1\157"+
    "\1\156\75\6\2\65\1\0\1\65\1\0\76\65\2\66"+
    "\1\0\1\66\1\0\76\66\1\13\1\160\2\13\1\161"+
    "\1\160\75\13\25\0\2\103\10\0\1\106\7\0\1\103"+
    "\5\0\1\106\52\0\2\105\20\0\1\105\53\0\1\162"+
    "\1\0\1\162\2\0\2\162\20\0\1\162\56\0\1\163"+
    "\1\0\2\164\6\0\3\164\7\0\1\164\1\0\6\164"+
    "\56\0\1\165\102\0\1\166\52\0\1\2\100\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\4\67\1\167\21\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\17\67"+
    "\1\170\6\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\13\67\1\171\12\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\13\67\1\172\12\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\6\67\1\173\17\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\7\67"+
    "\1\174\7\67\1\175\6\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\1\176"+
    "\25\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\1\177\25\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\4\67\1\200\2\67\1\201\5\67\1\202\10\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\11\67\1\203\14\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\16\67\1\204\7\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\13\67"+
    "\1\205\12\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\20\67\1\206\5\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\2\67\1\207\23\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\1\210\17\67\1\211\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\11\67\1\212\6\67\1\213\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\7\67\1\214\16\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\17\67\1\215"+
    "\6\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\4\67\1\216\21\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\1\217\20\67\1\220\4\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\7\67\1\221\16\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\1\222"+
    "\25\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\17\67\1\223\1\224\5\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\7\67\1\225\16\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\7\67\1\226\16\67\4\0\1\6\1\156\2\6"+
    "\1\157\1\156\1\6\1\63\34\6\1\64\42\6\1\0"+
    "\2\6\1\63\34\6\1\64\36\6\1\13\1\160\2\13"+
    "\1\161\1\160\6\13\1\73\27\13\1\74\42\13\1\0"+
    "\7\13\1\73\27\13\1\74\36\13\25\0\2\162\20\0"+
    "\1\162\60\0\2\227\6\0\3\227\7\0\1\227\1\0"+
    "\6\227\47\0\1\227\1\0\2\164\6\0\3\164\1\0"+
    "\1\106\5\0\1\164\1\0\6\164\7\0\1\106\14\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\1\230\25\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\4\67"+
    "\1\231\21\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\20\67\1\232\5\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\4\67\1\233\21\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\14\67\1\234\11\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\5\67"+
    "\1\235\20\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\4\67\1\236\21\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\2\67\1\237\23\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\11\67\1\240\14\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\2\67"+
    "\1\241\23\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\20\67\1\242\5\67"+
    "\4\0\1\67\10\0\1\67\13\0\2\67\6\0\6\67"+
    "\4\0\1\67\1\0\14\67\1\243\11\67\4\0\1\67"+
    "\10\0\1\67\13\0\2\67\6\0\6\67\4\0\1\67"+
    "\1\0\17\67\1\244\6\67\4\0\1\67\10\0\1\67"+
    "\13\0\2\67\6\0\6\67\4\0\1\67\1\0\2\67"+
    "\1\245\23\67\4\0\1\67\10\0\1\67\13\0\2\67"+
    "\6\0\6\67\4\0\1\67\1\0\1\246\25\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\3\67\1\247\22\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\21\67\1\250\4\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\4\67\1\251"+
    "\21\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\5\67\1\252\20\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\253\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\13\67\1\254\12\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\15\67\1\255"+
    "\10\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\4\67\1\256\21\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\12\67\1\257\13\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\17\67\1\260\6\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\4\67\1\261"+
    "\21\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\7\67\1\262\16\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\263\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\11\67\1\264\14\67\31\0\2\227\6\0\3\227\1\0"+
    "\1\106\5\0\1\227\1\0\6\227\7\0\1\106\14\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\10\67\1\265\15\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\7\67\1\266\16\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\16\67\1\267"+
    "\7\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\4\67\1\270\21\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\271\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\11\67\1\272\14\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\14\67\1\273"+
    "\11\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\16\67\1\274\7\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\2\67\1\275\23\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\20\67\1\276\5\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\7\67\1\277"+
    "\16\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\10\67\1\300\15\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\301\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\11\67\1\302\14\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\4\67\1\303"+
    "\21\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\13\67\1\304\12\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\305\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\7\67\1\306\16\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\13\67\1\307"+
    "\12\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\13\67\1\310\12\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\20\67\1\311\5\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\20\67\1\312\5\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\21\67\1\313"+
    "\4\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\14\67\1\314\11\67\4\0"+
    "\1\67\10\0\1\67\13\0\2\67\6\0\6\67\4\0"+
    "\1\67\1\0\11\67\1\315\14\67\4\0\1\67\10\0"+
    "\1\67\13\0\2\67\6\0\6\67\4\0\1\67\1\0"+
    "\4\67\1\316\21\67\4\0\1\67\10\0\1\67\13\0"+
    "\2\67\6\0\6\67\4\0\1\67\1\0\13\67\1\317"+
    "\12\67\4\0\1\67\10\0\1\67\13\0\2\67\6\0"+
    "\6\67\4\0\1\67\1\0\25\67\1\320\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\14\1\1\11\1\1\4\11\1\0\3\1\4\11\1\0"+
    "\6\11\1\1\1\11\4\1\4\11\2\1\1\11\34\1"+
    "\2\11\5\1\1\0\1\1\2\11\40\1\1\0\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ShellLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public ShellToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return ShellToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ShellToken.EVAL_CONTENT;
            }
            // fall through
          case 95: break;
          case 2:
            { return ShellToken.WHITESPACE;
            }
            // fall through
          case 96: break;
          case 3:
            { return ShellToken.BANG;
            }
            // fall through
          case 97: break;
          case 4:
            { return ShellToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 98: break;
          case 5:
            { return ShellToken.DOLLAR;
            }
            // fall through
          case 99: break;
          case 6:
            { return ShellToken.MOD;
            }
            // fall through
          case 100: break;
          case 7:
            { return ShellToken.AND;
            }
            // fall through
          case 101: break;
          case 8:
            { return ShellToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 102: break;
          case 9:
            { return ShellToken.LPAREN;
            }
            // fall through
          case 103: break;
          case 10:
            { return ShellToken.RPAREN;
            }
            // fall through
          case 104: break;
          case 11:
            { return ShellToken.MULT;
            }
            // fall through
          case 105: break;
          case 12:
            { return ShellToken.PLUS;
            }
            // fall through
          case 106: break;
          case 13:
            { return ShellToken.COMMA;
            }
            // fall through
          case 107: break;
          case 14:
            { return ShellToken.MINUS;
            }
            // fall through
          case 108: break;
          case 15:
            { return ShellToken.DOT;
            }
            // fall through
          case 109: break;
          case 16:
            { return ShellToken.DIV;
            }
            // fall through
          case 110: break;
          case 17:
            { return ShellToken.INTEGER_LITERAL;
            }
            // fall through
          case 111: break;
          case 18:
            { return ShellToken.COLON;
            }
            // fall through
          case 112: break;
          case 19:
            { return ShellToken.SEMICOLON;
            }
            // fall through
          case 113: break;
          case 20:
            { return ShellToken.LT;
            }
            // fall through
          case 114: break;
          case 21:
            { return ShellToken.EQ;
            }
            // fall through
          case 115: break;
          case 22:
            { return ShellToken.GT;
            }
            // fall through
          case 116: break;
          case 23:
            { return ShellToken.QUEST;
            }
            // fall through
          case 117: break;
          case 24:
            { return ShellToken.LBRACK;
            }
            // fall through
          case 118: break;
          case 25:
            { return ShellToken.RBRACK;
            }
            // fall through
          case 119: break;
          case 26:
            { return ShellToken.XOR;
            }
            // fall through
          case 120: break;
          case 27:
            { return ShellToken.BACKTICK;
            }
            // fall through
          case 121: break;
          case 28:
            { return ShellToken.LBRACE;
            }
            // fall through
          case 122: break;
          case 29:
            { return ShellToken.OR;
            }
            // fall through
          case 123: break;
          case 30:
            { return ShellToken.RBRACE;
            }
            // fall through
          case 124: break;
          case 31:
            { return ShellToken.TILDE;
            }
            // fall through
          case 125: break;
          case 32:
            { return ShellToken.NOTEQ;
            }
            // fall through
          case 126: break;
          case 33:
            { return ShellToken.COMMENT;
            }
            // fall through
          case 127: break;
          case 34:
            { return ShellToken.SHEBANG;
            }
            // fall through
          case 128: break;
          case 35:
            { return ShellToken.IDENTIFIER;
            }
            // fall through
          case 129: break;
          case 36:
            { return ShellToken.MODEQ;
            }
            // fall through
          case 130: break;
          case 37:
            { return ShellToken.AND_AND;
            }
            // fall through
          case 131: break;
          case 38:
            { return ShellToken.BIT_AND_EQ;
            }
            // fall through
          case 132: break;
          case 39:
            { return ShellToken.EXPONENT;
            }
            // fall through
          case 133: break;
          case 40:
            { return ShellToken.MULTEQ;
            }
            // fall through
          case 134: break;
          case 41:
            { return ShellToken.PLUS_PLUS;
            }
            // fall through
          case 135: break;
          case 42:
            { return ShellToken.PLUSEQ;
            }
            // fall through
          case 136: break;
          case 43:
            { return ShellToken.MINUS_MINUS;
            }
            // fall through
          case 137: break;
          case 44:
            { return ShellToken.MINUSEQ;
            }
            // fall through
          case 138: break;
          case 45:
            { return ShellToken.DOUBLE_LITERAL;
            }
            // fall through
          case 139: break;
          case 46:
            { return ShellToken.DIVEQ;
            }
            // fall through
          case 140: break;
          case 47:
            { return ShellToken.SHIFT_LEFT;
            }
            // fall through
          case 141: break;
          case 48:
            { return ShellToken.LTEQ;
            }
            // fall through
          case 142: break;
          case 49:
            { return ShellToken.EQEQ;
            }
            // fall through
          case 143: break;
          case 50:
            { return ShellToken.REGEXP;
            }
            // fall through
          case 144: break;
          case 51:
            { return ShellToken.GTEQ;
            }
            // fall through
          case 145: break;
          case 52:
            { return ShellToken.SHIFT_RIGHT;
            }
            // fall through
          case 146: break;
          case 53:
            { return ShellToken.BIT_XOR_EQ;
            }
            // fall through
          case 147: break;
          case 54:
            { return ShellToken.DO;
            }
            // fall through
          case 148: break;
          case 55:
            { return ShellToken.FI;
            }
            // fall through
          case 149: break;
          case 56:
            { return ShellToken.IF;
            }
            // fall through
          case 150: break;
          case 57:
            { return ShellToken.IN;
            }
            // fall through
          case 151: break;
          case 58:
            { return ShellToken.BIT_OR_EQ;
            }
            // fall through
          case 152: break;
          case 59:
            { return ShellToken.OR_OR;
            }
            // fall through
          case 153: break;
          case 60:
            { return ShellToken.SHIFT_LEFT_EQ;
            }
            // fall through
          case 154: break;
          case 61:
            { return ShellToken.SHIFT_RIGHT_EQ;
            }
            // fall through
          case 155: break;
          case 62:
            { return ShellToken.FOR;
            }
            // fall through
          case 156: break;
          case 63:
            { return ShellToken.LET;
            }
            // fall through
          case 157: break;
          case 64:
            { return ShellToken.SET;
            }
            // fall through
          case 158: break;
          case 65:
            { return ShellToken.CASE;
            }
            // fall through
          case 159: break;
          case 66:
            { return ShellToken.DONE;
            }
            // fall through
          case 160: break;
          case 67:
            { return ShellToken.ECHO;
            }
            // fall through
          case 161: break;
          case 68:
            { return ShellToken.ELIF;
            }
            // fall through
          case 162: break;
          case 69:
            { return ShellToken.ELSE;
            }
            // fall through
          case 163: break;
          case 70:
            { return ShellToken.ESAC;
            }
            // fall through
          case 164: break;
          case 71:
            { return ShellToken.EVAL;
            }
            // fall through
          case 165: break;
          case 72:
            { return ShellToken.EXEC;
            }
            // fall through
          case 166: break;
          case 73:
            { return ShellToken.EXIT;
            }
            // fall through
          case 167: break;
          case 74:
            { return ShellToken.READ;
            }
            // fall through
          case 168: break;
          case 75:
            { return ShellToken.TEST;
            }
            // fall through
          case 169: break;
          case 76:
            { return ShellToken.THEN;
            }
            // fall through
          case 170: break;
          case 77:
            { return ShellToken.TRAP;
            }
            // fall through
          case 171: break;
          case 78:
            { return ShellToken.TRUE;
            }
            // fall through
          case 172: break;
          case 79:
            { return ShellToken.WAIT;
            }
            // fall through
          case 173: break;
          case 80:
            { return ShellToken.BREAK;
            }
            // fall through
          case 174: break;
          case 81:
            { return ShellToken.FALSE;
            }
            // fall through
          case 175: break;
          case 82:
            { return ShellToken.LOCAL;
            }
            // fall through
          case 176: break;
          case 83:
            { return ShellToken.SHIFT;
            }
            // fall through
          case 177: break;
          case 84:
            { return ShellToken.UMASK;
            }
            // fall through
          case 178: break;
          case 85:
            { return ShellToken.UNSET;
            }
            // fall through
          case 179: break;
          case 86:
            { return ShellToken.UNTIL;
            }
            // fall through
          case 180: break;
          case 87:
            { return ShellToken.WHILE;
            }
            // fall through
          case 181: break;
          case 88:
            { return ShellToken.EXPORT;
            }
            // fall through
          case 182: break;
          case 89:
            { return ShellToken.RETURN;
            }
            // fall through
          case 183: break;
          case 90:
            { return ShellToken.SELECT;
            }
            // fall through
          case 184: break;
          case 91:
            { return ShellToken.ULIMIT;
            }
            // fall through
          case 185: break;
          case 92:
            { return ShellToken.CONTINUE;
            }
            // fall through
          case 186: break;
          case 93:
            { return ShellToken.FUNCTION;
            }
            // fall through
          case 187: break;
          case 94:
            { return ShellToken.READONLY;
            }
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
