/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.groovy.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>groovy.flex</tt>
 */
public class GroovyLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\10\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\35\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\43\1\45\13\43\1\46\2\43\1\47"+
    "\1\50\1\51\1\52\1\53\1\0\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\43\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\43\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\53\0\1\110\12\0\1\110\4\0"+
    "\1\110\5\0\27\110\1\0\37\110\1\0\u01ca\110\4\0"+
    "\14\110\16\0\5\110\7\0\1\110\1\0\1\110\201\0"+
    "\5\110\1\0\2\110\2\0\4\110\1\0\1\110\6\0"+
    "\1\110\1\0\3\110\1\0\1\110\1\0\24\110\1\0"+
    "\123\110\1\0\213\110\10\0\246\110\1\0\46\110\2\0"+
    "\1\110\6\0\51\110\107\0\33\110\4\0\4\110\55\0"+
    "\53\110\43\0\2\110\1\0\143\110\1\0\1\110\17\0"+
    "\2\110\7\0\2\110\12\0\3\110\2\0\1\110\20\0"+
    "\1\110\1\0\36\110\35\0\131\110\13\0\1\110\30\0"+
    "\41\110\11\0\2\110\4\0\1\110\5\0\26\110\4\0"+
    "\1\110\11\0\1\110\3\0\1\110\27\0\31\110\7\0"+
    "\13\110\65\0\25\110\1\0\10\110\106\0\66\110\3\0"+
    "\1\110\22\0\1\110\7\0\12\110\17\0\20\110\4\0"+
    "\10\110\2\0\2\110\2\0\26\110\1\0\7\110\1\0"+
    "\1\110\3\0\4\110\3\0\1\110\20\0\1\110\15\0"+
    "\2\110\1\0\3\110\16\0\2\110\12\0\1\110\10\0"+
    "\6\110\4\0\2\110\2\0\26\110\1\0\7\110\1\0"+
    "\2\110\1\0\2\110\1\0\2\110\37\0\4\110\1\0"+
    "\1\110\23\0\3\110\20\0\11\110\1\0\3\110\1\0"+
    "\26\110\1\0\7\110\1\0\2\110\1\0\5\110\3\0"+
    "\1\110\22\0\1\110\17\0\2\110\27\0\1\110\13\0"+
    "\10\110\2\0\2\110\2\0\26\110\1\0\7\110\1\0"+
    "\2\110\1\0\5\110\3\0\1\110\36\0\2\110\1\0"+
    "\3\110\17\0\1\110\21\0\1\110\1\0\6\110\3\0"+
    "\3\110\1\0\4\110\3\0\2\110\1\0\1\110\1\0"+
    "\2\110\3\0\2\110\3\0\3\110\3\0\14\110\26\0"+
    "\1\110\64\0\10\110\1\0\3\110\1\0\27\110\1\0"+
    "\20\110\3\0\1\110\32\0\3\110\5\0\2\110\36\0"+
    "\1\110\4\0\10\110\1\0\3\110\1\0\27\110\1\0"+
    "\12\110\1\0\5\110\3\0\1\110\40\0\1\110\1\0"+
    "\2\110\17\0\2\110\22\0\10\110\1\0\3\110\1\0"+
    "\51\110\2\0\1\110\20\0\1\110\5\0\3\110\10\0"+
    "\3\110\30\0\6\110\5\0\22\110\3\0\30\110\1\0"+
    "\11\110\1\0\1\110\2\0\7\110\72\0\60\110\1\0"+
    "\2\110\14\0\7\110\72\0\2\110\1\0\1\110\1\0"+
    "\5\110\1\0\30\110\1\0\1\110\1\0\12\110\1\0"+
    "\2\110\11\0\1\110\2\0\5\110\1\0\1\110\25\0"+
    "\4\110\40\0\1\110\77\0\10\110\1\0\44\110\33\0"+
    "\5\110\163\0\53\110\24\0\1\110\20\0\6\110\4\0"+
    "\4\110\3\0\1\110\3\0\2\110\7\0\3\110\4\0"+
    "\15\110\14\0\1\110\21\0\46\110\1\0\1\110\5\0"+
    "\1\110\2\0\53\110\1\0\115\110\1\0\4\110\2\0"+
    "\7\110\1\0\1\110\1\0\4\110\2\0\51\110\1\0"+
    "\4\110\2\0\41\110\1\0\4\110\2\0\7\110\1\0"+
    "\1\110\1\0\4\110\2\0\17\110\1\0\71\110\1\0"+
    "\4\110\2\0\103\110\45\0\20\110\20\0\126\110\2\0"+
    "\6\110\3\0\u016c\110\2\0\21\110\1\0\32\110\5\0"+
    "\113\110\6\0\10\110\7\0\15\110\1\0\4\110\16\0"+
    "\22\110\16\0\22\110\16\0\15\110\1\0\3\110\17\0"+
    "\64\110\43\0\1\110\4\0\1\110\103\0\131\110\7\0"+
    "\5\110\2\0\42\110\1\0\1\110\5\0\106\110\12\0"+
    "\37\110\61\0\36\110\2\0\5\110\13\0\54\110\4\0"+
    "\32\110\66\0\27\110\11\0\65\110\122\0\1\110\135\0"+
    "\57\110\21\0\7\110\67\0\36\110\15\0\2\110\12\0"+
    "\54\110\32\0\44\110\51\0\3\110\12\0\44\110\2\0"+
    "\11\110\7\0\53\110\2\0\3\110\51\0\4\110\1\0"+
    "\6\110\1\0\2\110\3\0\1\110\5\0\300\110\100\0"+
    "\26\110\2\0\6\110\2\0\46\110\2\0\6\110\2\0"+
    "\10\110\1\0\1\110\1\0\1\110\1\0\1\110\1\0"+
    "\37\110\2\0\65\110\1\0\7\110\1\0\1\110\3\0"+
    "\3\110\1\0\7\110\3\0\4\110\2\0\6\110\4\0"+
    "\15\110\5\0\3\110\1\0\7\110\164\0\1\110\15\0"+
    "\1\110\20\0\15\110\145\0\1\110\4\0\1\110\2\0"+
    "\12\110\1\0\1\110\3\0\5\110\6\0\1\110\1\0"+
    "\1\110\1\0\1\110\1\0\4\110\1\0\13\110\2\0"+
    "\4\110\5\0\5\110\4\0\1\110\64\0\2\110\u017b\0"+
    "\57\110\1\0\57\110\1\0\205\110\6\0\4\110\3\0"+
    "\2\110\14\0\46\110\1\0\1\110\5\0\1\110\2\0"+
    "\70\110\7\0\1\110\20\0\27\110\11\0\7\110\1\0"+
    "\7\110\1\0\7\110\1\0\7\110\1\0\7\110\1\0"+
    "\7\110\1\0\7\110\1\0\7\110\120\0\1\110\325\0"+
    "\2\110\52\0\5\110\5\0\2\110\4\0\126\110\6\0"+
    "\3\110\1\0\132\110\1\0\4\110\5\0\53\110\1\0"+
    "\136\110\21\0\33\110\65\0\306\110\112\0\360\110\20\0"+
    "\215\110\103\0\56\110\2\0\15\110\3\0\20\110\12\0"+
    "\2\110\24\0\57\110\20\0\37\110\2\0\106\110\61\0"+
    "\11\110\2\0\147\110\2\0\65\110\2\0\5\110\60\0"+
    "\13\110\1\0\3\110\1\0\4\110\1\0\27\110\35\0"+
    "\64\110\16\0\62\110\76\0\6\110\3\0\1\110\1\0"+
    "\2\110\13\0\34\110\12\0\27\110\31\0\35\110\7\0"+
    "\57\110\34\0\1\110\20\0\5\110\1\0\12\110\12\0"+
    "\5\110\1\0\51\110\27\0\3\110\1\0\10\110\24\0"+
    "\27\110\3\0\1\110\3\0\62\110\1\0\1\110\3\0"+
    "\2\110\2\0\5\110\2\0\1\110\1\0\1\110\30\0"+
    "\3\110\2\0\13\110\7\0\3\110\14\0\6\110\2\0"+
    "\6\110\2\0\6\110\11\0\7\110\1\0\7\110\1\0"+
    "\53\110\1\0\14\110\10\0\163\110\35\0\244\110\14\0"+
    "\27\110\4\0\61\110\4\0\156\110\2\0\152\110\46\0"+
    "\7\110\14\0\5\110\5\0\1\110\1\0\12\110\1\0"+
    "\15\110\1\0\5\110\1\0\1\110\1\0\2\110\1\0"+
    "\2\110\1\0\154\110\41\0\153\110\22\0\100\110\2\0"+
    "\66\110\50\0\14\110\164\0\5\110\1\0\207\110\44\0"+
    "\32\110\6\0\32\110\13\0\131\110\3\0\6\110\2\0"+
    "\6\110\2\0\6\110\2\0\3\110\43\0\14\110\1\0"+
    "\32\110\1\0\23\110\1\0\2\110\1\0\17\110\2\0"+
    "\16\110\42\0\173\110\205\0\35\110\3\0\61\110\57\0"+
    "\40\110\15\0\24\110\1\0\10\110\6\0\46\110\12\0"+
    "\36\110\2\0\44\110\4\0\10\110\60\0\236\110\22\0"+
    "\44\110\4\0\44\110\4\0\50\110\10\0\64\110\234\0"+
    "\67\110\11\0\26\110\12\0\10\110\230\0\6\110\2\0"+
    "\1\110\1\0\54\110\1\0\2\110\3\0\1\110\2\0"+
    "\27\110\12\0\27\110\11\0\37\110\101\0\23\110\1\0"+
    "\2\110\12\0\26\110\12\0\32\110\106\0\70\110\6\0"+
    "\2\110\100\0\1\110\17\0\4\110\1\0\3\110\1\0"+
    "\35\110\52\0\35\110\3\0\35\110\43\0\10\110\1\0"+
    "\34\110\33\0\66\110\12\0\26\110\12\0\23\110\15\0"+
    "\22\110\156\0\111\110\67\0\63\110\15\0\63\110\15\0"+
    "\44\110\334\0\35\110\12\0\1\110\10\0\26\110\232\0"+
    "\27\110\14\0\65\110\113\0\55\110\40\0\31\110\32\0"+
    "\44\110\35\0\1\110\13\0\43\110\3\0\1\110\14\0"+
    "\60\110\16\0\4\110\25\0\1\110\1\0\1\110\43\0"+
    "\22\110\1\0\31\110\124\0\7\110\1\0\1\110\1\0"+
    "\4\110\1\0\17\110\1\0\12\110\7\0\57\110\46\0"+
    "\10\110\2\0\2\110\2\0\26\110\1\0\7\110\1\0"+
    "\2\110\1\0\5\110\3\0\1\110\22\0\1\110\14\0"+
    "\5\110\236\0\65\110\22\0\4\110\24\0\1\110\40\0"+
    "\60\110\24\0\2\110\1\0\1\110\270\0\57\110\51\0"+
    "\4\110\44\0\60\110\24\0\1\110\73\0\53\110\15\0"+
    "\1\110\107\0\33\110\345\0\54\110\164\0\100\110\37\0"+
    "\1\110\240\0\10\110\2\0\47\110\20\0\1\110\1\0"+
    "\1\110\34\0\1\110\12\0\50\110\7\0\1\110\25\0"+
    "\1\110\13\0\56\110\23\0\1\110\42\0\71\110\7\0"+
    "\11\110\1\0\45\110\21\0\1\110\61\0\36\110\160\0"+
    "\7\110\1\0\2\110\1\0\46\110\25\0\1\110\31\0"+
    "\6\110\1\0\2\110\1\0\40\110\16\0\1\110\u0147\0"+
    "\23\110\15\0\232\110\346\0\304\110\274\0\57\110\321\0"+
    "\107\110\271\0\71\110\7\0\37\110\161\0\36\110\22\0"+
    "\60\110\20\0\4\110\37\0\25\110\5\0\23\110\260\0"+
    "\100\110\200\0\113\110\5\0\1\110\102\0\15\110\100\0"+
    "\2\110\1\0\1\110\34\0\370\110\10\0\363\110\15\0"+
    "\37\110\61\0\3\110\21\0\4\110\10\0\u018c\110\4\0"+
    "\153\110\5\0\15\110\3\0\11\110\7\0\12\110\146\0"+
    "\125\110\1\0\107\110\1\0\2\110\2\0\1\110\2\0"+
    "\2\110\2\0\4\110\1\0\14\110\1\0\1\110\1\0"+
    "\7\110\1\0\101\110\1\0\4\110\2\0\10\110\1\0"+
    "\7\110\1\0\34\110\1\0\4\110\1\0\5\110\1\0"+
    "\1\110\3\0\7\110\1\0\u0154\110\2\0\31\110\1\0"+
    "\31\110\1\0\37\110\1\0\31\110\1\0\37\110\1\0"+
    "\31\110\1\0\37\110\1\0\31\110\1\0\37\110\1\0"+
    "\31\110\1\0\10\110\64\0\55\110\12\0\7\110\20\0"+
    "\1\110\u0171\0\54\110\24\0\305\110\73\0\104\110\7\0"+
    "\1\110\264\0\4\110\1\0\33\110\1\0\2\110\1\0"+
    "\1\110\2\0\1\110\1\0\12\110\1\0\4\110\1\0"+
    "\1\110\1\0\1\110\6\0\1\110\4\0\1\110\1\0"+
    "\1\110\1\0\1\110\1\0\3\110\1\0\2\110\1\0"+
    "\1\110\2\0\1\110\1\0\1\110\1\0\1\110\1\0"+
    "\1\110\1\0\1\110\1\0\2\110\1\0\1\110\2\0"+
    "\4\110\1\0\7\110\1\0\4\110\1\0\4\110\1\0"+
    "\1\110\1\0\12\110\1\0\21\110\5\0\3\110\1\0"+
    "\5\110\1\0\21\110\104\0\327\110\51\0\65\110\13\0"+
    "\336\110\2\0\u0182\110\16\0\u0131\110\37\0\36\110\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\31\1\32\17\5\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\2\0\1\4\1\0\1\40"+
    "\1\41\1\42\1\43\2\10\1\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\0\1\61\1\0\1\62\1\21\1\63"+
    "\2\0\1\64\1\0\1\65\1\66\1\67\1\70\1\0"+
    "\1\71\1\72\1\73\1\74\1\75\1\5\1\76\10\5"+
    "\1\77\7\5\1\100\1\5\1\101\22\5\1\102\1\103"+
    "\1\104\1\0\1\4\1\105\1\0\1\10\1\105\1\10"+
    "\1\106\1\107\1\56\1\110\1\61\1\21\1\0\1\61"+
    "\1\21\1\111\1\112\1\113\1\114\1\115\1\0\12\5"+
    "\1\116\7\5\1\117\2\5\1\120\2\5\1\121\20\5"+
    "\1\122\1\123\3\5\1\124\4\0\1\56\2\110\3\0"+
    "\1\125\4\5\1\126\1\127\1\5\1\130\4\5\1\131"+
    "\1\132\10\5\1\133\1\5\1\134\13\5\1\135\3\5"+
    "\1\136\1\137\2\5\3\0\1\56\1\110\3\5\1\140"+
    "\1\141\1\142\4\5\1\143\1\144\1\145\12\5\1\146"+
    "\2\5\1\147\2\5\1\150\1\151\2\5\1\152\2\0"+
    "\1\5\1\153\3\5\1\154\3\5\1\155\2\5\1\156"+
    "\3\5\1\157\1\160\1\161\1\5\1\162\1\5\1\163"+
    "\2\5\1\0\1\5\1\164\1\5\1\165\1\166\1\167"+
    "\3\5\1\170\1\171\5\5\1\0\1\172\1\173\4\5"+
    "\1\174\2\5\1\175\1\0\2\5\1\176\1\177\1\5"+
    "\1\200\1\0\1\201\1\202\1\5\1\0\1\5\1\203"+
    "\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\111\0\111\0\u0323\0\u036c\0\111"+
    "\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\111\0\u056b"+
    "\0\u05b4\0\u05fd\0\u0646\0\u068f\0\111\0\111\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\111\0\u0b68"+
    "\0\111\0\111\0\u068f\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\111\0\111\0\111\0\u0d67\0\u0db0\0\u0df9\0\u0e42"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\111\0\111"+
    "\0\u0e8b\0\u0ed4\0\u0f1d\0\111\0\u0f66\0\u0faf\0\111\0\u0ff8"+
    "\0\111\0\111\0\111\0\u1041\0\u108a\0\111\0\u10d3\0\u111c"+
    "\0\u1165\0\111\0\111\0\u11ae\0\111\0\111\0\111\0\u11f7"+
    "\0\111\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6"+
    "\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u01ff\0\u1762\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\111\0\111\0\111\0\u1d16\0\111\0\u1d5f\0\u1da8\0\111"+
    "\0\111\0\u1df1\0\111\0\111\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15"+
    "\0\u1f5e\0\u1fa7\0\u1ff0\0\111\0\111\0\111\0\111\0\111"+
    "\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238"+
    "\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480"+
    "\0\u24c9\0\u2512\0\u255b\0\u01ff\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u26c8\0\u01ff\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e"+
    "\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6"+
    "\0\u2b0f\0\u2b58\0\u01ff\0\u01ff\0\u2ba1\0\u2bea\0\u2c33\0\111"+
    "\0\u2c7c\0\u1d5f\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\111\0\u2de9"+
    "\0\u2e32\0\u2e7b\0\111\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u01ff"+
    "\0\u01ff\0\u2fe8\0\u01ff\0\u3031\0\u307a\0\u30c3\0\u310c\0\u01ff"+
    "\0\u01ff\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b"+
    "\0\u3354\0\u01ff\0\u339d\0\u01ff\0\u33e6\0\u342f\0\u3478\0\u34c1"+
    "\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u01ff"+
    "\0\u3709\0\u3752\0\u379b\0\u01ff\0\u01ff\0\u37e4\0\u382d\0\u3876"+
    "\0\u38bf\0\u2d57\0\111\0\u3908\0\u3951\0\u399a\0\u39e3\0\u01ff"+
    "\0\u01ff\0\u01ff\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u01ff\0\u3b50"+
    "\0\u01ff\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f"+
    "\0\u3d98\0\u3de1\0\u3e2a\0\u01ff\0\u3e73\0\u3ebc\0\u01ff\0\u3f05"+
    "\0\u3f4e\0\u3f97\0\u01ff\0\u3fe0\0\u4029\0\u01ff\0\u4072\0\u3908"+
    "\0\u40bb\0\u01ff\0\u4104\0\u414d\0\u4196\0\u01ff\0\u41df\0\u4228"+
    "\0\u4271\0\u01ff\0\u42ba\0\u4303\0\u01ff\0\u434c\0\u4395\0\u43de"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u4427\0\u01ff\0\u4470\0\u01ff\0\u44b9"+
    "\0\u4502\0\u454b\0\u4594\0\u01ff\0\u45dd\0\u01ff\0\u01ff\0\u01ff"+
    "\0\u4626\0\u466f\0\u46b8\0\u01ff\0\u01ff\0\u4701\0\u474a\0\u4793"+
    "\0\u47dc\0\u4825\0\u486e\0\u01ff\0\u01ff\0\u48b7\0\u4900\0\u4949"+
    "\0\u4992\0\u01ff\0\u49db\0\u4a24\0\u01ff\0\u4a6d\0\u4ab6\0\u4aff"+
    "\0\u01ff\0\u01ff\0\u4b48\0\u01ff\0\u4b91\0\u01ff\0\u01ff\0\u4bda"+
    "\0\u4c23\0\u4c6c\0\111\0\u01ff";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\12\10\1\35\1\2\1\36\1\37"+
    "\1\10\1\40\1\41\1\42\1\43\1\44\1\45\2\10"+
    "\1\46\1\10\1\47\1\10\1\50\1\10\1\51\1\52"+
    "\1\53\1\54\1\10\1\55\1\56\3\10\1\57\1\60"+
    "\1\61\1\62\1\10\145\0\1\63\56\0\1\3\31\0"+
    "\1\63\105\0\1\64\32\0\1\65\24\0\2\66\2\0"+
    "\1\66\1\67\1\66\1\0\40\66\1\70\40\66\4\0"+
    "\1\71\113\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\31\10\4\0\1\10\31\0\1\72\70\0\1\73\17\0"+
    "\1\74\57\0\2\75\2\0\6\75\1\76\35\75\1\77"+
    "\40\75\15\0\1\100\3\0\1\101\7\0\1\102\75\0"+
    "\1\103\12\0\1\104\77\0\1\105\10\0\1\106\1\107"+
    "\67\0\1\110\7\0\1\111\104\0\1\112\4\0\1\113"+
    "\6\0\1\114\100\0\1\115\1\0\3\25\10\0\1\116"+
    "\1\117\1\120\1\121\1\122\1\0\1\122\1\123\1\124"+
    "\4\0\1\125\1\0\1\116\1\0\1\117\1\120\1\121"+
    "\1\122\1\0\1\122\1\0\1\123\12\0\1\124\30\0"+
    "\1\115\1\0\3\25\11\0\1\117\1\120\1\121\1\122"+
    "\1\0\1\122\1\123\5\0\1\125\3\0\1\117\1\120"+
    "\1\121\1\122\1\0\1\122\1\0\1\123\50\0\1\126"+
    "\112\0\1\127\1\130\110\0\1\131\55\0\1\132\32\0"+
    "\1\133\1\134\77\0\1\135\4\0\1\136\2\0\1\137"+
    "\114\0\12\140\5\0\30\140\36\0\1\141\66\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\2\10\1\142\16\10"+
    "\1\143\7\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\16\10\1\144\1\10\1\145\6\10"+
    "\1\146\1\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\147\6\10\1\150\2\10"+
    "\1\151\2\10\1\152\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\5\10\1\153\10\10"+
    "\1\154\12\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\13\10\1\155\1\10\1\156\10\10"+
    "\1\157\2\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\160\7\10\1\161\1\10"+
    "\1\162\2\10\1\163\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\6\10\1\164\5\10"+
    "\1\165\1\166\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\16\10\1\167\12\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\1\10\1\170\3\10\1\171\15\10\1\172\5\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\1\10\1\173\16\10\1\174\2\10\1\175\5\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\5\10\1\176\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\10\10\1\177\11\10\1\200"+
    "\1\201\1\10\1\202\1\10\1\203\1\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\10\10"+
    "\1\204\7\10\1\205\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\1\10\1\206\14\10"+
    "\1\207\12\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\10\10\1\210\20\10\4\0\1\10"+
    "\31\0\1\211\53\0\1\212\34\0\1\213\147\0\1\214"+
    "\20\0\2\66\2\0\1\66\1\215\1\66\1\0\40\66"+
    "\1\70\40\66\5\0\1\216\103\0\1\66\3\217\105\66"+
    "\2\71\2\0\105\71\2\75\2\0\6\75\1\220\35\75"+
    "\1\77\40\75\12\0\1\221\76\0\1\75\3\222\105\75"+
    "\31\0\1\223\100\0\1\224\67\0\15\225\1\226\73\225"+
    "\2\113\2\0\105\113\23\0\3\227\106\0\2\230\102\0"+
    "\1\231\1\0\1\231\2\0\3\232\106\0\3\233\7\0"+
    "\5\233\12\0\6\233\52\0\3\25\25\0\1\125\66\0"+
    "\1\234\111\0\1\235\107\0\1\236\55\0\1\237\32\0"+
    "\1\240\1\241\56\0\2\140\2\0\7\140\2\0\74\140"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\21\10"+
    "\1\242\7\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\21\10\1\243\7\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\16\10"+
    "\1\244\12\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\5\10\1\245\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\246\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\21\10\1\247\1\250\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\1\10\1\251\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\1\10\1\252\27\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\15\10\1\253\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\6\10\1\254\22\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\23\10\1\255\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\21\10\1\256\7\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\23\10\1\257\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\22\10\1\260\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\13\10\1\261\15\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\15\10\1\262\13\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\16\10\1\263\12\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\264\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\17\10\1\265\11\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\21\10\1\266\1\267\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\15\10\1\270\13\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\271\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\25\10\1\272\3\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\13\10\1\273\15\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\3\10\1\274\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\11\10\1\275\4\10"+
    "\1\276\12\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\2\10\1\277\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\300\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\16\10\1\301\12\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\1\10"+
    "\1\302\16\10\1\303\10\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\17\10\1\304\11\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\11\10\1\305\17\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\15\10\1\306\13\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\11\10\1\307\6\10\1\310\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\1\10"+
    "\1\311\21\10\1\312\3\10\1\313\1\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\20\10"+
    "\1\314\10\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\11\10\1\315\1\10\1\316\15\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\11\10\1\317\17\10\4\0\1\10\7\320\1\0"+
    "\13\320\3\0\7\320\12\0\4\320\21\0\1\321\7\0"+
    "\4\320\1\0\5\322\1\323\1\322\1\0\40\322\1\324"+
    "\40\322\1\66\3\217\1\66\1\215\1\66\1\0\40\66"+
    "\1\70\40\66\1\75\3\222\6\75\1\220\35\75\1\77"+
    "\40\75\15\225\1\325\73\225\15\326\1\226\4\326\1\327"+
    "\66\326\23\0\3\227\11\0\1\117\1\120\1\121\1\117"+
    "\10\0\1\330\3\0\1\117\1\120\1\121\1\117\51\0"+
    "\2\230\15\0\1\122\1\0\1\122\1\123\5\0\1\331"+
    "\6\0\1\122\1\0\1\122\1\0\1\123\45\0\3\232"+
    "\106\0\3\232\11\0\1\117\1\0\1\121\1\117\10\0"+
    "\1\231\3\0\1\117\1\0\1\121\1\117\51\0\3\233"+
    "\7\0\5\233\1\122\1\0\1\122\1\123\5\0\1\332"+
    "\6\233\1\122\1\0\1\122\1\0\1\123\53\0\1\333"+
    "\66\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\334\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\5\10\1\335\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\13\10"+
    "\1\336\15\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\337\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\340\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\5\10\1\341\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\3\10"+
    "\1\342\25\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\20\10\1\343\10\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\21\10"+
    "\1\344\7\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\22\10\1\345\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\1\10"+
    "\1\346\27\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\2\10\1\347\26\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\350\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\14\10\1\351\14\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\352\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\21\10\1\353\7\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\1\10"+
    "\1\354\27\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\355\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\13\10"+
    "\1\356\2\10\1\357\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\360\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\5\10\1\361\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\7\10\1\362\21\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\11\10\1\363\17\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\13\10\1\364\15\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\12\10\1\365\16\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\24\10\1\366\4\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\22\10\1\367\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\13\10\1\370\15\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\23\10\1\371\5\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\20\10\1\372\10\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\22\10\1\373\6\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\11\10\1\374\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\5\10\1\375\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\376\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\3\10\1\377\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\21\10\1\u0100\7\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\16\10\1\u0101\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\11\10\1\u0102\3\10"+
    "\1\u0103\13\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\5\10\1\u0104\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\4\10"+
    "\1\u0105\24\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\u0106\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\13\10"+
    "\1\u0107\15\10\4\0\1\10\75\0\1\u0108\13\0\5\322"+
    "\1\u0109\1\322\1\0\40\322\1\0\151\322\15\225\1\u010a"+
    "\4\225\1\u010b\66\225\15\326\1\u010c\73\326\23\0\3\227"+
    "\25\0\1\330\60\0\2\230\26\0\1\331\60\0\3\233"+
    "\7\0\5\233\11\0\1\332\6\233\36\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\u010d\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\20\10\1\u010e\10\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\5\10\1\u010f\23\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\12\10\1\u0110\16\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\10\10\1\u0111\20\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\21\10\1\u0112\7\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\11\10\1\u0113\17\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\23\10\1\u0114\5\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\13\10\1\u0115\15\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\15\10\1\u0116\13\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\5\10\1\u0117\23\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\13\10\1\u0118\15\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\22\10\1\u0119\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\5\10\1\u011a\23\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\u011b\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\1\10\1\u011c\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\u011d\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\24\10\1\u011e\4\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\1\10\1\u011f\27\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\1\10\1\u0120\27\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\5\10\1\u0121\23\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\11\10\1\u0122\17\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\u0123\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\22\10\1\u0124\6\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\11\10\1\u0125\17\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\3\10\1\u0126\25\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\20\10\1\u0127\10\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\3\10\1\u0128\25\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\10\10\1\u0129\20\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\25\10\1\u012a\3\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\22\10\1\u012b\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\21\10\1\u012c\7\10\4\0\1\10\7\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\22\10\1\u012d\6\10\4\0"+
    "\1\10\7\0\1\10\13\0\3\10\7\0\12\10\4\0"+
    "\5\10\1\u012e\23\10\4\0\1\10\54\0\1\u012f\34\0"+
    "\5\322\1\221\1\322\1\0\40\322\1\0\40\322\15\326"+
    "\1\u0130\4\326\1\327\66\326\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\u0131\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\u0132\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\1\10\1\u0133\27\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\15\10"+
    "\1\u0134\13\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\13\10\1\u0135\15\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\u0136\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\4\10\1\u0137\24\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\13\10"+
    "\1\u0138\15\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\14\10\1\u0139\14\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\u013a\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\15\10\1\u013b\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\6\10"+
    "\1\u013c\22\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\5\10\1\u013d\23\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\7\10"+
    "\1\u013e\21\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\22\10\1\u013f\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\3\10"+
    "\1\u0140\25\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\3\10\1\u0141\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\15\10"+
    "\1\u0142\13\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\3\10\1\u0143\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\22\10"+
    "\1\u0144\6\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\10\10\1\u0145\20\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\20\10"+
    "\1\u0146\10\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\21\10\1\u0147\7\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\11\10"+
    "\1\u0148\17\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\11\10\1\u0149\17\10\4\0\1\10"+
    "\70\0\1\u014a\27\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\3\10\1\u014b\25\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\15\10\1\u014c\13\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\23\10\1\u014d\5\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\u014e\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\21\10\1\u014f\7\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\27\10\1\u0150\1\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\5\10\1\u0151\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\3\10\1\u0152\25\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\1\10\1\u0153\27\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\5\10\1\u0154\23\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\5\10\1\u0155\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\u0156\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\6\10\1\u0157\22\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\16\10\1\u0158\12\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\5\10\1\u0159\23\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\13\10\1\u015a\15\10"+
    "\4\0\1\10\56\0\1\u015b\41\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\22\10\1\u015c\6\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\u015d\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\15\10\1\u015e\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\u015f\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\3\10\1\u0160\25\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\u0161\23\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\17\10\1\u0162\11\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\15\10"+
    "\1\u0163\13\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\15\10\1\u0164\13\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\5\10"+
    "\1\u0165\23\10\4\0\1\10\60\0\1\u0166\37\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\22\10\1\u0167\6\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\16\10\1\u0168\12\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\5\10\1\u0169\23\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\4\10\1\u016a\24\10\4\0\1\10\7\0\1\10"+
    "\13\0\3\10\7\0\12\10\4\0\11\10\1\u016b\17\10"+
    "\4\0\1\10\7\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\22\10\1\u016c\6\10\4\0\1\10\71\0\1\u016d"+
    "\26\0\1\10\13\0\3\10\7\0\12\10\4\0\21\10"+
    "\1\u016e\7\10\4\0\1\10\7\0\1\10\13\0\3\10"+
    "\7\0\12\10\4\0\6\10\1\u016f\22\10\4\0\1\10"+
    "\7\0\1\10\13\0\3\10\7\0\12\10\4\0\30\10"+
    "\1\u0170\4\0\1\10\61\0\1\u0171\36\0\1\10\13\0"+
    "\3\10\7\0\12\10\4\0\5\10\1\u0172\23\10\4\0"+
    "\1\10\7\u0173\1\0\13\u0173\3\0\7\u0173\12\0\4\u0173"+
    "\31\0\4\u0173\10\0\1\10\13\0\3\10\7\0\12\10"+
    "\4\0\4\10\1\u0174\24\10\4\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19637];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\2\1\1\11\6\1\1\11"+
    "\5\1\2\11\20\1\1\11\1\1\2\11\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\3\11\2\1\1\0\1\1"+
    "\10\11\3\1\1\11\2\0\1\11\1\0\3\11\2\0"+
    "\1\11\1\0\2\1\2\11\1\0\3\11\1\1\1\11"+
    "\47\1\3\11\1\0\1\11\1\1\1\0\2\11\1\1"+
    "\2\11\4\1\1\0\2\1\5\11\1\0\56\1\1\11"+
    "\4\0\2\1\1\11\3\0\1\11\54\1\3\0\1\11"+
    "\43\1\2\0\31\1\1\0\20\1\1\0\12\1\1\0"+
    "\6\1\1\0\3\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public GroovyToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return GroovyToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return GroovyToken.BAD_CHARACTER;
            }
            // fall through
          case 133: break;
          case 2:
            { return GroovyToken.WHITESPACE;
            }
            // fall through
          case 134: break;
          case 3:
            { return GroovyToken.NOT;
            }
            // fall through
          case 135: break;
          case 4:
            { return GroovyToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 136: break;
          case 5:
            { return GroovyToken.IDENTIFIER;
            }
            // fall through
          case 137: break;
          case 6:
            { return GroovyToken.MOD;
            }
            // fall through
          case 138: break;
          case 7:
            { return GroovyToken.AND;
            }
            // fall through
          case 139: break;
          case 8:
            { return GroovyToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 140: break;
          case 9:
            { return GroovyToken.LPAREN;
            }
            // fall through
          case 141: break;
          case 10:
            { return GroovyToken.RPAREN;
            }
            // fall through
          case 142: break;
          case 11:
            { return GroovyToken.MULT;
            }
            // fall through
          case 143: break;
          case 12:
            { return GroovyToken.PLUS;
            }
            // fall through
          case 144: break;
          case 13:
            { return GroovyToken.COMMA;
            }
            // fall through
          case 145: break;
          case 14:
            { return GroovyToken.MINUS;
            }
            // fall through
          case 146: break;
          case 15:
            { return GroovyToken.DOT;
            }
            // fall through
          case 147: break;
          case 16:
            { return GroovyToken.DIV;
            }
            // fall through
          case 148: break;
          case 17:
            { return GroovyToken.INTEGER_LITERAL;
            }
            // fall through
          case 149: break;
          case 18:
            { return GroovyToken.COLON;
            }
            // fall through
          case 150: break;
          case 19:
            { return GroovyToken.SEMICOLON;
            }
            // fall through
          case 151: break;
          case 20:
            { return GroovyToken.LT;
            }
            // fall through
          case 152: break;
          case 21:
            { return GroovyToken.EQ;
            }
            // fall through
          case 153: break;
          case 22:
            { return GroovyToken.GT;
            }
            // fall through
          case 154: break;
          case 23:
            { return GroovyToken.QUEST;
            }
            // fall through
          case 155: break;
          case 24:
            { return GroovyToken.LBRACK;
            }
            // fall through
          case 156: break;
          case 25:
            { return GroovyToken.RBRACK;
            }
            // fall through
          case 157: break;
          case 26:
            { return GroovyToken.XOR;
            }
            // fall through
          case 158: break;
          case 27:
            { return GroovyToken.LBRACE;
            }
            // fall through
          case 159: break;
          case 28:
            { return GroovyToken.OR;
            }
            // fall through
          case 160: break;
          case 29:
            { return GroovyToken.RBRACE;
            }
            // fall through
          case 161: break;
          case 30:
            { return GroovyToken.TILDE;
            }
            // fall through
          case 162: break;
          case 31:
            { return GroovyToken.NOTEQ;
            }
            // fall through
          case 163: break;
          case 32:
            { return GroovyToken.SHEBANG_COMMENT;
            }
            // fall through
          case 164: break;
          case 33:
            { return GroovyToken.MODEQ;
            }
            // fall through
          case 165: break;
          case 34:
            { return GroovyToken.ANDAND;
            }
            // fall through
          case 166: break;
          case 35:
            { return GroovyToken.ANDEQ;
            }
            // fall through
          case 167: break;
          case 36:
            { return GroovyToken.POW;
            }
            // fall through
          case 168: break;
          case 37:
            { return GroovyToken.SPREAD_DOT;
            }
            // fall through
          case 169: break;
          case 38:
            { return GroovyToken.MULTEQ;
            }
            // fall through
          case 170: break;
          case 39:
            { return GroovyToken.PLUSPLUS;
            }
            // fall through
          case 171: break;
          case 40:
            { return GroovyToken.PLUSEQ;
            }
            // fall through
          case 172: break;
          case 41:
            { return GroovyToken.MINUSMINUS;
            }
            // fall through
          case 173: break;
          case 42:
            { return GroovyToken.MINUSEQ;
            }
            // fall through
          case 174: break;
          case 43:
            { return GroovyToken.ARROW;
            }
            // fall through
          case 175: break;
          case 44:
            { return GroovyToken.METHOD_CLOSURE;
            }
            // fall through
          case 176: break;
          case 45:
            { return GroovyToken.RANGE;
            }
            // fall through
          case 177: break;
          case 46:
            { return GroovyToken.BLOCK_COMMENT;
            }
            // fall through
          case 178: break;
          case 47:
            { return GroovyToken.LINE_COMMENT;
            }
            // fall through
          case 179: break;
          case 48:
            { return GroovyToken.DIVEQ;
            }
            // fall through
          case 180: break;
          case 49:
            { return GroovyToken.DOUBLE_LITERAL;
            }
            // fall through
          case 181: break;
          case 50:
            { return GroovyToken.FLOAT_LITERAL;
            }
            // fall through
          case 182: break;
          case 51:
            { return GroovyToken.LONG_LITERAL;
            }
            // fall through
          case 183: break;
          case 52:
            { return GroovyToken.DOUBLE_COLON;
            }
            // fall through
          case 184: break;
          case 53:
            { return GroovyToken.LTEQ;
            }
            // fall through
          case 185: break;
          case 54:
            { return GroovyToken.EQEQ;
            }
            // fall through
          case 186: break;
          case 55:
            { return GroovyToken.REGEX_FIND;
            }
            // fall through
          case 187: break;
          case 56:
            { return GroovyToken.GTEQ;
            }
            // fall through
          case 188: break;
          case 57:
            { return GroovyToken.SAFE_DOT;
            }
            // fall through
          case 189: break;
          case 58:
            { return GroovyToken.ELVIS;
            }
            // fall through
          case 190: break;
          case 59:
            { return GroovyToken.QUESTEQ;
            }
            // fall through
          case 191: break;
          case 60:
            { return GroovyToken.ANNOTATION;
            }
            // fall through
          case 192: break;
          case 61:
            { return GroovyToken.XOREQ;
            }
            // fall through
          case 193: break;
          case 62:
            { return GroovyToken.AS;
            }
            // fall through
          case 194: break;
          case 63:
            { return GroovyToken.DO;
            }
            // fall through
          case 195: break;
          case 64:
            { return GroovyToken.IF;
            }
            // fall through
          case 196: break;
          case 65:
            { return GroovyToken.IN;
            }
            // fall through
          case 197: break;
          case 66:
            { return GroovyToken.OREQ;
            }
            // fall through
          case 198: break;
          case 67:
            { return GroovyToken.OROR;
            }
            // fall through
          case 199: break;
          case 68:
            { return GroovyToken.NOTEQEQEQ;
            }
            // fall through
          case 200: break;
          case 69:
            { return GroovyToken.TRIPLE_QUOTED_STRING;
            }
            // fall through
          case 201: break;
          case 70:
            { return GroovyToken.POWEQ;
            }
            // fall through
          case 202: break;
          case 71:
            { return GroovyToken.ELLIPSIS;
            }
            // fall through
          case 203: break;
          case 72:
            { return GroovyToken.DOC_COMMENT;
            }
            // fall through
          case 204: break;
          case 73:
            { return GroovyToken.LTLTEQ;
            }
            // fall through
          case 205: break;
          case 74:
            { return GroovyToken.LTEQGT;
            }
            // fall through
          case 206: break;
          case 75:
            { return GroovyToken.EQEQEQ;
            }
            // fall through
          case 207: break;
          case 76:
            { return GroovyToken.REGEX_MATCH;
            }
            // fall through
          case 208: break;
          case 77:
            { return GroovyToken.GTGTEQ;
            }
            // fall through
          case 209: break;
          case 78:
            { return GroovyToken.DEF;
            }
            // fall through
          case 210: break;
          case 79:
            { return GroovyToken.FOR;
            }
            // fall through
          case 211: break;
          case 80:
            { return GroovyToken.INT;
            }
            // fall through
          case 212: break;
          case 81:
            { return GroovyToken.NEW;
            }
            // fall through
          case 213: break;
          case 82:
            { return GroovyToken.TRY;
            }
            // fall through
          case 214: break;
          case 83:
            { return GroovyToken.VAR;
            }
            // fall through
          case 215: break;
          case 84:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
            { return GroovyToken.NOT_IN;
            }
            // fall through
          case 216: break;
          case 85:
            { return GroovyToken.GTGTGTEQ;
            }
            // fall through
          case 217: break;
          case 86:
            { return GroovyToken.BYTE;
            }
            // fall through
          case 218: break;
          case 87:
            { return GroovyToken.CASE;
            }
            // fall through
          case 219: break;
          case 88:
            { return GroovyToken.CHAR;
            }
            // fall through
          case 220: break;
          case 89:
            { return GroovyToken.ELSE;
            }
            // fall through
          case 221: break;
          case 90:
            { return GroovyToken.ENUM;
            }
            // fall through
          case 222: break;
          case 91:
            { return GroovyToken.LONG;
            }
            // fall through
          case 223: break;
          case 92:
            { return GroovyToken.NULL;
            }
            // fall through
          case 224: break;
          case 93:
            { return GroovyToken.THIS;
            }
            // fall through
          case 225: break;
          case 94:
            { return GroovyToken.TRUE;
            }
            // fall through
          case 226: break;
          case 95:
            { return GroovyToken.VOID;
            }
            // fall through
          case 227: break;
          case 96:
            { return GroovyToken.BREAK;
            }
            // fall through
          case 228: break;
          case 97:
            { return GroovyToken.CATCH;
            }
            // fall through
          case 229: break;
          case 98:
            { return GroovyToken.CLASS;
            }
            // fall through
          case 230: break;
          case 99:
            { return GroovyToken.FALSE;
            }
            // fall through
          case 231: break;
          case 100:
            { return GroovyToken.FINAL;
            }
            // fall through
          case 232: break;
          case 101:
            { return GroovyToken.FLOAT;
            }
            // fall through
          case 233: break;
          case 102:
            { return GroovyToken.SHORT;
            }
            // fall through
          case 234: break;
          case 103:
            { return GroovyToken.SUPER;
            }
            // fall through
          case 235: break;
          case 104:
            { return GroovyToken.THROW;
            }
            // fall through
          case 236: break;
          case 105:
            { return GroovyToken.TRAIT;
            }
            // fall through
          case 237: break;
          case 106:
            { return GroovyToken.WHILE;
            }
            // fall through
          case 238: break;
          case 107:
            { return GroovyToken.ASSERT;
            }
            // fall through
          case 239: break;
          case 108:
            { return GroovyToken.DOUBLE;
            }
            // fall through
          case 240: break;
          case 109:
            { return GroovyToken.IMPORT;
            }
            // fall through
          case 241: break;
          case 110:
            { return GroovyToken.NATIVE;
            }
            // fall through
          case 242: break;
          case 111:
            { return GroovyToken.PUBLIC;
            }
            // fall through
          case 243: break;
          case 112:
            { return GroovyToken.RETURN;
            }
            // fall through
          case 244: break;
          case 113:
            { return GroovyToken.STATIC;
            }
            // fall through
          case 245: break;
          case 114:
            { return GroovyToken.SWITCH;
            }
            // fall through
          case 246: break;
          case 115:
            { return GroovyToken.THROWS;
            }
            // fall through
          case 247: break;
          case 116:
            { return GroovyToken.BOOLEAN;
            }
            // fall through
          case 248: break;
          case 117:
            { return GroovyToken.DEFAULT;
            }
            // fall through
          case 249: break;
          case 118:
            { return GroovyToken.EXTENDS;
            }
            // fall through
          case 250: break;
          case 119:
            { return GroovyToken.FINALLY;
            }
            // fall through
          case 251: break;
          case 120:
            { return GroovyToken.PACKAGE;
            }
            // fall through
          case 252: break;
          case 121:
            { return GroovyToken.PRIVATE;
            }
            // fall through
          case 253: break;
          case 122:
            { return GroovyToken.ABSTRACT;
            }
            // fall through
          case 254: break;
          case 123:
            { return GroovyToken.CONTINUE;
            }
            // fall through
          case 255: break;
          case 124:
            { return GroovyToken.STRICTFP;
            }
            // fall through
          case 256: break;
          case 125:
            { return GroovyToken.VOLATILE;
            }
            // fall through
          case 257: break;
          case 126:
            { return GroovyToken.INTERFACE;
            }
            // fall through
          case 258: break;
          case 127:
            { return GroovyToken.PROTECTED;
            }
            // fall through
          case 259: break;
          case 128:
            { return GroovyToken.TRANSIENT;
            }
            // fall through
          case 260: break;
          case 129:
            { return GroovyToken.IMPLEMENTS;
            }
            // fall through
          case 261: break;
          case 130:
            { return GroovyToken.INSTANCEOF;
            }
            // fall through
          case 262: break;
          case 131:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 11);
            { return GroovyToken.NOT_INSTANCEOF;
            }
            // fall through
          case 263: break;
          case 132:
            { return GroovyToken.SYNCHRONIZED;
            }
            // fall through
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
