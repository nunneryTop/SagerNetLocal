/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.lisp.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>lisp.flex</tt>
 */
public class LispLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\7\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\41\1\43\1\44"+
    "\1\45\5\12\1\46\3\12\1\47\7\12\1\50\2\12"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\12"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\12"+
    "\1\107\1\110\1\111\1\112\6\0\1\113\32\0\2\6"+
    "\4\12\4\6\1\12\2\6\1\0\7\6\1\12\4\6"+
    "\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12\4\6"+
    "\14\12\16\6\5\12\7\6\1\12\1\6\1\12\21\6"+
    "\160\0\5\12\1\6\2\12\2\6\4\12\10\6\1\12"+
    "\1\6\3\12\1\6\1\12\1\6\24\12\1\6\123\12"+
    "\1\6\213\12\1\6\5\0\2\6\236\12\11\6\46\12"+
    "\2\6\1\12\7\6\47\12\7\6\1\12\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\12\5\6\3\12\15\6\5\0\6\6\1\12"+
    "\4\6\13\0\5\6\53\12\37\0\4\6\2\12\1\0"+
    "\143\12\1\6\1\12\10\0\1\6\6\0\2\12\2\0"+
    "\1\6\4\0\2\12\12\0\3\12\2\6\1\12\17\6"+
    "\1\0\1\12\1\0\36\12\33\0\2\6\131\12\13\0"+
    "\1\12\16\6\12\0\41\12\11\0\2\12\4\6\1\12"+
    "\5\6\26\12\4\0\1\12\11\0\1\12\3\0\1\12"+
    "\5\0\22\6\31\12\3\0\104\6\1\12\1\6\13\12"+
    "\67\6\33\0\1\6\4\0\66\12\3\0\1\12\22\0"+
    "\1\12\7\0\12\12\2\0\2\6\12\0\1\6\7\12"+
    "\1\6\7\12\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\1\12\3\6\4\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\1\12\10\6\1\0\4\6\2\12\1\6\3\12\2\0"+
    "\2\6\12\0\4\12\7\6\1\12\5\6\3\0\1\6"+
    "\6\12\4\6\2\12\2\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\2\12\1\6\2\12\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\12\1\6\1\12\7\6\14\0\3\12\1\0\13\6"+
    "\3\0\1\6\11\12\1\6\3\12\1\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\12\17\6"+
    "\2\12\2\0\2\6\12\0\1\6\1\12\17\6\3\0"+
    "\1\6\10\12\2\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\5\12\2\6\1\0\1\12\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\2\0\4\6\2\12"+
    "\1\6\3\12\2\0\2\6\12\0\1\6\1\12\20\6"+
    "\1\0\1\12\1\6\6\12\3\6\3\12\1\6\4\12"+
    "\3\6\2\12\1\6\1\12\1\6\2\12\3\6\2\12"+
    "\3\6\3\12\3\6\14\12\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\12\6\6\1\0\16\6\12\0"+
    "\11\6\1\12\7\6\3\0\1\6\10\12\1\6\3\12"+
    "\1\6\27\12\1\6\12\12\1\6\5\12\3\6\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\1\6"+
    "\2\12\6\6\2\12\2\0\2\6\12\0\22\6\2\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\12\12"+
    "\1\6\5\12\2\6\1\0\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\12\1\6\2\12"+
    "\2\0\2\6\12\0\1\6\2\12\17\6\2\0\1\6"+
    "\10\12\1\6\3\12\1\6\51\12\2\6\1\12\7\0"+
    "\1\6\3\0\1\6\4\0\1\12\10\6\1\0\10\6"+
    "\2\12\2\0\2\6\12\0\12\6\6\12\2\6\2\0"+
    "\1\6\22\12\3\6\30\12\1\6\11\12\1\6\1\12"+
    "\2\6\7\12\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\22\6\2\0\15\6\60\12\1\0\2\12"+
    "\7\0\4\6\10\12\10\0\1\6\12\0\47\6\2\12"+
    "\1\6\1\12\2\6\2\12\1\6\1\12\2\6\1\12"+
    "\6\6\4\12\1\6\7\12\1\6\3\12\1\6\1\12"+
    "\1\6\1\12\2\6\2\12\1\6\4\12\1\0\2\12"+
    "\6\0\1\6\2\0\1\12\2\6\5\12\1\6\1\12"+
    "\1\6\6\0\2\6\12\0\2\6\4\12\40\6\1\12"+
    "\27\6\2\0\6\6\12\0\13\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\2\0\10\12\1\6\44\12\4\6"+
    "\24\0\1\6\2\0\5\12\13\0\1\6\44\0\11\6"+
    "\1\0\71\6\53\12\24\0\1\12\12\0\6\6\6\12"+
    "\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\17\0\2\6\46\12\1\6"+
    "\1\12\5\6\1\12\2\6\53\12\1\6\115\12\1\6"+
    "\4\12\2\6\7\12\1\6\1\12\1\6\4\12\2\6"+
    "\51\12\1\6\4\12\2\6\41\12\1\6\4\12\2\6"+
    "\7\12\1\6\1\12\1\6\4\12\2\6\17\12\1\6"+
    "\71\12\1\6\4\12\2\6\103\12\2\6\3\0\40\6"+
    "\20\12\20\6\125\12\14\6\u016c\12\2\6\21\12\1\6"+
    "\32\12\5\6\113\12\3\6\3\12\17\6\15\12\1\6"+
    "\4\12\3\0\13\6\22\12\3\0\13\6\22\12\2\0"+
    "\14\6\15\12\1\6\3\12\1\6\2\0\14\6\64\12"+
    "\40\0\3\6\1\12\3\6\2\12\1\0\2\6\12\0"+
    "\41\6\3\0\2\6\12\0\6\6\130\12\10\6\51\12"+
    "\1\0\1\12\5\6\106\12\12\6\35\12\3\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\12\2\6\5\12\13\6"+
    "\54\12\4\6\21\0\7\12\2\0\6\6\12\0\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\12\130\6\5\0\57\12"+
    "\21\0\7\12\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\12\15\0\2\12\12\0\54\12\16\0\14\6\44\12"+
    "\24\0\10\6\12\0\3\6\3\12\12\0\44\12\122\6"+
    "\3\0\1\6\25\0\4\12\1\0\4\12\3\0\2\12"+
    "\11\6\300\12\47\0\25\6\4\0\26\12\2\6\6\12"+
    "\2\6\46\12\2\6\6\12\2\6\10\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\37\12\2\6\65\12"+
    "\1\6\7\12\1\6\1\12\3\6\3\12\1\6\7\12"+
    "\3\6\4\12\2\6\6\12\4\6\15\12\5\6\3\12"+
    "\1\6\7\12\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\12\23\6\1\12\13\6\5\0\5\6\6\0\1\6"+
    "\1\12\15\6\1\12\20\6\15\12\3\6\33\12\25\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\12\4\6"+
    "\1\12\2\6\12\12\1\6\1\12\3\6\5\12\6\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\4\12\1\6"+
    "\13\12\2\6\4\12\5\6\5\12\4\6\1\12\21\6"+
    "\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12\6\6"+
    "\4\12\3\0\2\12\14\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\70\12\7\6\1\12\17\6\1\0\27\12"+
    "\11\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\40\0\57\6\1\12\325\6\3\12\31\6\11\12"+
    "\6\0\1\6\5\12\2\6\5\12\4\6\126\12\2\6"+
    "\2\0\2\6\3\12\1\6\132\12\1\6\4\12\5\6"+
    "\51\12\3\6\136\12\21\6\33\12\65\6\306\12\112\6"+
    "\315\12\63\6\215\12\103\6\56\12\2\6\15\12\3\6"+
    "\20\12\12\0\2\12\24\6\57\12\1\0\4\6\12\0"+
    "\1\6\31\12\7\6\1\0\120\12\2\0\45\6\11\12"+
    "\2\6\147\12\2\6\4\12\1\6\4\12\14\6\13\12"+
    "\115\6\12\12\1\0\3\12\1\0\4\12\1\0\27\12"+
    "\5\0\20\6\1\12\7\6\64\12\14\6\2\0\62\12"+
    "\21\0\13\6\12\0\6\6\22\0\6\12\3\6\1\12"+
    "\4\6\12\0\34\12\10\0\2\6\27\12\15\0\14\6"+
    "\35\12\3\6\4\0\57\12\16\0\16\6\1\12\12\0"+
    "\46\6\51\12\16\0\11\6\3\12\1\0\10\12\2\0"+
    "\2\6\12\0\6\6\27\12\3\6\1\12\1\0\4\6"+
    "\60\12\1\0\1\12\3\0\2\12\2\0\5\12\2\0"+
    "\1\12\1\0\1\12\30\6\3\12\2\6\13\12\5\0"+
    "\2\6\3\12\2\0\12\6\6\12\2\6\6\12\2\6"+
    "\6\12\11\6\7\12\1\6\7\12\221\6\43\12\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\12\14\6\27\12"+
    "\4\6\61\12\4\6\u0100\3\156\12\2\6\152\12\46\6"+
    "\7\12\14\6\5\12\5\6\1\12\1\0\12\12\1\6"+
    "\15\12\1\6\5\12\1\6\1\12\1\6\2\12\1\6"+
    "\2\12\1\6\154\12\41\6\153\12\22\6\100\12\2\6"+
    "\66\12\50\6\15\12\3\6\20\0\20\6\7\0\14\6"+
    "\2\12\30\6\3\12\31\6\1\12\6\6\5\12\1\6"+
    "\207\12\2\6\1\0\4\6\1\12\13\6\12\0\7\6"+
    "\32\12\4\6\1\12\1\6\32\12\13\6\131\12\3\6"+
    "\6\12\2\6\6\12\2\6\6\12\2\6\3\12\3\6"+
    "\2\12\3\6\2\12\22\6\3\0\4\6\14\12\1\6"+
    "\32\12\1\6\23\12\1\6\2\12\1\6\17\12\2\6"+
    "\16\12\42\6\173\12\105\6\65\12\210\6\1\0\202\6"+
    "\35\12\3\6\61\12\57\6\37\12\21\6\33\12\65\6"+
    "\36\12\2\6\44\12\4\6\10\12\1\6\5\12\52\6"+
    "\236\12\2\6\12\0\126\6\6\12\2\6\1\12\1\6"+
    "\54\12\1\6\2\12\3\6\1\12\2\6\27\12\252\6"+
    "\26\12\12\6\32\12\106\6\70\12\6\6\2\12\100\6"+
    "\1\12\3\0\1\6\2\0\5\6\4\0\4\12\1\6"+
    "\3\12\1\6\33\12\4\6\3\0\4\6\1\0\40\6"+
    "\35\12\203\6\66\12\12\6\26\12\12\6\23\12\215\6"+
    "\111\12\267\6\3\0\65\12\17\0\37\6\12\0\20\6"+
    "\3\0\55\12\13\0\2\6\1\0\22\6\31\12\7\6"+
    "\12\0\6\6\3\0\44\12\16\0\1\6\12\0\100\6"+
    "\3\0\60\12\16\0\4\12\13\6\12\0\246\6\53\12"+
    "\15\0\10\6\12\0\66\6\157\12\221\6\143\12\235\6"+
    "\57\12\321\6\71\12\307\6\105\12\13\6\1\12\56\0"+
    "\20\6\4\0\15\12\140\6\2\12\u0163\6\5\0\3\6"+
    "\26\0\2\6\7\0\36\6\4\0\224\6\3\0\273\6"+
    "\125\12\1\6\107\12\1\6\2\12\2\6\1\12\2\6"+
    "\2\12\2\6\4\12\1\6\14\12\1\6\1\12\1\6"+
    "\7\12\1\6\101\12\1\6\4\12\2\6\10\12\1\6"+
    "\7\12\1\6\34\12\1\6\4\12\1\6\5\12\1\6"+
    "\1\12\3\6\7\12\1\6\u0154\12\2\6\31\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\10\12\2\6\62\0\4\12\1\6\33\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\12\12"+
    "\1\6\4\12\1\6\1\12\1\6\1\12\6\6\1\12"+
    "\4\6\1\12\1\6\1\12\1\6\1\12\1\6\3\12"+
    "\1\6\2\12\1\6\1\12\2\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\1\12\1\6\2\12"+
    "\1\6\1\12\2\6\4\12\1\6\7\12\1\6\4\12"+
    "\1\6\4\12\1\6\1\12\1\6\12\12\1\6\21\12"+
    "\5\6\3\12\1\6\5\12\1\6\21\12\104\6\327\12"+
    "\51\6\65\12\13\6\336\12\343\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\21\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\4\2\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\21\2\52\1\54\1\55\1\21\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\12\5\1\64\7\5\1\65\23\5"+
    "\1\66\1\67\2\4\1\0\1\52\1\0\1\21\1\70"+
    "\1\71\1\72\14\5\1\73\1\0\12\5\1\0\2\5"+
    "\1\74\14\5\1\75\7\5\1\76\1\0\1\77\4\5"+
    "\1\100\3\5\1\101\13\5\3\0\7\5\1\102\2\5"+
    "\1\0\2\5\1\103\1\5\1\104\2\5\1\105\1\5"+
    "\1\106\10\5\1\107\3\5\1\110\1\5\1\111\1\5"+
    "\1\112\1\113\1\114\1\115\15\5\1\116\1\5\3\0"+
    "\2\5\1\117\1\120\1\5\1\0\1\121\2\5\1\0"+
    "\6\5\1\122\1\123\1\124\1\125\1\126\7\5\1\127"+
    "\3\5\1\0\1\130\1\131\16\5\1\132\3\0\1\133"+
    "\2\5\1\0\2\5\1\0\1\134\1\135\7\5\1\136"+
    "\1\137\3\5\1\140\1\5\7\0\1\5\1\141\1\142"+
    "\3\5\1\0\4\5\1\143\1\5\1\144\3\0\1\145"+
    "\1\5\1\0\1\5\2\0\1\146\3\5\1\147\1\150"+
    "\1\5\2\0\1\151\1\5\13\0\1\5\1\152\2\5"+
    "\3\0\1\153\4\5\3\0\1\5\4\0\1\154\1\5"+
    "\1\155\3\0\1\156\14\0\1\157\2\5\5\0\1\160"+
    "\2\5\1\161\3\0\1\162\1\163\26\0\1\5\1\164"+
    "\6\0\1\165\1\5\2\0\1\166\3\0\1\167\20\0"+
    "\1\170\1\0\1\171\6\0\1\5\11\0\1\172\23\0"+
    "\1\173\2\0\1\174\1\175\2\0\1\176\1\177\1\200"+
    "\25\0\1\201\24\0\1\202\3\0\1\203\1\204\4\0"+
    "\1\205\15\0\1\206\12\0\1\207\12\0\1\210\44\0"+
    "\1\211\1\0\1\212\1\213\1\214\6\0\1\215\3\0"+
    "\1\216\7\0\1\217\1\0\1\220\3\0\1\221\1\222"+
    "\4\0\1\223\2\0\1\224\1\0\1\225\1\0\1\226"+
    "\1\227";

  private static int [] zzUnpackAction() {
    int [] result = new int[718];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\114\0\114\0\114\0\u02ac\0\u02f8\0\114"+
    "\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\114\0\u04c0\0\u050c"+
    "\0\u0558\0\u05a4\0\114\0\114\0\114\0\114\0\u05f0\0\114"+
    "\0\u063c\0\u0688\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850"+
    "\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0"+
    "\0\u0afc\0\114\0\u0b48\0\114\0\114\0\114\0\114\0\u0b94"+
    "\0\u0be0\0\114\0\114\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\u0c2c\0\114\0\u0c78\0\114\0\u0cc4\0\114\0\114"+
    "\0\u0d10\0\u0d5c\0\114\0\114\0\114\0\u0da8\0\114\0\u0df4"+
    "\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u1008\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u01c8\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8"+
    "\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728"+
    "\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4\0\114\0\114\0\u18f0"+
    "\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\114\0\114\0\u1ab8"+
    "\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80\0\u1ccc\0\u1d18"+
    "\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\114\0\u1e94\0\u1ee0\0\u1f2c"+
    "\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c"+
    "\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec"+
    "\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c"+
    "\0\u01c8\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860"+
    "\0\114\0\u28ac\0\114\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u01c8"+
    "\0\u2a28\0\u2a74\0\u2ac0\0\u01c8\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0"+
    "\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50"+
    "\0\u2e9c\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u30b0"+
    "\0\u30fc\0\u01c8\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278\0\114"+
    "\0\u32c4\0\u01c8\0\u3310\0\u335c\0\u01c8\0\u33a8\0\u33f4\0\u3440"+
    "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u01c8"+
    "\0\u36a0\0\u36ec\0\u3738\0\u01c8\0\u3784\0\u01c8\0\u37d0\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u01c8\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c"+
    "\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac"+
    "\0\u01c8\0\u3bf8\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u01c8"+
    "\0\u01c8\0\u3dc0\0\u3e0c\0\u01c8\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c"+
    "\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\114\0\u01c8\0\u01c8"+
    "\0\u01c8\0\u01c8\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280"+
    "\0\u42cc\0\u01c8\0\u4318\0\u4364\0\u43b0\0\u43fc\0\u01c8\0\u01c8"+
    "\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c"+
    "\0\u46a8\0\u46f4\0\u4740\0\u478c\0\u47d8\0\u4824\0\u01c8\0\u4870"+
    "\0\u48bc\0\u4908\0\u01c8\0\u4954\0\u49a0\0\u49ec\0\u4a38\0\u4a84"+
    "\0\u4ad0\0\u01c8\0\u01c8\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c"+
    "\0\u4c98\0\u4ce4\0\u4d30\0\u01c8\0\u4d7c\0\u4dc8\0\u4e14\0\u01c8"+
    "\0\u4e60\0\u4eac\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u5074"+
    "\0\u50c0\0\u01c8\0\u01c8\0\u510c\0\u5158\0\u51a4\0\u51f0\0\u523c"+
    "\0\u5288\0\u52d4\0\u5320\0\u01c8\0\u536c\0\u01c8\0\u53b8\0\u5404"+
    "\0\u5450\0\u01c8\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u01c8"+
    "\0\u5618\0\u5664\0\u56b0\0\u01c8\0\u01c8\0\u56fc\0\u5748\0\u5794"+
    "\0\u01c8\0\u57e0\0\u582c\0\u5878\0\u58c4\0\u5910\0\u595c\0\u59a8"+
    "\0\u59f4\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24\0\u5b70\0\u01c8\0\u5bbc"+
    "\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u01c8\0\u5d38\0\u5d84\0\u5dd0"+
    "\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c\0\u5f98\0\u5fe4\0\u6030"+
    "\0\u607c\0\u01c8\0\u60c8\0\u01c8\0\u6114\0\u6160\0\u61ac\0\u01c8"+
    "\0\u61f8\0\u6244\0\u6290\0\u62dc\0\u6328\0\u6374\0\u63c0\0\u640c"+
    "\0\u6458\0\u64a4\0\u64f0\0\u653c\0\u01c8\0\u6588\0\u65d4\0\u6620"+
    "\0\u666c\0\u66b8\0\u6704\0\u6750\0\u01c8\0\u679c\0\u67e8\0\u01c8"+
    "\0\u6834\0\u6880\0\u68cc\0\u01c8\0\114\0\u6918\0\u6964\0\u69b0"+
    "\0\u69fc\0\u6a48\0\u6a94\0\u6ae0\0\u6b2c\0\u6b78\0\u6bc4\0\u6c10"+
    "\0\u6c5c\0\u6ca8\0\u6cf4\0\u6d40\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70"+
    "\0\u6ebc\0\u6f08\0\u6f54\0\u6fa0\0\u01c8\0\u6fec\0\u7038\0\u7084"+
    "\0\u70d0\0\u711c\0\u7168\0\u01c8\0\u71b4\0\u7200\0\u724c\0\114"+
    "\0\u7298\0\u72e4\0\u7330\0\114\0\u737c\0\u73c8\0\u7414\0\u7460"+
    "\0\u74ac\0\u74f8\0\u7544\0\u7590\0\u75dc\0\u7628\0\u7674\0\u76c0"+
    "\0\u770c\0\u7758\0\u77a4\0\u77f0\0\114\0\u783c\0\u01c8\0\u7888"+
    "\0\u78d4\0\u7920\0\u796c\0\u79b8\0\u7a04\0\u7a50\0\u7a9c\0\u7ae8"+
    "\0\u7b34\0\u7b80\0\u7bcc\0\u7c18\0\u7c64\0\u7cb0\0\u7cfc\0\114"+
    "\0\u7d48\0\u7d94\0\u7de0\0\u7e2c\0\u7e78\0\u7ec4\0\u7f10\0\u7f5c"+
    "\0\u7fa8\0\u7ff4\0\u8040\0\u808c\0\u80d8\0\u8124\0\u8170\0\u81bc"+
    "\0\u8208\0\u8254\0\u82a0\0\u01c8\0\u82ec\0\u8338\0\114\0\114"+
    "\0\u8384\0\u83d0\0\114\0\114\0\114\0\u841c\0\u8468\0\u84b4"+
    "\0\u8500\0\u854c\0\u8598\0\u85e4\0\u8630\0\u867c\0\u86c8\0\u8714"+
    "\0\u8760\0\u87ac\0\u87f8\0\u8844\0\u8890\0\u88dc\0\u8928\0\u8974"+
    "\0\u89c0\0\u8a0c\0\114\0\u8a58\0\u8aa4\0\u8af0\0\u8b3c\0\u8b88"+
    "\0\u8bd4\0\u8c20\0\u8c6c\0\u8cb8\0\u8d04\0\u8d50\0\u8d9c\0\u8de8"+
    "\0\u8e34\0\u8e80\0\u8ecc\0\u8f18\0\u8f64\0\u8fb0\0\u8ffc\0\114"+
    "\0\u9048\0\u9094\0\u90e0\0\114\0\114\0\u912c\0\u9178\0\u91c4"+
    "\0\u9210\0\114\0\u925c\0\u92a8\0\u92f4\0\u9340\0\u938c\0\u93d8"+
    "\0\u9424\0\u9470\0\u94bc\0\u9508\0\u9554\0\u95a0\0\u95ec\0\114"+
    "\0\u9638\0\u9684\0\u96d0\0\u971c\0\u9768\0\u97b4\0\u9800\0\u984c"+
    "\0\u9898\0\u98e4\0\114\0\u9930\0\u997c\0\u99c8\0\u9a14\0\u9a60"+
    "\0\u9aac\0\u9af8\0\u9b44\0\u9b90\0\u9bdc\0\114\0\u9c28\0\u9c74"+
    "\0\u9cc0\0\u9d0c\0\u9d58\0\u9da4\0\u9df0\0\u9e3c\0\u9e88\0\u9ed4"+
    "\0\u9f20\0\u9f6c\0\u9fb8\0\ua004\0\ua050\0\ua09c\0\ua0e8\0\ua134"+
    "\0\ua180\0\ua1cc\0\ua218\0\ua264\0\ua2b0\0\ua2fc\0\ua348\0\ua394"+
    "\0\ua3e0\0\ua42c\0\ua478\0\ua4c4\0\ua510\0\ua55c\0\ua5a8\0\ua5f4"+
    "\0\ua640\0\ua68c\0\114\0\ua6d8\0\114\0\114\0\114\0\ua724"+
    "\0\ua770\0\ua7bc\0\ua808\0\ua854\0\ua8a0\0\114\0\ua8ec\0\ua938"+
    "\0\ua984\0\114\0\ua9d0\0\uaa1c\0\uaa68\0\uaab4\0\uab00\0\uab4c"+
    "\0\uab98\0\114\0\uabe4\0\114\0\uac30\0\uac7c\0\uacc8\0\114"+
    "\0\114\0\uad14\0\uad60\0\uadac\0\uadf8\0\114\0\uae44\0\uae90"+
    "\0\114\0\uaedc\0\114\0\uaf28\0\114\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[718];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\3\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\10\10\1\35"+
    "\1\2\1\36\1\37\1\10\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\10\1\47\1\50\1\10\1\51"+
    "\1\52\1\53\1\10\1\54\1\10\1\55\1\56\1\57"+
    "\1\60\1\10\1\61\2\10\1\62\1\63\1\64\1\65"+
    "\1\2\116\0\1\3\146\0\1\66\56\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\67\41\6\1\70\41\6\110\0"+
    "\1\71\3\0\1\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\30\10\4\0\1\10\35\0"+
    "\1\72\72\0\1\73\20\0\1\74\113\0\1\75\77\0"+
    "\1\76\13\0\1\77\101\0\1\100\11\0\1\101\104\0"+
    "\4\102\117\0\1\103\102\0\1\102\1\0\4\25\10\0"+
    "\1\104\1\105\1\106\1\107\1\110\1\0\1\111\4\0"+
    "\1\25\2\0\1\104\1\0\1\105\1\106\1\107\4\0"+
    "\1\110\13\0\1\111\32\0\1\102\1\0\4\25\11\0"+
    "\1\105\1\106\1\107\1\110\6\0\1\25\4\0\1\105"+
    "\1\106\1\107\4\0\1\110\22\0\2\27\4\0\105\27"+
    "\35\0\1\112\1\113\113\0\1\114\113\0\1\115\1\116"+
    "\112\0\1\117\56\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\10\1\120\17\10"+
    "\1\121\6\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\12\10\1\122\5\10"+
    "\1\123\7\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\124\1\10\1\125"+
    "\1\10\1\126\10\10\1\127\4\10\1\130\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\131\10\10\1\132\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\2\10\1\133\15\10\1\134\1\10\1\135"+
    "\1\10\1\136\3\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\1\137\11\10"+
    "\1\140\15\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\141\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\5\10\1\142\1\143\5\10\1\144\13\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\1\145\3\10\1\146\10\10\1\147"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\150\22\10\1\151\4\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\23\10\1\152\4\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\20\10\1\153\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\4\10"+
    "\1\154\23\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\10\10\1\155\16\10"+
    "\1\156\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\157\6\10\1\160\10\10"+
    "\1\161\6\10\1\162\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\14\10\1\163"+
    "\13\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\7\10\1\164\1\165\17\10"+
    "\4\0\1\10\35\0\1\166\52\0\1\167\3\0\1\6"+
    "\1\170\2\6\1\170\1\171\106\6\110\71\1\172\3\71"+
    "\26\0\4\102\11\0\1\105\1\106\1\107\7\0\1\102"+
    "\4\0\1\105\1\106\1\107\55\0\4\104\14\0\1\110"+
    "\6\0\1\104\13\0\1\110\43\0\1\173\1\0\1\173"+
    "\2\0\4\173\11\0\1\105\1\0\1\107\7\0\1\173"+
    "\4\0\1\105\1\0\1\107\53\0\1\174\1\0\4\175"+
    "\7\0\5\175\1\110\6\0\1\175\1\0\6\175\4\0"+
    "\1\110\57\0\1\176\113\0\1\177\1\200\55\0\1\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\15\10\1\201\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\21\10"+
    "\1\202\6\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\15\10\1\203\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\4\10\1\204\23\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\21\10\1\205\1\206\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\1\207\27\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\20\10\1\210\7\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\14\10\1\211\13\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\27\10\1\212\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\2\10\1\213"+
    "\2\10\1\214\22\10\4\0\2\10\11\0\1\10\5\0"+
    "\1\215\2\0\1\216\2\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\12\10\1\217\7\10\1\220\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\1\221\27\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\20\10"+
    "\1\222\7\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\27\10\1\223\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\1\224\27\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\12\10"+
    "\1\225\15\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\226\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\14\10\1\227\13\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\14\10\1\230\13\10\4\0\2\10\11\0\1\10"+
    "\10\0\1\231\2\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\30\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\10\1\232\11\10"+
    "\1\233\14\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\22\10\1\234\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\2\10\1\235\12\10\1\236\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\2\10\1\237\25\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\12\10\1\240\15\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\12\10"+
    "\1\241\15\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\15\10\1\242\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\17\10\1\243\1\10\1\244\1\245"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\6\10\1\246\21\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\13\10\1\247\14\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\6\10\1\250\21\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\251"+
    "\13\10\1\252\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\23\10\1\253"+
    "\4\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\16\10\1\254\11\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\12\10\1\255\12\10\1\256\2\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\257\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\22\10\1\260\5\10\4\0\1\10\1\6\1\170\2\6"+
    "\1\170\1\171\2\6\1\67\41\6\1\70\46\6\1\0"+
    "\2\6\1\67\41\6\1\70\41\6\11\71\1\261\76\71"+
    "\1\172\3\71\26\0\4\173\11\0\1\105\1\0\1\107"+
    "\7\0\1\173\4\0\1\105\1\0\1\107\55\0\4\262"+
    "\7\0\5\262\7\0\1\262\1\0\6\262\53\0\1\262"+
    "\1\0\4\175\7\0\5\175\1\110\1\106\5\0\1\175"+
    "\1\0\6\175\4\0\1\110\3\0\1\106\53\0\1\263"+
    "\56\0\1\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\20\10\1\264\7\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\4\10\1\265\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\2\10"+
    "\1\266\25\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\267\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\270\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\2\10\1\271\25\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\21\10\1\272"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\20\10\1\273\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\3\10\1\274\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\16\10\1\275\11\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\12\10\1\276"+
    "\15\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\2\10\1\277\3\10\1\300"+
    "\1\10\1\301\2\10\1\302\2\10\1\303\2\10\1\304"+
    "\1\305\1\306\1\307\3\10\4\0\1\10\57\0\1\310"+
    "\3\0\1\311\14\0\1\312\13\0\1\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\10\10"+
    "\1\313\17\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\10\10\1\314\17\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\21\10\1\315\6\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\15\10\1\316\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\16\10"+
    "\1\317\11\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\12\10\1\320\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\21\10\1\321\6\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\22\10\1\322\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\3\10"+
    "\1\323\24\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\15\10\1\324\12\10"+
    "\4\0\1\10\75\0\1\325\16\0\1\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\4\10"+
    "\1\326\23\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\10\1\327\26\10"+
    "\4\0\2\10\11\0\1\10\5\0\1\330\5\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\30\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\1\331\27\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\16\10\1\332"+
    "\11\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\20\10\1\333\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\22\10\1\334\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\12\10\1\335\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\2\10\1\336"+
    "\3\10\1\337\15\10\1\340\3\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\23\10\1\341\4\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\22\10\1\342"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\23\10\1\343\4\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\14\10\1\344\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\1\10\1\345\26\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\1\10\1\346"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\15\10\1\347\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\350\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\4\10\1\351\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\352"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\10\10\1\353\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\14\10\1\354\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\7\10\1\355\20\10\4\0\1\10\26\0\4\262\7\0"+
    "\5\262\1\0\1\106\5\0\1\262\1\0\6\262\10\0"+
    "\1\106\16\0\1\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\22\10\1\356\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\20\10\1\357\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\11\10\1\360\16\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\11\10\1\361"+
    "\16\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\7\10\1\362\20\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\363\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\15\10\1\364\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\365"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\366\27\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\12\10\1\367\2\10\1\370\12\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\4\10\1\371\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\14\10"+
    "\1\372\13\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\1\373\3\10\1\374"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\375\27\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\4\10\1\376\15\10\1\377\5\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\27\10\1\u0100\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\14\10\1\u0101"+
    "\13\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\u0102\27\10\4\0\1\10"+
    "\71\0\1\u0103\127\0\1\u0104\114\0\1\u0105\5\0\1\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\21\10\1\u0106\6\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\13\10"+
    "\1\u0107\14\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u0108\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\20\10\1\u0109\7\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\4\10\1\u010a\23\10\4\0\2\10\11\0\1\10"+
    "\10\0\1\u010b\2\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\30\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u010c\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\12\10\1\u010d\15\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\20\10\1\u010e\7\10\4\0\1\10\57\0\1\u010f"+
    "\34\0\1\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\12\10\1\u0110\15\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\3\10\1\u0111\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\12\10"+
    "\1\u0112\15\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\15\10\1\u0113\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\10\10\1\u0114\17\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\12\10\1\u0115\15\10\4\0\2\10\11\0\1\10"+
    "\5\0\1\u0116\5\0\1\10\1\u0117\1\u0118\1\10\7\0"+
    "\10\10\4\0\1\10\1\0\14\10\1\u0119\7\10\1\u011a"+
    "\3\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\10\10\1\u011b\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\10\10\1\u011c\17\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\1\u011d\27\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\20\10\1\u011e\7\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\1\u011f\27\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\15\10\1\u0120\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\15\10\1\u0121"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\25\10\1\u0122\2\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\2\10\1\u0123\25\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\21\10\1\u0124\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\14\10\1\u0125"+
    "\13\10\4\0\2\10\11\0\1\10\10\0\1\u0126\2\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\30\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\22\10\1\u0127\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\20\10\1\u0128\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\2\10\1\u0129"+
    "\25\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\10\10\1\u012a\7\10\1\u012b"+
    "\7\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\1\u012c\27\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\14\10\1\u012d\13\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\14\10"+
    "\1\u012e\13\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u012f\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\2\10\1\u0130\25\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\22\10\1\u0131\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\2\10"+
    "\1\u0132\15\10\1\u0133\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\22\10"+
    "\1\u0134\5\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\20\10\1\u0135\7\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\16\10\1\u0136\11\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\20\10\1\u0137\7\10\4\0\1\10\71\0\1\u0138"+
    "\123\0\1\u0139\104\0\1\u013a\21\0\1\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\22\10"+
    "\1\u013b\5\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u013c\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\2\10\1\u013d\25\10\4\0\1\10"+
    "\104\0\1\u013e\7\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u013f\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\4\10\1\u0140\23\10\4\0\1\10"+
    "\61\0\1\u0141\32\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\21\10\1\u0142\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\1\u0143\27\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\12\10\1\u0144\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\12\10\1\u0145"+
    "\15\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\16\10\1\u0146\11\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\1\u0147\27\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\3\10"+
    "\1\u0148\24\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\20\10\1\u0149\7\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\20\10\1\u014a\7\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\14\10\1\u014b\13\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\12\10"+
    "\1\u014c\15\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\12\10\1\u014d\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\3\10\1\u014e\24\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\1\u014f\27\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\21\10\1\u0150"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\3\10\1\u0151\24\10\4\0"+
    "\1\10\57\0\1\u0152\1\0\1\u0153\4\0\1\u0154\1\u0155"+
    "\4\0\1\u0156\1\u0157\2\0\1\u0158\13\0\1\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\1\u0159\27\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\13\10\1\u015a\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\4\10\1\u015b\23\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\21\10\1\u015c\6\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\21\10"+
    "\1\u015d\6\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u015e\23\10"+
    "\4\0\2\10\11\0\1\10\10\0\1\u015f\2\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\30\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\20\10\1\u0160\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\7\10"+
    "\1\u0161\20\10\4\0\2\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\11\10\1\u0162\16\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\1\u0163\27\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\5\10\1\u0164\22\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\23\10\1\u0165"+
    "\4\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\4\10\1\u0166\23\10\4\0"+
    "\1\10\23\0\1\u0167\153\0\1\u0168\110\0\1\u0169\33\0"+
    "\1\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\21\10\1\u016a\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\1\u016b\27\10\4\0\1\10\66\0\1\u016c\25\0\1\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\20\10\1\u016d\7\10\4\0\2\10\11\0\1\10"+
    "\10\0\1\u016e\2\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\30\10\4\0\1\10\70\0\1\u016f\23\0\1\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\27\10\1\u0170\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\u0171"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\12\10\1\u0172\15\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\10\10\1\u0173\17\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\4\10\1\u0174\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\u0175"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\22\10\1\u0176\5\10\4\0"+
    "\2\10\11\0\1\10\10\0\1\u0177\2\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\30\10\4\0\2\10\11\0"+
    "\1\10\10\0\1\u0178\2\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\30\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\27\10\1\u0179"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\21\10\1\u017a\6\10\4\0\2\10"+
    "\11\0\1\10\10\0\1\u017b\2\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\61\0\1\u017c"+
    "\126\0\1\u017d\76\0\1\u017e\127\0\1\u017f\115\0\1\u0180"+
    "\4\0\1\u0181\70\0\1\u0182\123\0\1\u0183\1\0\1\u0184"+
    "\7\0\1\u0185\12\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\21\10\1\u0186\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\21\10\1\u0187\6\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\22\10\1\u0188\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\4\10\7\0\10\10\4\0\1\10\1\0\20\10"+
    "\1\u0189\7\10\4\0\1\10\61\0\1\u018a\10\0\1\u018b"+
    "\5\0\1\u018c\13\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\15\10\1\u018d\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\15\10\1\u018e\12\10\4\0\2\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\1\u018f\27\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\13\10\1\u0190"+
    "\14\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\2\10\1\u0191\25\10\4\0"+
    "\1\10\100\0\1\u0192\112\0\1\u0193\110\0\1\u0194\17\0"+
    "\1\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\21\10\1\u0195\6\10\4\0\1\10\63\0"+
    "\1\u0196\30\0\1\10\11\0\1\10\10\0\1\u0197\2\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\30\10\4\0"+
    "\1\10\63\0\1\u0198\107\0\1\u0199\34\0\1\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\22\10\1\u019a\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\u019b"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\13\10\1\u019c\14\10\4\0"+
    "\2\10\11\0\1\10\10\0\1\u019d\2\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\30\10\4\0\1\10\64\0"+
    "\1\u019e\121\0\1\u019f\21\0\1\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\u01a0"+
    "\23\10\4\0\1\10\75\0\1\u01a1\77\0\1\u01a2\124\0"+
    "\1\u01a3\1\u01a4\120\0\1\u01a5\110\0\1\u01a6\101\0\1\u01a7"+
    "\131\0\1\u01a8\73\0\1\u01a9\124\0\1\u01aa\115\0\1\u01ab"+
    "\76\0\1\u01ac\34\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u01ad\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\1\u01ae\27\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\10\10\1\u01af\17\10\4\0\1\10\74\0\1\u01b0\102\0"+
    "\1\u01b1\10\0\1\u01b2\102\0\1\u01b3\22\0\1\u01b4\5\0"+
    "\1\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\3\10\1\u01b5\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\4\10\7\0\10\10\4\0\1\10\1\0"+
    "\6\10\1\u01b6\21\10\4\0\2\10\11\0\1\10\13\0"+
    "\4\10\7\0\10\10\4\0\1\10\1\0\4\10\1\u01b7"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\22\10\1\u01b8\5\10\4\0"+
    "\1\10\106\0\1\u01b9\100\0\1\u01ba\111\0\1\u01bb\22\0"+
    "\1\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\4\10\1\u01bc\23\10\4\0\1\10\73\0"+
    "\1\u01bd\100\0\1\u01be\1\u01bf\131\0\1\u01c0\101\0\1\u01c1"+
    "\26\0\1\10\11\0\1\10\10\0\1\u01c2\2\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\30\10\4\0\1\10"+
    "\60\0\1\u01c3\1\u01c4\11\0\1\u01c5\117\0\1\u01c6\73\0"+
    "\1\u01c7\133\0\1\u01c8\77\0\1\u01c9\125\0\1\u01ca\100\0"+
    "\1\u01cb\117\0\1\u01cc\127\0\1\u01cd\104\0\1\u01ce\115\0"+
    "\1\u01cf\106\0\1\u01d0\120\0\1\u01d1\117\0\1\u01d2\105\0"+
    "\1\u01d3\20\0\1\10\11\0\1\10\13\0\4\10\7\0"+
    "\10\10\4\0\1\10\1\0\14\10\1\u01d4\13\10\4\0"+
    "\2\10\11\0\1\10\13\0\4\10\7\0\10\10\4\0"+
    "\1\10\1\0\2\10\1\u01d5\25\10\4\0\1\10\72\0"+
    "\1\u01d6\1\u01d7\121\0\1\u01d8\74\0\1\u01d9\132\0\1\u01da"+
    "\104\0\1\u01db\21\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\4\10\1\u01dc\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\22\10\1\u01dd\5\10\4\0\1\10"+
    "\72\0\1\u01de\100\0\1\u01df\134\0\1\u01e0\102\0\1\u01e1"+
    "\103\0\1\u01e2\133\0\1\u01e3\77\0\1\u01e4\133\0\1\u01e5"+
    "\77\0\1\u01e6\103\0\1\u01e7\113\0\1\u01e8\130\0\1\u01e9"+
    "\100\0\1\u01ea\126\0\1\u01eb\117\0\1\u01ec\102\0\1\u01ed"+
    "\113\0\1\u01ee\47\0\1\u01ef\171\0\1\u01f0\35\0\1\u01f1"+
    "\172\0\1\u01f2\70\0\1\u01f3\125\0\1\u01f4\122\0\1\u01f5"+
    "\75\0\1\u01f6\31\0\1\10\11\0\1\10\13\0\4\10"+
    "\7\0\10\10\4\0\1\10\1\0\22\10\1\u01f7\5\10"+
    "\4\0\1\10\75\0\1\u01f8\100\0\1\u01f9\117\0\1\u01fa"+
    "\114\0\1\u01fb\110\0\1\u01fc\107\0\1\u01fd\33\0\1\10"+
    "\11\0\1\10\13\0\4\10\7\0\10\10\4\0\1\10"+
    "\1\0\4\10\1\u01fe\23\10\4\0\1\10\60\0\1\u01ff"+
    "\124\0\1\u0200\115\0\1\u0201\120\0\1\u0202\107\0\1\u0203"+
    "\76\0\1\u0204\127\0\1\u0205\120\0\1\u0206\105\0\1\u0207"+
    "\113\0\1\u0208\120\0\1\u0209\115\0\1\u020a\112\0\1\u020b"+
    "\104\0\1\u020c\123\0\1\u020d\113\0\1\u020e\35\0\1\u020f"+
    "\154\0\1\u0210\13\0\1\u0211\114\0\1\u0212\77\0\1\u0213"+
    "\111\0\1\u0214\107\0\1\u0215\123\0\1\u0216\113\0\1\u0217"+
    "\120\0\1\u0218\103\0\1\u0219\52\0\1\u021a\164\0\1\u021b"+
    "\17\0\1\10\11\0\1\10\13\0\4\10\7\0\10\10"+
    "\4\0\1\10\1\0\20\10\1\u021c\7\10\4\0\1\10"+
    "\74\0\1\u021d\42\0\1\u021e\152\0\1\u021f\114\0\1\u0220"+
    "\127\0\1\u0221\105\0\1\u0222\104\0\1\u0223\114\0\1\u0224"+
    "\113\0\1\u0225\124\0\1\u0226\102\0\1\u0227\124\0\1\u0228"+
    "\76\0\1\u0229\123\0\1\u022a\103\0\1\u022b\120\0\1\u022c"+
    "\116\0\1\u022d\125\0\1\u022e\35\0\1\u022f\153\0\1\u0230"+
    "\53\0\1\u0231\167\0\1\u0232\105\0\1\u0233\123\0\1\u0234"+
    "\74\0\1\u0235\137\0\1\u0236\70\0\1\u0237\121\0\1\u0238"+
    "\113\0\1\u0239\122\0\1\u023a\113\0\1\u023b\115\0\1\u023c"+
    "\102\0\1\u023d\103\0\1\u023e\131\0\1\u023f\115\0\1\u0240"+
    "\106\0\1\u0241\77\0\1\u0242\132\0\1\u0243\105\0\1\u0244"+
    "\121\0\1\u0245\115\0\1\u0246\35\0\1\u0247\167\0\1\u0248"+
    "\76\0\1\u0249\114\0\1\u024a\117\0\1\u024b\47\0\1\u024c"+
    "\113\0\1\u024d\175\0\1\u024e\31\0\1\u024f\170\0\1\u0250"+
    "\121\0\1\u0251\70\0\1\u0252\113\0\1\u0253\131\0\1\u0254"+
    "\112\0\1\u0255\102\0\1\u0256\117\0\1\u0257\111\0\1\u0258"+
    "\116\0\1\u0259\102\0\1\u025a\113\0\1\u025b\124\0\1\u025c"+
    "\106\0\1\u025d\107\0\1\u025e\53\0\1\u025f\167\0\1\u0260"+
    "\110\0\1\u0261\100\0\1\u0262\124\0\1\u0263\116\0\1\u0264"+
    "\110\0\1\u0265\113\0\1\u0266\44\0\1\u0267\171\0\1\u0268"+
    "\106\0\1\u0269\42\0\1\u026a\153\0\1\u026b\122\0\1\u026c"+
    "\100\0\1\u026d\57\0\1\u026e\171\0\1\u026f\112\0\1\u0270"+
    "\102\0\1\u0271\47\0\1\u0272\163\0\1\u0273\114\0\1\u0274"+
    "\76\0\1\u0275\113\0\1\u0276\113\0\1\u0277\114\0\1\u0278"+
    "\113\0\1\u0279\126\0\1\u027a\117\0\1\u027b\37\0\1\u027c"+
    "\113\0\1\u027d\162\0\1\u027e\121\0\1\u027f\76\0\1\u0280"+
    "\131\0\1\u0281\106\0\1\u0282\111\0\1\u0283\113\0\1\u0284"+
    "\102\0\1\u0285\125\0\1\u0286\101\0\1\u0287\126\0\1\u0288"+
    "\106\0\1\u0289\47\0\1\u028a\153\0\1\u028b\117\0\1\u028c"+
    "\124\0\1\u028d\114\0\1\u028e\111\0\1\u028f\73\0\1\u0290"+
    "\57\0\1\u0291\147\0\1\u0292\114\0\1\u0293\132\0\1\u0294"+
    "\76\0\1\u0295\130\0\1\u0296\105\0\1\u0297\115\0\1\u0298"+
    "\122\0\1\u0299\111\0\1\u029a\114\0\1\u029b\113\0\1\u029c"+
    "\111\0\1\u029d\73\0\1\u029e\133\0\1\u029f\114\0\1\u02a0"+
    "\74\0\1\u02a1\121\0\1\u02a2\120\0\1\u02a3\102\0\1\u02a4"+
    "\124\0\1\u02a5\117\0\1\u02a6\75\0\1\u02a7\124\0\1\u02a8"+
    "\121\0\1\u02a9\75\0\1\u02aa\127\0\1\u02ab\103\0\1\u02ac"+
    "\125\0\1\u02ad\113\0\1\u02ae\120\0\1\u02af\104\0\1\u02b0"+
    "\107\0\1\u02b1\117\0\1\u02b2\103\0\1\u02b3\103\0\1\u02b4"+
    "\133\0\1\u02b5\103\0\1\u02b6\117\0\1\u02b7\114\0\1\u02b8"+
    "\112\0\1\u02b9\114\0\1\u02ba\76\0\1\u02bb\135\0\1\u02bc"+
    "\111\0\1\u02bd\73\0\1\u02be\127\0\1\u02bf\105\0\1\u02c0"+
    "\125\0\1\u02c1\115\0\1\u02c2\113\0\1\u02c3\113\0\1\u02c4"+
    "\113\0\1\u02c5\77\0\1\u02c6\105\0\1\u02c7\123\0\1\u02c8"+
    "\124\0\1\u02c9\107\0\1\u02ca\124\0\1\u02cb\102\0\1\u02cc"+
    "\116\0\1\u02cd\107\0\1\u02ce\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\3\11\2\1\1\11\5\1\1\11"+
    "\4\1\4\11\1\1\1\11\21\1\1\11\1\1\4\11"+
    "\2\0\10\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\3\11\1\1\1\11\46\1\2\11\2\1\1\0"+
    "\1\1\1\0\1\1\2\11\15\1\1\11\1\0\12\1"+
    "\1\0\27\1\1\11\1\0\1\11\24\1\3\0\12\1"+
    "\1\0\2\1\1\11\52\1\3\0\5\1\1\0\3\1"+
    "\1\0\6\1\1\11\17\1\1\0\21\1\3\0\3\1"+
    "\1\0\2\1\1\0\20\1\7\0\6\1\1\0\7\1"+
    "\3\0\2\1\1\0\1\1\2\0\7\1\2\0\2\1"+
    "\13\0\4\1\3\0\5\1\3\0\1\1\4\0\3\1"+
    "\3\0\1\1\14\0\3\1\5\0\4\1\3\0\1\1"+
    "\1\11\26\0\2\1\6\0\2\1\2\0\1\11\3\0"+
    "\1\11\20\0\1\11\1\0\1\1\6\0\1\1\11\0"+
    "\1\11\23\0\1\1\2\0\2\11\2\0\3\11\25\0"+
    "\1\11\24\0\1\11\3\0\2\11\4\0\1\11\15\0"+
    "\1\11\12\0\1\11\12\0\1\11\44\0\1\11\1\0"+
    "\3\11\6\0\1\11\3\0\1\11\7\0\1\11\1\0"+
    "\1\11\3\0\2\11\4\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[718];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LispLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public LispToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return LispToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return LispToken.BAD_CHARACTER;
            }
            // fall through
          case 152: break;
          case 2:
            { return LispToken.WHITESPACE;
            }
            // fall through
          case 153: break;
          case 3:
            { return LispToken.NOT;
            }
            // fall through
          case 154: break;
          case 4:
            { return LispToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 155: break;
          case 5:
            { return LispToken.IDENTIFIER;
            }
            // fall through
          case 156: break;
          case 6:
            { return LispToken.MOD;
            }
            // fall through
          case 157: break;
          case 7:
            { return LispToken.AND;
            }
            // fall through
          case 158: break;
          case 8:
            { return LispToken.SINGLE_QUOTE;
            }
            // fall through
          case 159: break;
          case 9:
            { return LispToken.LPAREN;
            }
            // fall through
          case 160: break;
          case 10:
            { return LispToken.RPAREN;
            }
            // fall through
          case 161: break;
          case 11:
            { return LispToken.MULT;
            }
            // fall through
          case 162: break;
          case 12:
            { return LispToken.PLUS;
            }
            // fall through
          case 163: break;
          case 13:
            { return LispToken.COMMA;
            }
            // fall through
          case 164: break;
          case 14:
            { return LispToken.MINUS;
            }
            // fall through
          case 165: break;
          case 15:
            { return LispToken.DOT;
            }
            // fall through
          case 166: break;
          case 16:
            { return LispToken.DIV;
            }
            // fall through
          case 167: break;
          case 17:
            { return LispToken.INTEGER_LITERAL;
            }
            // fall through
          case 168: break;
          case 18:
            { return LispToken.COLON;
            }
            // fall through
          case 169: break;
          case 19:
            { return LispToken.LINE_COMMENT;
            }
            // fall through
          case 170: break;
          case 20:
            { return LispToken.LT;
            }
            // fall through
          case 171: break;
          case 21:
            { return LispToken.EQ;
            }
            // fall through
          case 172: break;
          case 22:
            { return LispToken.GT;
            }
            // fall through
          case 173: break;
          case 23:
            { return LispToken.QUEST;
            }
            // fall through
          case 174: break;
          case 24:
            { return LispToken.AT;
            }
            // fall through
          case 175: break;
          case 25:
            { return LispToken.LBRACK;
            }
            // fall through
          case 176: break;
          case 26:
            { return LispToken.RBRACK;
            }
            // fall through
          case 177: break;
          case 27:
            { return LispToken.XOR;
            }
            // fall through
          case 178: break;
          case 28:
            { return LispToken.BACKTICK;
            }
            // fall through
          case 179: break;
          case 29:
            { return LispToken.LBRACE;
            }
            // fall through
          case 180: break;
          case 30:
            { return LispToken.OR;
            }
            // fall through
          case 181: break;
          case 31:
            { return LispToken.RBRACE;
            }
            // fall through
          case 182: break;
          case 32:
            { return LispToken.TILDE;
            }
            // fall through
          case 183: break;
          case 33:
            { return LispToken.NOTEQ;
            }
            // fall through
          case 184: break;
          case 34:
            { return LispToken.MODEQ;
            }
            // fall through
          case 185: break;
          case 35:
            { return LispToken.ANDAND;
            }
            // fall through
          case 186: break;
          case 36:
            { return LispToken.ANDEQ;
            }
            // fall through
          case 187: break;
          case 37:
            { return LispToken.MULTEQ;
            }
            // fall through
          case 188: break;
          case 38:
            { return LispToken.PLUSPLUS;
            }
            // fall through
          case 189: break;
          case 39:
            { return LispToken.PLUSEQ;
            }
            // fall through
          case 190: break;
          case 40:
            { return LispToken.MINUSMINUS;
            }
            // fall through
          case 191: break;
          case 41:
            { return LispToken.MINUSEQ;
            }
            // fall through
          case 192: break;
          case 42:
            { return LispToken.DOUBLE_LITERAL;
            }
            // fall through
          case 193: break;
          case 43:
            { return LispToken.DIVEQ;
            }
            // fall through
          case 194: break;
          case 44:
            { return LispToken.FLOAT_LITERAL;
            }
            // fall through
          case 195: break;
          case 45:
            { return LispToken.LONG_LITERAL;
            }
            // fall through
          case 196: break;
          case 46:
            { return LispToken.LTLT;
            }
            // fall through
          case 197: break;
          case 47:
            { return LispToken.LTEQ;
            }
            // fall through
          case 198: break;
          case 48:
            { return LispToken.EQEQ;
            }
            // fall through
          case 199: break;
          case 49:
            { return LispToken.GTEQ;
            }
            // fall through
          case 200: break;
          case 50:
            { return LispToken.GTGT;
            }
            // fall through
          case 201: break;
          case 51:
            { return LispToken.XOREQ;
            }
            // fall through
          case 202: break;
          case 52:
            { return LispToken.DO;
            }
            // fall through
          case 203: break;
          case 53:
            { return LispToken.IF;
            }
            // fall through
          case 204: break;
          case 54:
            { return LispToken.OREQ;
            }
            // fall through
          case 205: break;
          case 55:
            { return LispToken.OROR;
            }
            // fall through
          case 206: break;
          case 56:
            { return LispToken.LTLTEQ;
            }
            // fall through
          case 207: break;
          case 57:
            { return LispToken.GTGTEQ;
            }
            // fall through
          case 208: break;
          case 58:
            { return LispToken.GTGTGT;
            }
            // fall through
          case 209: break;
          case 59:
            { return LispToken.DO_S;
            }
            // fall through
          case 210: break;
          case 60:
            { return LispToken.LET;
            }
            // fall through
          case 211: break;
          case 61:
            { return LispToken.THE;
            }
            // fall through
          case 212: break;
          case 62:
            { return LispToken.BLOCK_COMMENT;
            }
            // fall through
          case 213: break;
          case 63:
            { return LispToken.GTGTGTEQ;
            }
            // fall through
          case 214: break;
          case 64:
            { return LispToken.CASE;
            }
            // fall through
          case 215: break;
          case 65:
            { return LispToken.COND;
            }
            // fall through
          case 216: break;
          case 66:
            { return LispToken.FLET;
            }
            // fall through
          case 217: break;
          case 67:
            { return LispToken.LET_S;
            }
            // fall through
          case 218: break;
          case 68:
            { return LispToken.LOOP;
            }
            // fall through
          case 219: break;
          case 69:
            { return LispToken.NULL;
            }
            // fall through
          case 220: break;
          case 70:
            { return LispToken.PROG;
            }
            // fall through
          case 221: break;
          case 71:
            { return LispToken.TRUE;
            }
            // fall through
          case 222: break;
          case 72:
            { return LispToken.WHEN;
            }
            // fall through
          case 223: break;
          case 73:
            { return LispToken.ABORT;
            }
            // fall through
          case 224: break;
          case 74:
            { return LispToken.BLOCK;
            }
            // fall through
          case 225: break;
          case 75:
            { return LispToken.BREAK;
            }
            // fall through
          case 226: break;
          case 76:
            { return LispToken.CATCH;
            }
            // fall through
          case 227: break;
          case 77:
            { return LispToken.CCASE;
            }
            // fall through
          case 228: break;
          case 78:
            { return LispToken.DEFUN;
            }
            // fall through
          case 229: break;
          case 79:
            { return LispToken.ECASE;
            }
            // fall through
          case 230: break;
          case 80:
            { return LispToken.ERROR;
            }
            // fall through
          case 231: break;
          case 81:
            { return LispToken.FALSE;
            }
            // fall through
          case 232: break;
          case 82:
            { return LispToken.PROG_S;
            }
            // fall through
          case 233: break;
          case 83:
            { return LispToken.PROG1;
            }
            // fall through
          case 234: break;
          case 84:
            { return LispToken.PROG2;
            }
            // fall through
          case 235: break;
          case 85:
            { return LispToken.PROGN;
            }
            // fall through
          case 236: break;
          case 86:
            { return LispToken.PROGV;
            }
            // fall through
          case 237: break;
          case 87:
            { return LispToken.THROW;
            }
            // fall through
          case 238: break;
          case 88:
            { return LispToken.ASSERT;
            }
            // fall through
          case 239: break;
          case 89:
            { return LispToken.CERROR;
            }
            // fall through
          case 240: break;
          case 90:
            { return LispToken.DEFVAR;
            }
            // fall through
          case 241: break;
          case 91:
            { return LispToken.DOLIST;
            }
            // fall through
          case 242: break;
          case 92:
            { return LispToken.LABELS;
            }
            // fall through
          case 243: break;
          case 93:
            { return LispToken.LAMBDA;
            }
            // fall through
          case 244: break;
          case 94:
            { return LispToken.RETURN;
            }
            // fall through
          case 245: break;
          case 95:
            { return LispToken.SIGNAL;
            }
            // fall through
          case 246: break;
          case 96:
            { return LispToken.UNLESS;
            }
            // fall through
          case 247: break;
          case 97:
            { return LispToken.DECLAIM;
            }
            // fall through
          case 248: break;
          case 98:
            { return LispToken.DECLARE;
            }
            // fall through
          case 249: break;
          case 99:
            { return LispToken.DEFSETF;
            }
            // fall through
          case 250: break;
          case 100:
            { return LispToken.DEFTYPE;
            }
            // fall through
          case 251: break;
          case 101:
            { return LispToken.DOTIMES;
            }
            // fall through
          case 252: break;
          case 102:
            { return LispToken.LOCALLY;
            }
            // fall through
          case 253: break;
          case 103:
            { return LispToken.PROVIDE;
            }
            // fall through
          case 254: break;
          case 104:
            { return LispToken.REQUIRE;
            }
            // fall through
          case 255: break;
          case 105:
            { return LispToken.TAGBODY;
            }
            // fall through
          case 256: break;
          case 106:
            { return LispToken.DEFCLASS;
            }
            // fall through
          case 257: break;
          case 107:
            { return LispToken.DEFMACRO;
            }
            // fall through
          case 258: break;
          case 108:
            { return LispToken.MACROLET;
            }
            // fall through
          case 259: break;
          case 109:
            { return LispToken.PROCLAIM;
            }
            // fall through
          case 260: break;
          case 110:
            { return LispToken.TYPECASE;
            }
            // fall through
          case 261: break;
          case 111:
            { return LispToken.CTYPECASE;
            }
            // fall through
          case 262: break;
          case 112:
            { return LispToken.DEFMETHOD;
            }
            // fall through
          case 263: break;
          case 113:
            { return LispToken.DEFSTRUCT;
            }
            // fall through
          case 264: break;
          case 114:
            { return LispToken.ETYPECASE;
            }
            // fall through
          case 265: break;
          case 115:
            { return LispToken.EVAL_WHEN;
            }
            // fall through
          case 266: break;
          case 116:
            { return LispToken.DEFGENERIC;
            }
            // fall through
          case 267: break;
          case 117:
            { return LispToken.DEFPACKAGE;
            }
            // fall through
          case 268: break;
          case 118:
            { return LispToken.DO_SYMBOLS;
            }
            // fall through
          case 269: break;
          case 119:
            { return LispToken.IN_PACKAGE;
            }
            // fall through
          case 270: break;
          case 120:
            { return LispToken.WITH_SLOTS;
            }
            // fall through
          case 271: break;
          case 121:
            { return LispToken.DEFCONSTANT;
            }
            // fall through
          case 272: break;
          case 122:
            { return LispToken.RETURN_FROM;
            }
            // fall through
          case 273: break;
          case 123:
            { return LispToken.DEFPARAMETER;
            }
            // fall through
          case 274: break;
          case 124:
            { return LispToken.HANDLER_BIND;
            }
            // fall through
          case 275: break;
          case 125:
            { return LispToken.HANDLER_CASE;
            }
            // fall through
          case 276: break;
          case 126:
            { return LispToken.RESTART_BIND;
            }
            // fall through
          case 277: break;
          case 127:
            { return LispToken.RESTART_CASE;
            }
            // fall through
          case 278: break;
          case 128:
            { return LispToken.RESTART_NAME;
            }
            // fall through
          case 279: break;
          case 129:
            { return LispToken.IGNORE_ERRORS;
            }
            // fall through
          case 280: break;
          case 130:
            { return LispToken.DO_ALL_SYMBOLS;
            }
            // fall through
          case 281: break;
          case 131:
            { return LispToken.UNWIND_PROTECT;
            }
            // fall through
          case 282: break;
          case 132:
            { return LispToken.WITH_ACCESSORS;
            }
            // fall through
          case 283: break;
          case 133:
            { return LispToken.WITH_OPEN_FILE;
            }
            // fall through
          case 284: break;
          case 134:
            { return LispToken.SYMBOL_MACROLET;
            }
            // fall through
          case 285: break;
          case 135:
            { return LispToken.DEFINE_CONDITION;
            }
            // fall through
          case 286: break;
          case 136:
            { return LispToken.WITH_OPEN_STREAM;
            }
            // fall through
          case 287: break;
          case 137:
            { return LispToken.DEFINE_MODIFY_MACRO;
            }
            // fall through
          case 288: break;
          case 138:
            { return LispToken.DEFINE_SYMBOL_MACRO;
            }
            // fall through
          case 289: break;
          case 139:
            { return LispToken.DO_EXTERNAL_SYMBOLS;
            }
            // fall through
          case 290: break;
          case 140:
            { return LispToken.MULTIPLE_VALUE_BIND;
            }
            // fall through
          case 291: break;
          case 141:
            { return LispToken.WITH_SIMPLE_RESTART;
            }
            // fall through
          case 292: break;
          case 142:
            { return LispToken.DEFINE_SETF_EXPANDER;
            }
            // fall through
          case 293: break;
          case 143:
            { return LispToken.DEFINE_COMPILER_MACRO;
            }
            // fall through
          case 294: break;
          case 144:
            { return LispToken.WITH_COMPILATION_UNIT;
            }
            // fall through
          case 295: break;
          case 145:
            { return LispToken.WITH_OUTPUT_TO_STRING;
            }
            // fall through
          case 296: break;
          case 146:
            { return LispToken.WITH_PACKAGE_ITERATOR;
            }
            // fall through
          case 297: break;
          case 147:
            { return LispToken.WITH_INPUT_FROM_STRING;
            }
            // fall through
          case 298: break;
          case 148:
            { return LispToken.WITH_CONDITION_RESTARTS;
            }
            // fall through
          case 299: break;
          case 149:
            { return LispToken.WITH_STANDARD_IO_SYNTAX;
            }
            // fall through
          case 300: break;
          case 150:
            { return LispToken.WITH_HASH_TABLE_ITERATOR;
            }
            // fall through
          case 301: break;
          case 151:
            { return LispToken.DEFINE_METHOD_COMBINATION;
            }
            // fall through
          case 302: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
