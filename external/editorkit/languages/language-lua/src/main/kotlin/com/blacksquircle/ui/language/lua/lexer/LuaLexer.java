/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.lua.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>lua.flex</tt>
 */
public class LuaLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\6\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\11\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\6\1\34\1\35\1\34\1\36\1\37\1\40\1\41"+
    "\1\11\1\42\2\11\1\43\1\11\1\44\1\45\1\46"+
    "\1\11\1\47\1\50\2\11\1\51\1\11\1\52\2\11"+
    "\1\53\1\54\1\55\1\56\1\57\1\6\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\11"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\11"+
    "\1\110\1\111\1\112\1\113\6\0\1\114\32\0\2\6"+
    "\4\11\4\6\1\11\2\6\1\0\7\6\1\11\4\6"+
    "\1\11\5\6\27\11\1\6\37\11\1\6\u01ca\11\4\6"+
    "\14\11\16\6\5\11\7\6\1\11\1\6\1\11\21\6"+
    "\160\0\5\11\1\6\2\11\2\6\4\11\10\6\1\11"+
    "\1\6\3\11\1\6\1\11\1\6\24\11\1\6\123\11"+
    "\1\6\213\11\1\6\5\0\2\6\236\11\11\6\46\11"+
    "\2\6\1\11\7\6\47\11\7\6\1\11\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\11\5\6\3\11\15\6\5\0\6\6\1\11"+
    "\4\6\13\0\5\6\53\11\37\0\4\6\2\11\1\0"+
    "\143\11\1\6\1\11\10\0\1\6\6\0\2\11\2\0"+
    "\1\6\4\0\2\11\12\0\3\11\2\6\1\11\17\6"+
    "\1\0\1\11\1\0\36\11\33\0\2\6\131\11\13\0"+
    "\1\11\16\6\12\0\41\11\11\0\2\11\4\6\1\11"+
    "\5\6\26\11\4\0\1\11\11\0\1\11\3\0\1\11"+
    "\5\0\22\6\31\11\3\0\104\6\1\11\1\6\13\11"+
    "\67\6\33\0\1\6\4\0\66\11\3\0\1\11\22\0"+
    "\1\11\7\0\12\11\2\0\2\6\12\0\1\6\7\11"+
    "\1\6\7\11\1\6\3\0\1\6\10\11\2\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\1\11\3\6\4\11"+
    "\2\6\1\0\1\11\7\0\2\6\2\0\2\6\3\0"+
    "\1\11\10\6\1\0\4\6\2\11\1\6\3\11\2\0"+
    "\2\6\12\0\4\11\7\6\1\11\5\6\3\0\1\6"+
    "\6\11\4\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\2\11\1\6\2\11\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\11\1\6\1\11\7\6\14\0\3\11\1\0\13\6"+
    "\3\0\1\6\11\11\1\6\3\11\1\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\2\6\1\0\1\11"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\11\17\6"+
    "\2\11\2\0\2\6\12\0\1\6\1\11\17\6\3\0"+
    "\1\6\10\11\2\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\2\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\1\6\1\11\20\6"+
    "\1\0\1\11\1\6\6\11\3\6\3\11\1\6\4\11"+
    "\3\6\2\11\1\6\1\11\1\6\2\11\3\6\2\11"+
    "\3\6\3\11\3\6\14\11\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\11\6\6\1\0\16\6\12\0"+
    "\11\6\1\11\7\6\3\0\1\6\10\11\1\6\3\11"+
    "\1\6\27\11\1\6\12\11\1\6\5\11\3\6\1\11"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\1\6"+
    "\2\11\6\6\2\11\2\0\2\6\12\0\22\6\2\0"+
    "\1\6\10\11\1\6\3\11\1\6\27\11\1\6\12\11"+
    "\1\6\5\11\2\6\1\0\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\11\1\6\2\11"+
    "\2\0\2\6\12\0\1\6\2\11\17\6\2\0\1\6"+
    "\10\11\1\6\3\11\1\6\51\11\2\6\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\1\11\10\6\1\0\10\6"+
    "\2\11\2\0\2\6\12\0\12\6\6\11\2\6\2\0"+
    "\1\6\22\11\3\6\30\11\1\6\11\11\1\6\1\11"+
    "\2\6\7\11\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\22\6\2\0\15\6\60\11\1\0\2\11"+
    "\7\0\4\6\10\11\10\0\1\6\12\0\47\6\2\11"+
    "\1\6\1\11\2\6\2\11\1\6\1\11\2\6\1\11"+
    "\6\6\4\11\1\6\7\11\1\6\3\11\1\6\1\11"+
    "\1\6\1\11\2\6\2\11\1\6\4\11\1\0\2\11"+
    "\6\0\1\6\2\0\1\11\2\6\5\11\1\6\1\11"+
    "\1\6\6\0\2\6\12\0\2\6\4\11\40\6\1\11"+
    "\27\6\2\0\6\6\12\0\13\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\2\0\10\11\1\6\44\11\4\6"+
    "\24\0\1\6\2\0\5\11\13\0\1\6\44\0\11\6"+
    "\1\0\71\6\53\11\24\0\1\11\12\0\6\6\6\11"+
    "\4\0\4\11\3\0\1\11\3\0\2\11\7\0\3\11"+
    "\4\0\15\11\14\0\1\11\17\0\2\6\46\11\1\6"+
    "\1\11\5\6\1\11\2\6\53\11\1\6\115\11\1\6"+
    "\4\11\2\6\7\11\1\6\1\11\1\6\4\11\2\6"+
    "\51\11\1\6\4\11\2\6\41\11\1\6\4\11\2\6"+
    "\7\11\1\6\1\11\1\6\4\11\2\6\17\11\1\6"+
    "\71\11\1\6\4\11\2\6\103\11\2\6\3\0\40\6"+
    "\20\11\20\6\125\11\14\6\u016c\11\2\6\21\11\1\6"+
    "\32\11\5\6\113\11\3\6\3\11\17\6\15\11\1\6"+
    "\4\11\3\0\13\6\22\11\3\0\13\6\22\11\2\0"+
    "\14\6\15\11\1\6\3\11\1\6\2\0\14\6\64\11"+
    "\40\0\3\6\1\11\3\6\2\11\1\0\2\6\12\0"+
    "\41\6\3\0\2\6\12\0\6\6\130\11\10\6\51\11"+
    "\1\0\1\11\5\6\106\11\12\6\35\11\3\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\11\2\6\5\11\13\6"+
    "\54\11\4\6\21\0\7\11\2\0\6\6\12\0\46\6"+
    "\27\11\5\0\4\6\65\11\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\11\130\6\5\0\57\11"+
    "\21\0\7\11\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\6\44\11"+
    "\24\0\10\6\12\0\3\6\3\11\12\0\44\11\122\6"+
    "\3\0\1\6\25\0\4\11\1\0\4\11\3\0\2\11"+
    "\11\6\300\11\47\0\25\6\4\0\26\11\2\6\6\11"+
    "\2\6\46\11\2\6\6\11\2\6\10\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\37\11\2\6\65\11"+
    "\1\6\7\11\1\6\1\11\3\6\3\11\1\6\7\11"+
    "\3\6\4\11\2\6\6\11\4\6\15\11\5\6\3\11"+
    "\1\6\7\11\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\11\23\6\1\11\13\6\5\0\5\6\6\0\1\6"+
    "\1\11\15\6\1\11\20\6\15\11\3\6\33\11\25\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\11\4\6"+
    "\1\11\2\6\12\11\1\6\1\11\3\6\5\11\6\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\4\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\51\11\3\6\136\11\21\6\33\11\65\6\306\11\112\6"+
    "\315\11\63\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\31\11\7\6\1\0\120\11\2\0\45\6\11\11"+
    "\2\6\147\11\2\6\4\11\1\6\4\11\14\6\13\11"+
    "\115\6\12\11\1\0\3\11\1\0\4\11\1\0\27\11"+
    "\5\0\20\6\1\11\7\6\64\11\14\6\2\0\62\11"+
    "\21\0\13\6\12\0\6\6\22\0\6\11\3\6\1\11"+
    "\4\6\12\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\46\6\51\11\16\0\11\6\3\11\1\0\10\11\2\0"+
    "\2\6\12\0\6\6\27\11\3\6\1\11\1\0\4\6"+
    "\60\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\6\3\11\2\6\13\11\5\0"+
    "\2\6\3\11\2\0\12\6\6\11\2\6\6\11\2\6"+
    "\6\11\11\6\7\11\1\6\7\11\221\6\43\11\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\11\14\6\27\11"+
    "\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11\46\6"+
    "\7\11\14\6\5\11\5\6\1\11\1\0\12\11\1\6"+
    "\15\11\1\6\5\11\1\6\1\11\1\6\2\11\1\6"+
    "\2\11\1\6\154\11\41\6\153\11\22\6\100\11\2\6"+
    "\66\11\50\6\15\11\3\6\20\0\20\6\7\0\14\6"+
    "\2\11\30\6\3\11\31\6\1\11\6\6\5\11\1\6"+
    "\207\11\2\6\1\0\4\6\1\11\13\6\12\0\7\6"+
    "\32\11\4\6\1\11\1\6\32\11\13\6\131\11\3\6"+
    "\6\11\2\6\6\11\2\6\6\11\2\6\3\11\3\6"+
    "\2\11\3\6\2\11\22\6\3\0\4\6\14\11\1\6"+
    "\32\11\1\6\23\11\1\6\2\11\1\6\17\11\2\6"+
    "\16\11\42\6\173\11\105\6\65\11\210\6\1\0\202\6"+
    "\35\11\3\6\61\11\57\6\37\11\21\6\33\11\65\6"+
    "\36\11\2\6\44\11\4\6\10\11\1\6\5\11\52\6"+
    "\236\11\2\6\12\0\126\6\6\11\2\6\1\11\1\6"+
    "\54\11\1\6\2\11\3\6\1\11\2\6\27\11\252\6"+
    "\26\11\12\6\32\11\106\6\70\11\6\6\2\11\100\6"+
    "\1\11\3\0\1\6\2\0\5\6\4\0\4\11\1\6"+
    "\3\11\1\6\33\11\4\6\3\0\4\6\1\0\40\6"+
    "\35\11\203\6\66\11\12\6\26\11\12\6\23\11\215\6"+
    "\111\11\267\6\3\0\65\11\17\0\37\6\12\0\20\6"+
    "\3\0\55\11\13\0\2\6\1\0\22\6\31\11\7\6"+
    "\12\0\6\6\3\0\44\11\16\0\1\6\12\0\100\6"+
    "\3\0\60\11\16\0\4\11\13\6\12\0\246\6\53\11"+
    "\15\0\10\6\12\0\66\6\157\11\221\6\143\11\235\6"+
    "\57\11\321\6\71\11\307\6\105\11\13\6\1\11\56\0"+
    "\20\6\4\0\15\11\140\6\2\11\u0163\6\5\0\3\6"+
    "\26\0\2\6\7\0\36\6\4\0\224\6\3\0\273\6"+
    "\125\11\1\6\107\11\1\6\2\11\2\6\1\11\2\6"+
    "\2\11\2\6\4\11\1\6\14\11\1\6\1\11\1\6"+
    "\7\11\1\6\101\11\1\6\4\11\2\6\10\11\1\6"+
    "\7\11\1\6\34\11\1\6\4\11\1\6\5\11\1\6"+
    "\1\11\3\6\7\11\1\6\u0154\11\2\6\31\11\1\6"+
    "\31\11\1\6\37\11\1\6\31\11\1\6\37\11\1\6"+
    "\31\11\1\6\37\11\1\6\31\11\1\6\37\11\1\6"+
    "\31\11\1\6\10\11\2\6\62\0\4\11\1\6\33\11"+
    "\1\6\2\11\1\6\1\11\2\6\1\11\1\6\12\11"+
    "\1\6\4\11\1\6\1\11\1\6\1\11\6\6\1\11"+
    "\4\6\1\11\1\6\1\11\1\6\1\11\1\6\3\11"+
    "\1\6\2\11\1\6\1\11\2\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\2\11"+
    "\1\6\1\11\2\6\4\11\1\6\7\11\1\6\4\11"+
    "\1\6\4\11\1\6\1\11\1\6\12\11\1\6\21\11"+
    "\5\6\3\11\1\6\5\11\1\6\21\11\104\6\327\11"+
    "\51\6\65\11\13\6\336\11\343\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\24\5\1\32\1\33\1\34\1\35\1\1"+
    "\1\4\1\0\1\7\1\0\1\36\1\37\1\40\1\20"+
    "\2\40\1\41\1\42\1\20\1\43\1\44\1\45\1\46"+
    "\5\5\1\47\10\5\1\50\1\51\7\5\1\33\15\5"+
    "\1\52\1\53\2\4\2\7\1\40\1\0\1\20\1\5"+
    "\1\54\5\5\1\55\2\5\1\56\10\5\1\57\1\60"+
    "\23\5\2\53\1\0\5\5\1\61\5\5\1\62\1\5"+
    "\1\63\2\5\1\64\1\65\14\5\1\66\2\5\1\67"+
    "\1\70\4\5\1\53\2\5\1\71\3\5\1\72\1\73"+
    "\6\5\1\74\1\5\1\75\1\76\1\77\14\5\1\100"+
    "\1\101\1\5\1\102\1\5\1\103\1\5\1\104\1\105"+
    "\3\5\1\106\2\5\1\107\1\5\1\110\1\111\1\112"+
    "\1\5\1\113\1\114\4\5\1\115\1\116\3\5\1\117"+
    "\4\5\1\120\1\121\3\5\1\122\1\5\1\123\1\5"+
    "\1\124\1\5\1\125\1\5\1\126\1\127\6\5\1\130"+
    "\5\5\1\131\1\132\1\5\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\232\0\347\0\232\0\u0134\0\u0181"+
    "\0\232\0\u01ce\0\232\0\232\0\232\0\232\0\232\0\u021b"+
    "\0\u0268\0\232\0\u02b5\0\u0302\0\232\0\232\0\u034f\0\u039c"+
    "\0\u03e9\0\232\0\232\0\232\0\232\0\u0436\0\u0483\0\u04d0"+
    "\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb\0\u0738"+
    "\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0"+
    "\0\u09ed\0\232\0\232\0\232\0\u0a3a\0\u0a87\0\232\0\u0ad4"+
    "\0\232\0\u0b21\0\232\0\232\0\u0b6e\0\u0bbb\0\232\0\u0c08"+
    "\0\232\0\232\0\u0c55\0\232\0\232\0\232\0\u0181\0\u0ca2"+
    "\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a"+
    "\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u0181\0\u0181\0\u10d8"+
    "\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u0181\0\u12f3"+
    "\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b"+
    "\0\u15a8\0\u15f5\0\u1642\0\u168f\0\232\0\u16dc\0\u1729\0\u1776"+
    "\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944\0\u0181\0\u1991"+
    "\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u0181\0\u1b12\0\u1b5f\0\u0181"+
    "\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7"+
    "\0\u0181\0\u0181\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95"+
    "\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd"+
    "\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465"+
    "\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd"+
    "\0\u271a\0\u2767\0\u27b4\0\u0181\0\u2801\0\u284e\0\u289b\0\u28e8"+
    "\0\u0181\0\u0181\0\u2935\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u0181\0\u2cd1"+
    "\0\u2d1e\0\u0181\0\u0181\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f"+
    "\0\u2eec\0\u2f39\0\u0181\0\u2f86\0\u2fd3\0\u3020\0\u0181\0\u0181"+
    "\0\u306d\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u0181\0\u323b"+
    "\0\u0181\0\u0181\0\u0181\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc"+
    "\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u0181"+
    "\0\u0181\0\u3624\0\u3671\0\u36be\0\u0181\0\u370b\0\u0181\0\u0181"+
    "\0\u3758\0\u37a5\0\u37f2\0\u0181\0\u383f\0\u388c\0\u0181\0\u38d9"+
    "\0\u0181\0\u0181\0\u0181\0\u3926\0\u0181\0\u0181\0\u3973\0\u39c0"+
    "\0\u3a0d\0\u3a5a\0\u0181\0\u0181\0\u3aa7\0\u3af4\0\u3b41\0\u0181"+
    "\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u0181\0\u0181\0\u3cc2\0\u3d0f"+
    "\0\u3d5c\0\u0181\0\u3da9\0\u0181\0\u3df6\0\u0181\0\u3e43\0\u0181"+
    "\0\u3e90\0\u0181\0\u0181\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011"+
    "\0\u405e\0\u0181\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df\0\u0181"+
    "\0\u0181\0\u422c\0\u0181";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\3\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\17\10\1\33\1\3\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\10\1\46\1\10\1\47\1\50\1\51\1\52\1\53"+
    "\1\10\1\54\1\55\1\56\1\57\1\10\1\60\1\61"+
    "\1\10\1\62\1\63\1\64\1\65\22\3\1\66\73\3"+
    "\117\0\1\4\112\0\2\7\1\0\2\7\1\0\2\7"+
    "\1\67\43\7\1\70\40\7\1\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\31\10\4\0\1\10\2\12"+
    "\1\0\2\12\1\0\5\12\1\71\40\12\1\72\40\12"+
    "\21\0\1\73\115\0\1\74\1\0\2\75\111\0\1\75"+
    "\1\0\2\24\7\0\1\76\1\77\1\100\1\101\2\0"+
    "\1\102\6\0\1\103\4\0\1\24\1\0\1\76\1\0"+
    "\1\77\1\100\1\101\4\0\1\102\13\0\1\103\30\0"+
    "\1\75\1\0\2\24\10\0\1\77\1\100\1\101\2\0"+
    "\1\102\13\0\1\24\3\0\1\77\1\100\1\101\4\0"+
    "\1\102\53\0\1\104\114\0\1\105\114\0\1\106\63\0"+
    "\1\10\10\0\1\10\12\0\2\10\6\0\5\10\1\107"+
    "\7\10\1\110\1\10\4\0\31\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\15\10\1\111"+
    "\4\10\1\112\6\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\21\10\1\113\7\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\16\10\1\114\12\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\16\10\1\115\12\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\116\1\10\1\117\3\10\1\120\7\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\1\10\1\121\14\10\1\122\5\10\1\123\4\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\5\10\1\124\10\10\1\125\12\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\6\10\1\126"+
    "\6\10\1\127\1\10\1\130\11\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\16\10\1\131"+
    "\12\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\16\10\1\132\12\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\5\10\1\133"+
    "\3\10\1\134\4\10\1\135\5\10\1\136\4\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\21\10\1\137\7\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\1\10\1\140\1\10\1\141"+
    "\15\10\1\142\7\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\1\10\1\143\3\10\1\144"+
    "\23\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\5\10\1\145\23\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\10\10\1\146"+
    "\5\10\1\147\2\10\1\150\6\10\1\151\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\15\10"+
    "\1\152\13\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\10\10\1\153\20\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\17\10"+
    "\1\154\11\10\4\0\1\10\31\0\1\155\104\0\1\156"+
    "\73\0\1\7\1\157\2\7\1\157\1\160\107\7\1\12"+
    "\1\161\2\12\1\161\1\162\107\12\24\0\2\75\10\0"+
    "\1\77\1\100\1\101\16\0\1\75\3\0\1\77\1\100"+
    "\1\101\53\0\2\76\15\0\1\102\13\0\1\76\12\0"+
    "\1\102\41\0\1\163\1\0\1\163\2\0\2\163\10\0"+
    "\1\77\1\0\1\101\16\0\1\163\3\0\1\77\1\0"+
    "\1\101\51\0\1\164\1\0\2\165\6\0\5\165\2\0"+
    "\1\102\13\0\7\165\4\0\1\102\22\0\1\10\10\0"+
    "\1\10\12\0\2\10\6\0\3\10\1\166\13\10\4\0"+
    "\31\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\4\10\1\167\24\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\22\10\1\170"+
    "\6\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\5\10\1\171\23\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\13\10\1\172"+
    "\15\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\6\10\1\173\22\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\22\10\1\174"+
    "\6\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\4\10\1\175\24\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\21\10\1\176"+
    "\7\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\13\10\1\177\15\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\21\10\1\200"+
    "\7\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\15\10\1\201\13\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\23\10\1\202"+
    "\5\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\23\10\1\203\5\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\1\10\1\204"+
    "\27\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\1\10\1\205\1\10\1\206\25\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\4\10\1\207\24\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\27\10\1\210\1\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\211\15\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\23\10\1\212\5\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\213\15\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\11\10\1\214\17\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\1\10\1\215\27\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\11\10\1\216\17\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\26\10\1\217\2\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\17\10\1\220\1\221\2\10"+
    "\1\222\5\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\13\10\1\223\7\10\1\224\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\5\10\1\225\23\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\15\10\1\226\4\10"+
    "\1\227\6\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\24\10\1\230\4\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\17\10"+
    "\1\231\11\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\17\10\1\232\3\10\1\233\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\11\10\1\234\17\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\3\10\1\235\25\10"+
    "\4\0\1\10\2\236\4\0\45\236\1\237\40\236\1\0"+
    "\1\7\1\157\2\7\1\157\1\160\2\7\1\67\43\7"+
    "\1\70\45\7\1\0\2\7\1\67\43\7\1\70\40\7"+
    "\1\12\1\161\2\12\1\161\1\162\5\12\1\71\40\12"+
    "\1\72\45\12\1\0\5\12\1\71\40\12\1\72\40\12"+
    "\24\0\2\163\10\0\1\77\1\0\1\101\16\0\1\163"+
    "\3\0\1\77\1\0\1\101\53\0\2\240\6\0\5\240"+
    "\16\0\7\240\51\0\1\240\1\0\2\165\6\0\5\165"+
    "\2\0\1\102\2\0\1\100\10\0\7\165\4\0\1\102"+
    "\3\0\1\100\16\0\1\10\10\0\1\10\12\0\2\10"+
    "\6\0\13\10\1\241\3\10\4\0\31\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\242\23\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\1\10\1\243\27\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\13\10"+
    "\1\244\15\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\11\10\1\245\17\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\246\23\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\16\10\1\247\12\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\22\10"+
    "\1\250\6\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\3\10\1\251\25\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\6\10"+
    "\1\252\5\10\1\253\14\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\16\10\1\254\12\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\11\10\1\255\17\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\4\10\1\256\24\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\1\10\1\257\27\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\24\10\1\260\4\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\23\10\1\261\5\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\13\10\1\262\15\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\21\10\1\263\7\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\13\10\1\264\15\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\15\10\1\265\13\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\5\10\1\266\1\10"+
    "\1\267\12\10\1\270\6\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\5\10\1\271\23\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\24\10\1\272\4\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\24\10\1\273\4\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\5\10\1\274\23\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\6\10\1\275\5\10"+
    "\1\276\14\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\15\10\1\277\13\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\24\10"+
    "\1\300\4\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\23\10\1\301\5\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\302\23\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\5\10\1\303\23\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\304\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\11\10\1\305\17\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\13\10"+
    "\1\306\15\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\1\10\1\307\27\10\4\0\1\10"+
    "\2\236\4\0\106\236\1\0\2\236\4\0\23\236\1\237"+
    "\21\236\1\310\40\236\25\0\2\240\6\0\5\240\5\0"+
    "\1\100\10\0\7\240\10\0\1\100\16\0\1\10\10\0"+
    "\1\10\12\0\2\10\6\0\14\10\1\311\2\10\4\0"+
    "\31\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\21\10\1\312\7\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\12\10\1\313"+
    "\16\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\5\10\1\314\23\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\13\10\1\315"+
    "\15\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\11\10\1\316\17\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\21\10\1\317"+
    "\7\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\5\10\1\320\23\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\23\10\1\321"+
    "\5\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\5\10\1\322\23\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\5\10\1\323"+
    "\23\10\4\0\2\10\10\0\1\10\12\0\2\10\6\0"+
    "\17\10\4\0\21\10\1\324\7\10\4\0\2\10\10\0"+
    "\1\10\12\0\2\10\6\0\17\10\4\0\6\10\1\325"+
    "\13\10\1\326\6\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\13\10\1\327\15\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\330\15\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\22\10\1\331\6\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\332\15\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\23\10\1\333\5\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\20\10\1\334\10\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\5\10\1\335\23\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\5\10\1\336\23\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\1\10\1\337\27\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\11\10\1\340\17\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\21\10\1\341\7\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\3\10\1\342\25\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\5\10\1\343\23\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\5\10\1\344\23\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\14\10\1\345\14\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\21\10\1\346\7\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\3\10\1\347\25\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\350\15\10\4\0\2\10\10\0\1\10\12\0"+
    "\2\10\6\0\17\10\4\0\5\10\1\351\23\10\4\0"+
    "\2\10\10\0\1\10\12\0\2\10\6\0\17\10\4\0"+
    "\13\10\1\352\15\10\4\0\1\10\2\310\4\353\106\310"+
    "\1\353\1\10\10\0\1\10\12\0\2\10\6\0\6\10"+
    "\1\354\10\10\4\0\31\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\23\10\1\355\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\3\10\1\356\25\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\5\10\1\357\23\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\6\10\1\360\22\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\11\10\1\361\17\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\15\10\1\362\13\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\23\10\1\363\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\22\10\1\364\6\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\11\10\1\365\17\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\23\10\1\366\5\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\5\10\1\367\23\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\24\10\1\370\4\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\23\10\1\371\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\23\10\1\372\5\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\23\10\1\373\5\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\21\10\1\374\7\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\15\10\1\375\13\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\23\10\1\376\5\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\15\10\1\377\13\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\23\10\1\u0100\5\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\2\10\1\u0101\26\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\11\10\1\u0102\17\10\4\0\2\10\10\0\1\10"+
    "\12\0\2\10\6\0\17\10\4\0\12\10\1\u0103\16\10"+
    "\4\0\2\10\10\0\1\10\12\0\2\10\6\0\17\10"+
    "\4\0\13\10\1\u0104\15\10\4\0\1\10\115\353\1\10"+
    "\10\0\1\10\12\0\2\10\6\0\11\10\1\u0105\5\10"+
    "\4\0\31\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\23\10\1\u0106\5\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\16\10"+
    "\1\u0107\12\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\25\10\1\u0108\3\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\u0109\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\13\10\1\u010a\15\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\21\10"+
    "\1\u010b\7\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\1\10\1\u010c\27\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\u010d\23\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\25\10\1\u010e\3\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\u010f\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\5\10\1\u0110\23\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\15\10"+
    "\1\u0111\13\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\10\10\1\u0112\6\10\4\0\31\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\7\10"+
    "\1\u0113\21\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\15\10\1\u0114\13\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\23\10"+
    "\1\u0115\5\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\5\10\1\u0116\23\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\11\10"+
    "\1\u0117\17\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\13\10\1\u0118\15\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\23\10"+
    "\1\u0119\5\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\21\10\1\u011a\7\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\7\10"+
    "\1\u011b\21\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\1\10\1\u011c\27\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\u011d\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\15\10\1\u011e\13\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\u011f\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\21\10\1\u0120\7\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\2\10"+
    "\1\u0121\26\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\7\10\1\u0122\21\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\2\10"+
    "\1\u0123\26\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\2\10\1\u0124\26\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\13\10"+
    "\1\u0125\15\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\13\10\1\u0126\15\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\1\10"+
    "\1\u0127\27\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\5\10\1\u0128\23\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\u0129\23\10\4\0\2\10\10\0\1\10\12\0\2\10"+
    "\6\0\17\10\4\0\7\10\1\u012a\21\10\4\0\2\10"+
    "\10\0\1\10\12\0\2\10\6\0\17\10\4\0\5\10"+
    "\1\u012b\23\10\4\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17017];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\2\1\1\11\1\1\5\11"+
    "\2\1\1\11\2\1\2\11\3\1\4\11\24\1\3\11"+
    "\2\1\1\11\1\0\1\11\1\0\2\11\2\1\1\11"+
    "\1\1\2\11\1\1\3\11\46\1\1\11\6\1\1\0"+
    "\53\1\1\0\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }

  private int nBrackets = 0;

  private boolean checkAhead(char c, int offset) {
      return this.zzMarkedPos + offset < this.zzBuffer.length && this.zzBuffer[(this.zzMarkedPos + offset)] == c;
  }

  private boolean checkBlock() {
      nBrackets = 0;
      if (checkAhead('[', 0)) {
          int n = 0;
          while (checkAhead('=', n + 1)) n++;
          if (checkAhead('[', n + 1)) {
              nBrackets = n;
              return true;
          }
      }
      return false;
  }

  private int checkBlockEnd() {
      int pos = zzMarkedPos;
      int end = zzEndRead;
      while(pos < end) {
          char c = zzBuffer[pos];
          if (c == ']') {
              pos++;
              int size = 0;
              while (pos < zzEndRead && zzBuffer[pos] == '=') {
                  size++;
                  pos++;
              }
              if (size == nBrackets && pos < zzEndRead && zzBuffer[pos] == ']') {
                  pos++;
                  break;
              }
              continue;
          }
          pos++;
      }
      return pos - zzMarkedPos;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LuaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public LuaToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return LuaToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return LuaToken.BAD_CHARACTER;
            }
            // fall through
          case 92: break;
          case 2:
            { return LuaToken.WHITESPACE;
            }
            // fall through
          case 93: break;
          case 3:
            { return LuaToken.NOT_OPERATOR;
            }
            // fall through
          case 94: break;
          case 4:
            { return LuaToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 95: break;
          case 5:
            { return LuaToken.IDENTIFIER;
            }
            // fall through
          case 96: break;
          case 6:
            { return LuaToken.MOD;
            }
            // fall through
          case 97: break;
          case 7:
            { return LuaToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 98: break;
          case 8:
            { return LuaToken.LPAREN;
            }
            // fall through
          case 99: break;
          case 9:
            { return LuaToken.RPAREN;
            }
            // fall through
          case 100: break;
          case 10:
            { return LuaToken.MULT;
            }
            // fall through
          case 101: break;
          case 11:
            { return LuaToken.PLUS;
            }
            // fall through
          case 102: break;
          case 12:
            { return LuaToken.COMMA;
            }
            // fall through
          case 103: break;
          case 13:
            { return LuaToken.MINUS;
            }
            // fall through
          case 104: break;
          case 14:
            { return LuaToken.DOT;
            }
            // fall through
          case 105: break;
          case 15:
            { return LuaToken.DIV;
            }
            // fall through
          case 106: break;
          case 16:
            { return LuaToken.INTEGER_LITERAL;
            }
            // fall through
          case 107: break;
          case 17:
            { return LuaToken.COLON;
            }
            // fall through
          case 108: break;
          case 18:
            { return LuaToken.SEMICOLON;
            }
            // fall through
          case 109: break;
          case 19:
            { return LuaToken.LT;
            }
            // fall through
          case 110: break;
          case 20:
            { return LuaToken.EQ;
            }
            // fall through
          case 111: break;
          case 21:
            { return LuaToken.GT;
            }
            // fall through
          case 112: break;
          case 22:
            { return LuaToken.QUEST;
            }
            // fall through
          case 113: break;
          case 23:
            { if (checkAhead('=', 0) || checkAhead('[', 0)) {
            yypushback(yylength());
            checkBlock();
            zzMarkedPos += checkBlockEnd();
            return LuaToken.DOUBLE_QUOTED_STRING;
        } else {
            return LuaToken.LBRACK;
        }
            }
            // fall through
          case 114: break;
          case 24:
            { return LuaToken.RBRACK;
            }
            // fall through
          case 115: break;
          case 25:
            { return LuaToken.XOR;
            }
            // fall through
          case 116: break;
          case 26:
            { return LuaToken.LBRACE;
            }
            // fall through
          case 117: break;
          case 27:
            { return LuaToken.OR;
            }
            // fall through
          case 118: break;
          case 28:
            { return LuaToken.RBRACE;
            }
            // fall through
          case 119: break;
          case 29:
            { return LuaToken.TILDE;
            }
            // fall through
          case 120: break;
          case 30:
            { boolean block = checkBlock();
          if (block) {
              yypushback(yylength());
              zzMarkedPos += checkBlockEnd();
              return LuaToken.BLOCK_COMMENT;
          } else {
              yypushback(yylength());
              yybegin(COMMENT);
          }
            }
            // fall through
          case 121: break;
          case 31:
            { return LuaToken.CONCAT;
            }
            // fall through
          case 122: break;
          case 32:
            { return LuaToken.DOUBLE_LITERAL;
            }
            // fall through
          case 123: break;
          case 33:
            { return LuaToken.FLOAT_LITERAL;
            }
            // fall through
          case 124: break;
          case 34:
            { return LuaToken.LONG_LITERAL;
            }
            // fall through
          case 125: break;
          case 35:
            { return LuaToken.LTEQ;
            }
            // fall through
          case 126: break;
          case 36:
            { return LuaToken.EQEQ;
            }
            // fall through
          case 127: break;
          case 37:
            { return LuaToken.GTEQ;
            }
            // fall through
          case 128: break;
          case 38:
            { return LuaToken._G;
            }
            // fall through
          case 129: break;
          case 39:
            { return LuaToken.DO;
            }
            // fall through
          case 130: break;
          case 40:
            { return LuaToken.IF;
            }
            // fall through
          case 131: break;
          case 41:
            { return LuaToken.IN;
            }
            // fall through
          case 132: break;
          case 42:
            { return LuaToken.TILDEEQ;
            }
            // fall through
          case 133: break;
          case 43:
            { yybegin(YYINITIAL); return LuaToken.LINE_COMMENT;
            }
            // fall through
          case 134: break;
          case 44:
            { return LuaToken.AND;
            }
            // fall through
          case 135: break;
          case 45:
            { return LuaToken.END;
            }
            // fall through
          case 136: break;
          case 46:
            { return LuaToken.FOR;
            }
            // fall through
          case 137: break;
          case 47:
            { return LuaToken.NIL;
            }
            // fall through
          case 138: break;
          case 48:
            { return LuaToken.NOT;
            }
            // fall through
          case 139: break;
          case 49:
            { return LuaToken.ELSE;
            }
            // fall through
          case 140: break;
          case 50:
            { return LuaToken.GOTO;
            }
            // fall through
          case 141: break;
          case 51:
            { return LuaToken.LOAD;
            }
            // fall through
          case 142: break;
          case 52:
            { return LuaToken.NEXT;
            }
            // fall through
          case 143: break;
          case 53:
            { return LuaToken.NULL;
            }
            // fall through
          case 144: break;
          case 54:
            { return LuaToken.THEN;
            }
            // fall through
          case 145: break;
          case 55:
            { return LuaToken.TRUE;
            }
            // fall through
          case 146: break;
          case 56:
            { return LuaToken.TYPE;
            }
            // fall through
          case 147: break;
          case 57:
            { return LuaToken.BREAK;
            }
            // fall through
          case 148: break;
          case 58:
            { return LuaToken.ERROR;
            }
            // fall through
          case 149: break;
          case 59:
            { return LuaToken.FALSE;
            }
            // fall through
          case 150: break;
          case 60:
            { return LuaToken.LOCAL;
            }
            // fall through
          case 151: break;
          case 61:
            { return LuaToken.PAIRS;
            }
            // fall through
          case 152: break;
          case 62:
            { return LuaToken.PCALL;
            }
            // fall through
          case 153: break;
          case 63:
            { return LuaToken.PRINT;
            }
            // fall through
          case 154: break;
          case 64:
            { return LuaToken.UNTIL;
            }
            // fall through
          case 155: break;
          case 65:
            { return LuaToken.WHILE;
            }
            // fall through
          case 156: break;
          case 66:
            { yybegin(YYINITIAL); return LuaToken.BLOCK_COMMENT;
            }
            // fall through
          case 157: break;
          case 67:
            { return LuaToken.ASSERT;
            }
            // fall through
          case 158: break;
          case 68:
            { return LuaToken.DOFILE;
            }
            // fall through
          case 159: break;
          case 69:
            { return LuaToken.ELSEIF;
            }
            // fall through
          case 160: break;
          case 70:
            { return LuaToken.IPAIRS;
            }
            // fall through
          case 161: break;
          case 71:
            { return LuaToken.MODULE;
            }
            // fall through
          case 162: break;
          case 72:
            { return LuaToken.RAWGET;
            }
            // fall through
          case 163: break;
          case 73:
            { return LuaToken.RAWSET;
            }
            // fall through
          case 164: break;
          case 74:
            { return LuaToken.REPEAT;
            }
            // fall through
          case 165: break;
          case 75:
            { return LuaToken.RETURN;
            }
            // fall through
          case 166: break;
          case 76:
            { return LuaToken.SELECT;
            }
            // fall through
          case 167: break;
          case 77:
            { return LuaToken.UNPACK;
            }
            // fall through
          case 168: break;
          case 78:
            { return LuaToken.XPCALL;
            }
            // fall through
          case 169: break;
          case 79:
            { return LuaToken.GETFENV;
            }
            // fall through
          case 170: break;
          case 80:
            { return LuaToken.REQUIRE;
            }
            // fall through
          case 171: break;
          case 81:
            { return LuaToken.SETFENV;
            }
            // fall through
          case 172: break;
          case 82:
            { return LuaToken._VERSION;
            }
            // fall through
          case 173: break;
          case 83:
            { return LuaToken.FUNCTION;
            }
            // fall through
          case 174: break;
          case 84:
            { return LuaToken.LOADFILE;
            }
            // fall through
          case 175: break;
          case 85:
            { return LuaToken.RAWEQUAL;
            }
            // fall through
          case 176: break;
          case 86:
            { return LuaToken.TONUMBER;
            }
            // fall through
          case 177: break;
          case 87:
            { return LuaToken.TOSTRING;
            }
            // fall through
          case 178: break;
          case 88:
            { return LuaToken.LOADSTRING;
            }
            // fall through
          case 179: break;
          case 89:
            { return LuaToken.GETMETATABLE;
            }
            // fall through
          case 180: break;
          case 90:
            { return LuaToken.SETMETATABLE;
            }
            // fall through
          case 181: break;
          case 91:
            { return LuaToken.COLLECTGARBAGE;
            }
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
