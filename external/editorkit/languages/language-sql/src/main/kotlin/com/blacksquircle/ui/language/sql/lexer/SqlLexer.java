/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.sql.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>sql.flex</tt>
 */
public class SqlLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\3\u2000"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u2000\1\u4000\1\u4100"+
    "\4\u2000\1\u4200\11\u2000\3\u1100\1\u4300\1\u4400\13\u2000\4\u1100"+
    "\1\u4500\63\u2000\2\u1100\1\u4600\4\u2000\1\u4700\100\u2000\1\u4800"+
    "\40\u2000\1\u4900\1\u4a00\1\u2000\1\u4b00\1\u4c00\1\u4d00\1\u4e00"+
    "\26\u2000\1\u4f00\21\u2000\246\u1100\1\u5000\20\u1100\1\u5100\1\u5200"+
    "\77\u2000\2\u1100\1\u5200\u0b05\u2000\1\u5300\1\u5400\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\2\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\22\1\25\3\22\1\26\1\22\1\6"+
    "\1\27\1\30\1\31\1\32\2\6\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\10\1\64"+
    "\1\65\1\66\1\6\1\67\1\70\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\10\4\6"+
    "\6\0\1\71\32\0\2\6\4\10\4\6\1\10\2\6"+
    "\1\0\7\6\1\10\4\6\1\10\5\6\27\10\1\6"+
    "\37\10\1\6\70\10\2\43\115\10\1\55\u0142\10\4\6"+
    "\14\10\16\6\5\10\7\6\1\10\1\6\1\10\21\6"+
    "\160\0\5\10\1\6\2\10\2\6\4\10\10\6\1\10"+
    "\1\6\3\10\1\6\1\10\1\6\24\10\1\6\123\10"+
    "\1\6\213\10\1\6\5\0\2\6\236\10\11\6\46\10"+
    "\2\6\1\10\7\6\47\10\7\6\1\10\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\10\5\6\3\10\15\6\5\0\6\6\1\10"+
    "\4\6\13\0\5\6\53\10\37\0\4\6\2\10\1\0"+
    "\143\10\1\6\1\10\10\0\1\6\6\0\2\10\2\0"+
    "\1\6\4\0\2\10\12\0\3\10\2\6\1\10\17\6"+
    "\1\0\1\10\1\0\36\10\33\0\2\6\131\10\13\0"+
    "\1\10\16\6\12\0\41\10\11\0\2\10\4\6\1\10"+
    "\5\6\26\10\4\0\1\10\11\0\1\10\3\0\1\10"+
    "\5\0\22\6\31\10\3\0\104\6\1\10\1\6\13\10"+
    "\67\6\33\0\1\6\4\0\66\10\3\0\1\10\22\0"+
    "\1\10\7\0\12\10\2\0\2\6\12\0\1\6\7\10"+
    "\1\6\7\10\1\6\3\0\1\6\10\10\2\6\2\10"+
    "\2\6\26\10\1\6\7\10\1\6\1\10\3\6\4\10"+
    "\2\6\1\0\1\10\7\0\2\6\2\0\2\6\3\0"+
    "\1\10\10\6\1\0\4\6\2\10\1\6\3\10\2\0"+
    "\2\6\12\0\4\10\7\6\1\10\5\6\3\0\1\6"+
    "\6\10\4\6\2\10\2\6\26\10\1\6\7\10\1\6"+
    "\2\10\1\6\2\10\1\6\2\10\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\10\1\6\1\10\7\6\14\0\3\10\1\0\13\6"+
    "\3\0\1\6\11\10\1\6\3\10\1\6\26\10\1\6"+
    "\7\10\1\6\2\10\1\6\5\10\2\6\1\0\1\10"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\10\17\6"+
    "\2\10\2\0\2\6\12\0\1\6\1\10\17\6\3\0"+
    "\1\6\10\10\2\6\2\10\2\6\26\10\1\6\7\10"+
    "\1\6\2\10\1\6\5\10\2\6\1\0\1\10\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\2\0\4\6\2\10"+
    "\1\6\3\10\2\0\2\6\12\0\1\6\1\10\20\6"+
    "\1\0\1\10\1\6\6\10\3\6\3\10\1\6\4\10"+
    "\3\6\2\10\1\6\1\10\1\6\2\10\3\6\2\10"+
    "\3\6\3\10\3\6\14\10\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\10\6\6\1\0\16\6\12\0"+
    "\11\6\1\10\7\6\3\0\1\6\10\10\1\6\3\10"+
    "\1\6\27\10\1\6\12\10\1\6\5\10\3\6\1\10"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\1\6"+
    "\2\10\6\6\2\10\2\0\2\6\12\0\22\6\2\0"+
    "\1\6\10\10\1\6\3\10\1\6\27\10\1\6\12\10"+
    "\1\6\5\10\2\6\1\0\1\10\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\10\1\6\2\10"+
    "\2\0\2\6\12\0\1\6\2\10\17\6\2\0\1\6"+
    "\10\10\1\6\3\10\1\6\51\10\2\6\1\10\7\0"+
    "\1\6\3\0\1\6\4\0\1\10\10\6\1\0\10\6"+
    "\2\10\2\0\2\6\12\0\12\6\6\10\2\6\2\0"+
    "\1\6\22\10\3\6\30\10\1\6\11\10\1\6\1\10"+
    "\2\6\7\10\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\22\6\2\0\15\6\60\10\1\0\2\10"+
    "\7\0\4\6\10\10\10\0\1\6\12\0\47\6\2\10"+
    "\1\6\1\10\2\6\2\10\1\6\1\10\2\6\1\10"+
    "\6\6\4\10\1\6\7\10\1\6\3\10\1\6\1\10"+
    "\1\6\1\10\2\6\2\10\1\6\4\10\1\0\2\10"+
    "\6\0\1\6\2\0\1\10\2\6\5\10\1\6\1\10"+
    "\1\6\6\0\2\6\12\0\2\6\4\10\40\6\1\10"+
    "\27\6\2\0\6\6\12\0\13\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\2\0\10\10\1\6\44\10\4\6"+
    "\24\0\1\6\2\0\5\10\13\0\1\6\44\0\11\6"+
    "\1\0\71\6\53\10\24\0\1\10\12\0\6\6\6\10"+
    "\4\0\4\10\3\0\1\10\3\0\2\10\7\0\3\10"+
    "\4\0\15\10\14\0\1\10\17\0\2\6\46\10\1\6"+
    "\1\10\5\6\1\10\2\6\53\10\1\6\u014d\10\1\6"+
    "\4\10\2\6\7\10\1\6\1\10\1\6\4\10\2\6"+
    "\51\10\1\6\4\10\2\6\41\10\1\6\4\10\2\6"+
    "\7\10\1\6\1\10\1\6\4\10\2\6\17\10\1\6"+
    "\71\10\1\6\4\10\2\6\103\10\2\6\3\0\40\6"+
    "\20\10\20\6\125\10\14\6\u016c\10\2\6\21\10\1\6"+
    "\32\10\5\6\113\10\3\6\3\10\17\6\15\10\1\6"+
    "\4\10\3\0\13\6\22\10\3\0\13\6\22\10\2\0"+
    "\14\6\15\10\1\6\3\10\1\6\2\0\14\6\64\10"+
    "\40\0\3\6\1\10\3\6\2\10\1\0\2\6\12\0"+
    "\41\6\3\0\2\6\12\0\6\6\130\10\10\6\51\10"+
    "\1\0\1\10\5\6\106\10\12\6\35\10\3\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\10\2\6\5\10\13\6"+
    "\54\10\4\6\21\0\7\10\2\0\6\6\12\0\46\6"+
    "\27\10\5\0\4\6\65\10\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\10\130\6\5\0\57\10"+
    "\21\0\7\10\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\10\15\0\2\10\12\0\54\10\16\0\14\6\44\10"+
    "\24\0\10\6\12\0\3\6\3\10\12\0\44\10\122\6"+
    "\3\0\1\6\25\0\4\10\1\0\4\10\3\0\2\10"+
    "\11\6\300\10\47\0\25\6\4\0\26\10\2\6\6\10"+
    "\2\6\46\10\2\6\6\10\2\6\10\10\1\6\1\10"+
    "\1\6\1\10\1\6\1\10\1\6\37\10\2\6\65\10"+
    "\1\6\7\10\1\6\1\10\3\6\3\10\1\6\7\10"+
    "\3\6\4\10\2\6\6\10\4\6\15\10\5\6\3\10"+
    "\1\6\7\10\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\10\23\6\1\10\13\6\5\0\5\6\6\0\1\6"+
    "\1\10\15\6\1\10\20\6\15\10\3\6\33\10\25\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\10\4\6"+
    "\1\10\2\6\12\10\1\6\1\10\3\6\5\10\6\6"+
    "\1\10\1\6\1\10\1\6\1\10\1\6\1\45\3\10"+
    "\1\6\13\10\2\6\4\10\5\6\5\10\4\6\1\10"+
    "\21\6\51\10\u0177\6\57\10\1\6\57\10\1\6\205\10"+
    "\6\6\4\10\3\0\2\10\14\6\46\10\1\6\1\10"+
    "\5\6\1\10\2\6\70\10\7\6\1\10\17\6\1\0"+
    "\27\10\11\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\7\10\1\6\7\10\1\6\7\10\1\6\7\10\1\6"+
    "\7\10\1\6\40\0\57\6\1\10\325\6\3\10\31\6"+
    "\11\10\6\0\1\6\5\10\2\6\5\10\4\6\126\10"+
    "\2\6\2\0\2\6\3\10\1\6\132\10\1\6\4\10"+
    "\5\6\51\10\3\6\136\10\21\6\33\10\65\6\306\10"+
    "\112\6\315\10\63\6\215\10\103\6\56\10\2\6\15\10"+
    "\3\6\20\10\12\0\2\10\24\6\57\10\1\0\4\6"+
    "\12\0\1\6\31\10\7\6\1\0\120\10\2\0\45\6"+
    "\11\10\2\6\147\10\2\6\4\10\1\6\4\10\14\6"+
    "\13\10\115\6\12\10\1\0\3\10\1\0\4\10\1\0"+
    "\27\10\5\0\20\6\1\10\7\6\64\10\14\6\2\0"+
    "\62\10\21\0\13\6\12\0\6\6\22\0\6\10\3\6"+
    "\1\10\4\6\12\0\34\10\10\0\2\6\27\10\15\0"+
    "\14\6\35\10\3\6\4\0\57\10\16\0\16\6\1\10"+
    "\12\0\46\6\51\10\16\0\11\6\3\10\1\0\10\10"+
    "\2\0\2\6\12\0\6\6\27\10\3\6\1\10\1\0"+
    "\4\6\60\10\1\0\1\10\3\0\2\10\2\0\5\10"+
    "\2\0\1\10\1\0\1\10\30\6\3\10\2\6\13\10"+
    "\5\0\2\6\3\10\2\0\12\6\6\10\2\6\6\10"+
    "\2\6\6\10\11\6\7\10\1\6\7\10\221\6\43\10"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\10\14\6"+
    "\27\10\4\6\61\10\4\6\u0100\3\156\10\2\6\152\10"+
    "\46\6\7\10\14\6\5\10\5\6\1\10\1\0\12\10"+
    "\1\6\15\10\1\6\5\10\1\6\1\10\1\6\2\10"+
    "\1\6\2\10\1\6\154\10\41\6\153\10\22\6\100\10"+
    "\2\6\66\10\50\6\15\10\3\6\20\0\20\6\7\0"+
    "\14\6\2\10\30\6\3\10\31\6\1\10\6\6\5\10"+
    "\1\6\207\10\2\6\1\0\4\6\1\10\13\6\12\0"+
    "\7\6\32\10\4\6\1\10\1\6\32\10\13\6\131\10"+
    "\3\6\6\10\2\6\6\10\2\6\6\10\2\6\3\10"+
    "\3\6\2\10\3\6\2\10\22\6\3\0\4\6\14\10"+
    "\1\6\32\10\1\6\23\10\1\6\2\10\1\6\17\10"+
    "\2\6\16\10\42\6\173\10\105\6\65\10\210\6\1\0"+
    "\202\6\35\10\3\6\61\10\57\6\37\10\21\6\33\10"+
    "\65\6\36\10\2\6\44\10\4\6\10\10\1\6\5\10"+
    "\52\6\236\10\2\6\12\0\126\6\6\10\2\6\1\10"+
    "\1\6\54\10\1\6\2\10\3\6\1\10\2\6\27\10"+
    "\252\6\26\10\12\6\32\10\106\6\70\10\6\6\2\10"+
    "\100\6\1\10\3\0\1\6\2\0\5\6\4\0\4\10"+
    "\1\6\3\10\1\6\33\10\4\6\3\0\4\6\1\0"+
    "\40\6\35\10\203\6\66\10\12\6\26\10\12\6\23\10"+
    "\215\6\111\10\267\6\3\0\65\10\17\0\37\6\12\0"+
    "\20\6\3\0\55\10\13\0\2\6\1\0\22\6\31\10"+
    "\7\6\12\0\6\6\3\0\44\10\16\0\1\6\12\0"+
    "\100\6\3\0\60\10\16\0\4\10\13\6\12\0\246\6"+
    "\53\10\15\0\10\6\12\0\66\6\157\10\221\6\143\10"+
    "\235\6\57\10\321\6\71\10\307\6\105\10\13\6\1\10"+
    "\56\0\20\6\4\0\15\10\140\6\2\10\u0163\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\10\1\6\107\10\1\6\2\10\2\6\1\10"+
    "\2\6\2\10\2\6\4\10\1\6\14\10\1\6\1\10"+
    "\1\6\7\10\1\6\101\10\1\6\4\10\2\6\10\10"+
    "\1\6\7\10\1\6\34\10\1\6\4\10\1\6\5\10"+
    "\1\6\1\10\3\6\7\10\1\6\u0154\10\2\6\31\10"+
    "\1\6\31\10\1\6\37\10\1\6\31\10\1\6\37\10"+
    "\1\6\31\10\1\6\37\10\1\6\31\10\1\6\37\10"+
    "\1\6\31\10\1\6\10\10\2\6\62\0\4\10\1\6"+
    "\33\10\1\6\2\10\1\6\1\10\2\6\1\10\1\6"+
    "\12\10\1\6\4\10\1\6\1\10\1\6\1\10\6\6"+
    "\1\10\4\6\1\10\1\6\1\10\1\6\1\10\1\6"+
    "\3\10\1\6\2\10\1\6\1\10\2\6\1\10\1\6"+
    "\1\10\1\6\1\10\1\6\1\10\1\6\1\10\1\6"+
    "\2\10\1\6\1\10\2\6\4\10\1\6\7\10\1\6"+
    "\4\10\1\6\4\10\1\6\1\10\1\6\12\10\1\6"+
    "\21\10\5\6\3\10\1\6\5\10\1\6\21\10\104\6"+
    "\327\10\51\6\65\10\13\6\336\10\343\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21760];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\27\4\1\23\1\24\1\25\1\3"+
    "\1\0\1\5\1\0\1\26\1\27\1\0\2\27\1\30"+
    "\1\31\1\32\1\33\3\4\1\34\6\4\1\35\21\4"+
    "\1\36\2\4\1\37\1\40\15\4\1\41\1\4\1\42"+
    "\37\4\2\3\2\5\1\0\1\27\1\43\1\44\1\4"+
    "\1\45\1\46\1\47\1\4\1\50\1\51\2\4\1\52"+
    "\31\4\1\53\3\4\1\54\1\4\1\55\6\4\1\56"+
    "\1\4\1\57\1\60\1\4\1\61\23\4\1\62\7\4"+
    "\1\63\4\4\1\64\10\4\1\65\4\4\1\66\5\4"+
    "\1\67\1\4\1\70\1\71\10\4\1\72\1\4\1\73"+
    "\3\4\1\74\4\4\1\75\2\4\1\76\6\4\1\77"+
    "\1\100\1\101\1\4\1\102\1\4\1\103\1\4\1\104"+
    "\1\4\1\105\16\4\1\106\7\4\1\107\5\4\1\110"+
    "\1\111\1\4\1\112\1\113\4\4\1\114\3\4\1\115"+
    "\1\116\1\4\1\117\1\4\1\120\13\4\1\121\12\4"+
    "\1\122\2\4\1\123\2\4\1\124\1\125\2\4\1\126"+
    "\3\4\1\127\1\130\5\4\1\131\1\132\4\4\1\133"+
    "\3\4\1\134\2\4\1\135\2\4\1\136\3\4\1\137"+
    "\2\4\1\140\2\4\1\141\1\142\2\4\1\143\1\144"+
    "\2\4\1\145\4\4\1\146\4\4\1\147\3\4\1\150"+
    "\2\4\1\151\1\152\1\4\1\153\1\154\2\4\1\155"+
    "\1\156\1\157\4\4\1\160\3\4\1\161\7\4\1\162"+
    "\1\4\1\163\1\4\1\164\1\165\6\4\1\166\1\167"+
    "\1\170\3\4\1\171\1\4\1\172\4\4\1\173\1\174"+
    "\6\4\1\175\1\176\1\177\1\200\1\201\2\4\1\202"+
    "\5\4\1\203\1\4\1\204\5\4\1\205\4\4\1\206"+
    "\6\4\1\207\1\4\1\210\1\211\1\212\1\213\1\214"+
    "\1\215\1\216\1\4\1\217\4\4\1\220\1\221\2\4"+
    "\1\222\10\4\1\223\11\4\1\224\4\4\1\225\1\4"+
    "\1\226\1\227\1\230\1\231\1\4\1\232\2\4\1\233"+
    "\4\4\1\234\2\4\1\235\1\236\3\4\1\237\1\240"+
    "\3\4\1\241\1\4\1\242\1\4\1\243\1\4\1\244"+
    "\1\245\1\246\1\247\1\250\1\251\4\4\1\252";

  private static int [] zzUnpackAction() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\72"+
    "\0\72\0\72\0\72\0\72\0\u015c\0\u0196\0\u01d0\0\u020a"+
    "\0\72\0\u0244\0\72\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\72\0\72\0\72\0\72\0\u07ee"+
    "\0\72\0\u0828\0\u0862\0\u089c\0\u08d6\0\72\0\u0910\0\72"+
    "\0\72\0\72\0\72\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\350"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\350\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\350\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\350\0\350\0\u1c18\0\350\0\350\0\350\0\u1c52"+
    "\0\350\0\350\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\350\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\350\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\350\0\u2562\0\350\0\350\0\u259c"+
    "\0\350\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732"+
    "\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\350\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\350\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\350\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\72"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\350\0\u30b6\0\350"+
    "\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286"+
    "\0\u32c0\0\u32fa\0\u3334\0\350\0\u336e\0\u33a8\0\u33e2\0\350"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\350\0\u3504\0\u353e\0\350"+
    "\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\350\0\350"+
    "\0\350\0\u36d4\0\350\0\u370e\0\u3748\0\u3782\0\350\0\u37bc"+
    "\0\350\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\350"+
    "\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\350"+
    "\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\350\0\u3dda\0\u3e14"+
    "\0\350\0\350\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\350\0\u3f36"+
    "\0\u3f70\0\u3faa\0\350\0\350\0\u3fe4\0\350\0\u401e\0\350"+
    "\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee"+
    "\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be"+
    "\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e"+
    "\0\u45c8\0\350\0\u4602\0\u463c\0\350\0\350\0\u4676\0\u46b0"+
    "\0\350\0\u46ea\0\u4724\0\u475e\0\350\0\350\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\350\0\350\0\u48ba\0\u48f4\0\u492e"+
    "\0\u4968\0\350\0\u49a2\0\u49dc\0\u4a16\0\350\0\u4a50\0\u4a8a"+
    "\0\350\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20"+
    "\0\u4c5a\0\u4c94\0\350\0\u4cce\0\u4d08\0\350\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\350\0\350\0\u4df0\0\u4e2a\0\350\0\u4e64\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\350\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\350"+
    "\0\u5034\0\u506e\0\u50a8\0\350\0\u50e2\0\u511c\0\350\0\350"+
    "\0\u5156\0\350\0\350\0\u5190\0\u51ca\0\350\0\350\0\350"+
    "\0\u5204\0\u523e\0\u5278\0\u52b2\0\350\0\u52ec\0\u5326\0\u5360"+
    "\0\350\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6"+
    "\0\350\0\u5530\0\350\0\u556a\0\350\0\350\0\u55a4\0\u55de"+
    "\0\u5618\0\u5652\0\u568c\0\u56c6\0\350\0\350\0\350\0\u5700"+
    "\0\u573a\0\u5774\0\350\0\u57ae\0\350\0\u57e8\0\u5822\0\u585c"+
    "\0\u5896\0\350\0\350\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8"+
    "\0\u59f2\0\350\0\350\0\350\0\u5a2c\0\350\0\u5a66\0\u5aa0"+
    "\0\350\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\350\0\u5bfc"+
    "\0\350\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\350\0\u5d58"+
    "\0\u5d92\0\u5dcc\0\u5e06\0\350\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee"+
    "\0\u5f28\0\u5f62\0\350\0\u5f9c\0\350\0\350\0\350\0\u5fd6"+
    "\0\350\0\350\0\350\0\u6010\0\350\0\u604a\0\u6084\0\u60be"+
    "\0\u60f8\0\350\0\350\0\u6132\0\u616c\0\350\0\u61a6\0\u61e0"+
    "\0\u621a\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c\0\350\0\u6376"+
    "\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546"+
    "\0\350\0\u6580\0\u65ba\0\u65f4\0\u662e\0\350\0\u6668\0\350"+
    "\0\350\0\350\0\350\0\u66a2\0\350\0\u66dc\0\u6716\0\350"+
    "\0\u6750\0\u678a\0\u67c4\0\u67fe\0\350\0\u6838\0\u6872\0\350"+
    "\0\350\0\u68ac\0\u68e6\0\u6920\0\350\0\350\0\u695a\0\u6994"+
    "\0\u69ce\0\350\0\u6a08\0\350\0\u6a42\0\350\0\u6a7c\0\350"+
    "\0\u6ab6\0\350\0\350\0\350\0\350\0\u6af0\0\u6b2a\0\u6b64"+
    "\0\u6b9e\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\5\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\6\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\6\1\53\1\54"+
    "\1\2\1\55\1\6\1\56\1\2\74\0\1\3\67\0"+
    "\2\5\1\0\2\5\1\0\1\5\1\57\55\5\1\60"+
    "\4\5\1\6\7\0\1\6\11\0\5\6\4\0\31\6"+
    "\3\0\1\6\1\0\1\6\2\7\1\0\2\7\1\0"+
    "\3\7\1\61\53\7\1\62\4\7\17\0\1\63\74\0"+
    "\5\64\57\0\1\65\75\0\1\64\1\0\5\20\7\0"+
    "\1\66\1\67\1\70\26\0\1\20\33\0\1\71\1\72"+
    "\70\0\1\73\40\0\1\6\7\0\1\6\11\0\5\6"+
    "\4\0\3\6\1\74\7\6\1\75\1\6\1\76\4\6"+
    "\1\77\1\6\1\100\1\101\3\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\102"+
    "\3\6\1\103\2\6\1\104\2\6\1\105\11\6\1\106"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\7\6\1\107\6\6\1\110\2\6\1\111\2\6"+
    "\1\112\4\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\113\3\6\1\114\3\6\1\115"+
    "\5\6\1\116\2\6\1\117\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\27\6\1\120"+
    "\1\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\13\6\1\121\2\6\1\122\2\6\1\123"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\124\14\6\1\125\2\6\1\126"+
    "\4\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\1\127\30\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\5\6\1\130\1\131"+
    "\5\6\1\132\1\133\4\6\1\134\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\16\6"+
    "\1\135\12\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\136\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\137\3\6\1\140\5\6\1\141\12\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\142"+
    "\3\6\1\143\3\6\1\144\5\6\1\145\12\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\16\6\1\146\5\6\1\147\4\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\2\6\1\150"+
    "\10\6\1\151\1\6\1\152\1\6\1\153\1\6\1\154"+
    "\2\6\1\155\1\6\1\156\2\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\1\157\3\6"+
    "\1\160\3\6\1\161\5\6\1\162\2\6\1\163\7\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\4\6\1\164\3\6\1\165\20\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\166\2\6\1\167\1\170\3\6\1\171\1\6\1\172"+
    "\4\6\1\173\1\174\3\6\1\175\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\1\176\3\6"+
    "\1\177\3\6\1\200\5\6\1\201\2\6\1\202\6\6"+
    "\1\203\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\204\1\6\1\205\2\6\1\206"+
    "\6\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\1\207\7\6\1\210\20\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\7\6"+
    "\1\211\1\212\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\213\24\6\3\0"+
    "\1\6\1\0\1\6\1\5\1\214\2\5\1\214\1\215"+
    "\64\5\1\7\1\216\2\7\1\216\1\217\64\7\2\63"+
    "\4\0\63\63\23\0\5\64\7\0\1\66\1\67\1\70"+
    "\26\0\1\64\2\0\14\65\1\220\55\65\15\0\1\221"+
    "\1\0\1\221\2\0\5\221\7\0\1\66\1\0\1\70"+
    "\26\0\1\221\2\0\1\6\7\0\1\6\11\0\5\6"+
    "\4\0\3\6\1\222\25\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\13\6\1\223\7\6"+
    "\1\224\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\3\6\1\225\24\6\1\226\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\2\6\1\227\26\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\230\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\231\5\6\1\232\22\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\233\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\15\6\1\234\5\6\1\235\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\16\6"+
    "\1\236\12\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\16\6\1\237\12\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\23\6"+
    "\1\240\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\241\30\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\242"+
    "\1\6\1\243\6\6\1\244\4\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\245"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\21\6\1\246\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\23\6\1\247"+
    "\5\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\13\6\1\250\6\6\1\251\6\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\22\6\1\252\6\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\24\6\1\253\4\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\16\6\1\254\12\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\255\12\6\1\256"+
    "\5\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\16\6\1\257\12\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\21\6\1\260"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\16\6\1\261\12\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\15\6\1\262"+
    "\13\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\16\6\1\263\12\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\10\6\1\264"+
    "\20\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\25\6\1\265\3\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\15\6\1\266"+
    "\13\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\17\6\1\267\11\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\3\6\1\270"+
    "\11\6\1\271\4\6\1\272\1\273\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\10\6"+
    "\1\274\20\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\30\6\1\275\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\5\6\1\276"+
    "\17\6\1\277\3\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\12\6\1\300\16\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\6\6\1\301\6\6\1\302\10\6\1\303\2\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\27\6\1\304\1\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\14\6\1\305\14\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\306\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\3\6\1\307\11\6\1\310"+
    "\13\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\311\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\312"+
    "\1\313\14\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\23\6\1\314\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\315\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\23\6\1\316\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\3\6"+
    "\1\317\25\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\23\6\1\320\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\15\6"+
    "\1\321\13\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\322\1\323\6\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\324\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\25\6\1\325\3\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\22\6\1\326\6\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\327\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\330\4\6\1\331\23\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\6\6\1\332\22\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\13\6\1\333\6\6\1\334\1\335\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\16\6\1\336\12\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\15\6\1\337\13\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\340\30\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\14\6\1\341\14\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\3\6"+
    "\1\342\15\6\1\343\7\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\6\1\344\12\6"+
    "\1\345\14\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\346\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\6"+
    "\1\347\27\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\27\6\1\350\1\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\14\6"+
    "\1\351\14\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\17\6\1\352\11\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\353"+
    "\7\6\1\354\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\17\6\1\355\11\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\10\6\1\356\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\3\6\1\357\13\6\1\360"+
    "\11\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\361\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\362"+
    "\5\6\1\363\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\364\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\365\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\366\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\22\6\1\367\6\6\3\0\1\6\1\0\1\6\1\5"+
    "\1\214\2\5\1\214\1\215\1\5\1\57\55\5\1\60"+
    "\11\5\1\0\1\5\1\57\55\5\1\60\4\5\1\7"+
    "\1\216\2\7\1\216\1\217\3\7\1\61\53\7\1\62"+
    "\11\7\1\0\3\7\1\61\53\7\1\62\4\7\14\65"+
    "\1\220\4\65\1\370\50\65\22\0\5\221\7\0\1\66"+
    "\1\0\1\70\26\0\1\221\2\0\1\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\371\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\16\6"+
    "\1\372\12\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\26\6\1\373\2\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\374"+
    "\30\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\31\6\3\0\1\375\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\1\6\1\376\27\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\13\6\1\377\15\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u0100\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u0101\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\24\6\1\u0102\4\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\2\6\1\u0103\17\6\1\u0104\2\6\1\u0105\3\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u0106\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\1\u0107\30\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\21\6"+
    "\1\u0108\7\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\u0109\3\6\1\u010a\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u010b\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\2\6\1\u010c\26\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\u010d\22\6\1\u010e\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\6\1\u010f\27\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\17\6\1\u0110\11\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\22\6\1\u0111\6\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\21\6\1\u0112\7\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u0113\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u0114\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\14\6\1\u0115\14\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u0116\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\24\6\1\u0117\4\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\3\6\1\u0118\25\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u0119\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\16\6\1\u011a\12\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u011b\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u011c\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u011d\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u011e\11\6\1\u011f\12\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\15\6\1\u0120"+
    "\13\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\u0121\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u0122"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\u0123\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\10\6\1\u0124"+
    "\20\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\6\6\1\u0125\22\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u0126"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\16\6\1\u0127\12\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u0128"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\13\6\1\u0129\15\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\1\6\1\u012a"+
    "\2\6\1\u012b\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u012c\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\16\6\1\u012d\12\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u012e\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u012f\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u0130\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u0131\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\1\u0132\30\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\22\6"+
    "\1\u0133\6\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\2\6\1\u0134\26\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\16\6"+
    "\1\u0135\12\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\10\6\1\u0136\20\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\14\6"+
    "\1\u0137\14\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\13\6\1\u0138\15\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0139\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\7\6\1\u013a\21\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u013b\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\u013c\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\21\6"+
    "\1\u013d\7\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\6\6\1\u013e\22\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\13\6"+
    "\1\u013f\15\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u0140\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0141\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\10\6\1\u0142\20\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\22\6"+
    "\1\u0143\6\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\23\6\1\u0144\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\13\6"+
    "\1\u0145\15\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\23\6\1\u0146\5\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0147\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\15\6\1\u0148\13\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\14\6"+
    "\1\u0149\14\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u014a\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\16\6"+
    "\1\u014b\1\6\1\u014c\10\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u014d\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u014e\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u014f\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\24\6\1\u0150\4\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\1\6\1\u0151\1\u0152\14\6"+
    "\1\u0153\11\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\26\6\1\u0154\2\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\21\6"+
    "\1\u0155\7\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\7\6\1\u0156\21\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\15\6"+
    "\1\u0157\13\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\u0158\7\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\10\6"+
    "\1\u0159\20\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u015a\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\21\6"+
    "\1\u015b\7\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\13\6\1\u015c\15\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u015d\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\u015e\30\6\3\0\1\u015f\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\14\6\1\u0160"+
    "\14\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\1\u0161\30\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0162\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\4\6\1\u0163\24\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0164\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u0165\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u0166\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\1\6\1\u0167\27\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0168\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u0169\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\13\6\1\u016a\15\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\10\6\1\u016b\20\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\13\6\1\u016c\15\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u016d\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u016e\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u016f\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u0170\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u0171\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\17\6\1\u0172\11\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u0173\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u0174\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\27\6\1\u0175\1\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u0176\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u0177\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\6\6\1\u0178\22\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\13\6\1\u0179\15\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\2\6\1\u017a\26\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\6\1\u017b\21\6\1\u017c\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\21\6\1\u017d"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\30\6\1\u017e\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u017f\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\21\6\1\u0180\7\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0181\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\1\6\1\u0182\27\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\16\6\1\u0183\12\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\21\6\1\u0184\7\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\21\6\1\u0185\7\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\21\6\1\u0186\7\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\14\6\1\u0187\14\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\26\6\1\u0188\2\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u0189\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u018a\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u018b\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\1\u018c\30\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u018d\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u018e\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\2\6\1\u018f\26\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\10\6\1\u0190\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\u0191\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\13\6\1\u0192\15\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\13\6\1\u0193\15\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\25\6\1\u0194\3\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\15\6\1\u0195\13\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u0196\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u0197\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u0198\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\22\6\1\u0199\6\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\22\6\1\u019a\6\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\15\6\1\u019b\13\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\24\6\1\u019c\4\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\u019d\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u019e\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u019f\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\10\6\1\u01a0\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\7\6\1\u01a1\21\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u01a2\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\16\6\1\u01a3\12\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u01a4\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u01a5\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\30\6\1\u01a6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u01a7\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\u01a8"+
    "\30\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\2\6\1\u01a9\26\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\u01aa"+
    "\15\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u01ab\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\23\6\1\u01ac"+
    "\5\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\21\6\1\u01ad\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\21\6\1\u01ae"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\u01af\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u01b0"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u01b1\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\1\u01b2\30\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\10\6\1\u01b3\20\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u01b4\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\13\6\1\u01b5\15\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\15\6\1\u01b6\13\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\4\6\1\u01b7\24\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\22\6\1\u01b8\6\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\2\6\1\u01b9\26\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\3\6\1\u01ba\1\u01bb\4\0\31\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\6\6\1\u01bc\22\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u01bd\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\6\6\1\u01be\22\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u01bf\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u01c0\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u01c1\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\u01c2\30\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\10\6\1\u01c3\20\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u01c4\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\u01c5\7\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\10\6"+
    "\1\u01c6\20\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\31\6\3\0\1\u01c7\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\11\6\1\u01c8\17\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\15\6\1\u01c9\13\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u01ca\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u01cb\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\16\6\1\u01cc\12\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u01cd\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u01ce\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u01cf\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u01d0\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u01d1\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\16\6\1\u01d2\12\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u01d3\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u01d4\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\17\6\1\u01d5\11\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\6\6\1\u01d6\22\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u01d7\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\14\6\1\u01d8\14\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\10\6\1\u01d9\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\u01da\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\5\6\1\u01db\5\6\1\u01dc\15\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u01dd"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\u01de\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\22\6\1\u01df"+
    "\6\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u01e0\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\1\u01e1\30\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\2\6\1\u01e2\26\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\15\6\1\u01e3\13\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\15\6\1\u01e4\13\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\15\6\1\u01e5\13\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u01e6\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u01e7\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\4\6\1\u01e8\24\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u01e9\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u01ea\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u01eb\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\2\6\1\u01ec\20\6\1\u01ed\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\22\6\1\u01ee"+
    "\6\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\14\6\1\u01ef\14\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\16\6\1\u01f0"+
    "\12\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\2\6\1\u01f1\26\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\23\6\1\u01f2"+
    "\5\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u01f3\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\u01f4"+
    "\15\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\21\6\1\u01f5\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\u01f6"+
    "\15\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u01f7\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\27\6\1\u01f8"+
    "\1\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\2\6\1\u01f9\26\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\13\6\1\u01fa"+
    "\15\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\u01fb\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\2\6\1\u01fc"+
    "\26\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\u01fd\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\21\6\1\u01fe"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\u01ff\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\16\6\1\u0200"+
    "\12\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\30\6\1\u0201\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\15\6\1\u0202\13\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\15\6\1\u0203\13\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\15\6\1\u0204\13\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\10\6\1\u0205\20\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\31\6\3\0\1\u0206"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\3\6"+
    "\1\u0207\25\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\u0208\30\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\16\6\1\u0209"+
    "\12\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\1\u020a\30\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\1\u020b\30\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u020c\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u020d\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\6\6\1\u020e\22\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\4\6\1\u020f\24\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u0210\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\15\6\1\u0211\13\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\10\6\1\u0212\20\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\30\6\1\u0213\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\31\6"+
    "\3\0\1\u0214\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\4\6\1\u0215\24\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\4\6\1\u0216\24\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\26\6\1\u0217\2\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0218\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\1\6"+
    "\1\u0219\1\u021a\1\u021b\1\6\4\0\31\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\1\u021c"+
    "\30\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\u021d\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u021e"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\2\6\1\u021f\26\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\2\6\1\u0220"+
    "\26\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\4\6\1\u0221\24\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\3\6\1\u0222"+
    "\25\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\15\6\1\u0223\13\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\2\6\1\u0224"+
    "\26\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\31\6\3\0\1\u0225\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\u0226\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\15\6\1\u0227\13\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\24\6\1\u0228\4\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\14\6\1\u0229\14\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u022a\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\23\6\1\u022b\5\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\21\6\1\u022c\7\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\4\6\1\u022d\24\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\23\6\1\u022e\5\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\21\6\1\u022f\7\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\6\6\1\u0230\22\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\1\u0231\30\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\15\6\1\u0232\13\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\3\6"+
    "\1\u0233\17\6\1\u0234\1\u0235\4\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\21\6\1\u0236"+
    "\7\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\21\6\1\u0237\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\15\6\1\u0238"+
    "\13\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\23\6\1\u0239\5\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u023a"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\21\6\1\u023b\7\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u023c"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\24\6\1\u023d\4\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\6\6\1\u023e"+
    "\22\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\22\6\1\u023f\6\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\17\6\1\u0240"+
    "\11\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\14\6\1\u0241\14\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\4\6\1\u0242"+
    "\24\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\30\6\1\u0243\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\14\6\1\u0244\14\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\7\6\1\u0245\21\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0246\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\23\6\1\u0247\5\6\3\0\1\6\1\0\2\6"+
    "\7\0\1\6\11\0\5\6\4\0\23\6\1\u0248\5\6"+
    "\3\0\1\6\1\0\2\6\7\0\1\6\11\0\5\6"+
    "\4\0\1\u0249\30\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\10\6\1\u024a\20\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\22\6\1\u024b\6\6\3\0\1\6\1\0\2\6\7\0"+
    "\1\6\11\0\5\6\4\0\16\6\1\u024c\12\6\3\0"+
    "\1\6\1\0\2\6\7\0\1\6\11\0\5\6\4\0"+
    "\30\6\1\u024d\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\6\6\1\u024e\22\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\22\6"+
    "\1\u024f\6\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\u0250\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\22\6"+
    "\1\u0251\6\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\u0252\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0253\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u0254\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\7\6"+
    "\1\u0255\21\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u0256\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\23\6"+
    "\1\u0257\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\14\6\1\u0258\14\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0259\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\26\6\1\u025a\2\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\23\6"+
    "\1\u025b\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\u025c\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u025d\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\u025e\7\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\15\6"+
    "\1\u025f\13\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\4\6\1\u0260\24\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\4\6"+
    "\1\u0261\24\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\u0262\7\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\7\6"+
    "\1\u0263\21\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\21\6\1\u0264\7\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\23\6"+
    "\1\u0265\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\22\6\1\u0266\6\6\3\0\1\6"+
    "\1\0\2\6\7\0\1\6\11\0\5\6\4\0\23\6"+
    "\1\u0267\5\6\3\0\1\6\1\0\2\6\7\0\1\6"+
    "\11\0\5\6\4\0\1\u0268\30\6\3\0\1\6\1\0"+
    "\2\6\7\0\1\6\11\0\5\6\4\0\14\6\1\u0269"+
    "\14\6\3\0\1\6\1\0\2\6\7\0\1\6\11\0"+
    "\5\6\4\0\17\6\1\u026a\11\6\3\0\1\6\1\0"+
    "\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\5\11\4\1\1\11\1\1\1\11"+
    "\30\1\4\11\1\0\1\11\1\0\2\1\1\0\1\11"+
    "\1\1\4\11\124\1\1\0\147\1\1\11\u0172\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[618];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public SqlToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return SqlToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return SqlToken.BAD_CHARACTER;
            }
            // fall through
          case 171: break;
          case 2:
            { return SqlToken.WHITESPACE;
            }
            // fall through
          case 172: break;
          case 3:
            { return SqlToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 173: break;
          case 4:
            { return SqlToken.IDENTIFIER;
            }
            // fall through
          case 174: break;
          case 5:
            { return SqlToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 175: break;
          case 6:
            { return SqlToken.LPAREN;
            }
            // fall through
          case 176: break;
          case 7:
            { return SqlToken.RPAREN;
            }
            // fall through
          case 177: break;
          case 8:
            { return SqlToken.MULT;
            }
            // fall through
          case 178: break;
          case 9:
            { return SqlToken.PLUS;
            }
            // fall through
          case 179: break;
          case 10:
            { return SqlToken.COMMA;
            }
            // fall through
          case 180: break;
          case 11:
            { return SqlToken.MINUS;
            }
            // fall through
          case 181: break;
          case 12:
            { return SqlToken.DOT;
            }
            // fall through
          case 182: break;
          case 13:
            { return SqlToken.DIV;
            }
            // fall through
          case 183: break;
          case 14:
            { return SqlToken.INTEGER_LITERAL;
            }
            // fall through
          case 184: break;
          case 15:
            { return SqlToken.SEMICOLON;
            }
            // fall through
          case 185: break;
          case 16:
            { return SqlToken.LT;
            }
            // fall through
          case 186: break;
          case 17:
            { return SqlToken.EQ;
            }
            // fall through
          case 187: break;
          case 18:
            { return SqlToken.GT;
            }
            // fall through
          case 188: break;
          case 19:
            { return SqlToken.LBRACK;
            }
            // fall through
          case 189: break;
          case 20:
            { return SqlToken.RBRACK;
            }
            // fall through
          case 190: break;
          case 21:
            { return SqlToken.BACKTICK;
            }
            // fall through
          case 191: break;
          case 22:
            { return SqlToken.LINE_COMMENT;
            }
            // fall through
          case 192: break;
          case 23:
            { return SqlToken.DOUBLE_LITERAL;
            }
            // fall through
          case 193: break;
          case 24:
            { return SqlToken.FLOAT_LITERAL;
            }
            // fall through
          case 194: break;
          case 25:
            { return SqlToken.LTEQ;
            }
            // fall through
          case 195: break;
          case 26:
            { return SqlToken.LTGT;
            }
            // fall through
          case 196: break;
          case 27:
            { return SqlToken.GTEQ;
            }
            // fall through
          case 197: break;
          case 28:
            { return SqlToken.AS;
            }
            // fall through
          case 198: break;
          case 29:
            { return SqlToken.BY;
            }
            // fall through
          case 199: break;
          case 30:
            { return SqlToken.IF;
            }
            // fall through
          case 200: break;
          case 31:
            { return SqlToken.IN;
            }
            // fall through
          case 201: break;
          case 32:
            { return SqlToken.IS;
            }
            // fall through
          case 202: break;
          case 33:
            { return SqlToken.ON;
            }
            // fall through
          case 203: break;
          case 34:
            { return SqlToken.OR;
            }
            // fall through
          case 204: break;
          case 35:
            { return SqlToken.ADD;
            }
            // fall through
          case 205: break;
          case 36:
            { return SqlToken.ALL;
            }
            // fall through
          case 206: break;
          case 37:
            { return SqlToken.AND;
            }
            // fall through
          case 207: break;
          case 38:
            { return SqlToken.ANY;
            }
            // fall through
          case 208: break;
          case 39:
            { return SqlToken.ASC;
            }
            // fall through
          case 209: break;
          case 40:
            { return SqlToken.AVA;
            }
            // fall through
          case 210: break;
          case 41:
            { return SqlToken.AVG;
            }
            // fall through
          case 211: break;
          case 42:
            { return SqlToken.BIT;
            }
            // fall through
          case 212: break;
          case 43:
            { return SqlToken.IMP;
            }
            // fall through
          case 213: break;
          case 44:
            { return SqlToken.INT;
            }
            // fall through
          case 214: break;
          case 45:
            { return SqlToken.KEY;
            }
            // fall through
          case 215: break;
          case 46:
            { return SqlToken.MAX;
            }
            // fall through
          case 216: break;
          case 47:
            { return SqlToken.MIN;
            }
            // fall through
          case 217: break;
          case 48:
            { return SqlToken.MOD;
            }
            // fall through
          case 218: break;
          case 49:
            { return SqlToken.NOT;
            }
            // fall through
          case 219: break;
          case 50:
            { return SqlToken.SET;
            }
            // fall through
          case 220: break;
          case 51:
            { return SqlToken.SUM;
            }
            // fall through
          case 221: break;
          case 52:
            { return SqlToken.TOP;
            }
            // fall through
          case 222: break;
          case 53:
            { return SqlToken.VAR;
            }
            // fall through
          case 223: break;
          case 54:
            { return SqlToken.BLOCK_COMMENT;
            }
            // fall through
          case 224: break;
          case 55:
            { return SqlToken.BLOB;
            }
            // fall through
          case 225: break;
          case 56:
            { return SqlToken.BYTE;
            }
            // fall through
          case 226: break;
          case 57:
            { return SqlToken.CHAR;
            }
            // fall through
          case 227: break;
          case 58:
            { return SqlToken.DATE;
            }
            // fall through
          case 228: break;
          case 59:
            { return SqlToken.DESC;
            }
            // fall through
          case 229: break;
          case 60:
            { return SqlToken.DROP;
            }
            // fall through
          case 230: break;
          case 61:
            { return SqlToken.FROM;
            }
            // fall through
          case 231: break;
          case 62:
            { return SqlToken.GUID;
            }
            // fall through
          case 232: break;
          case 63:
            { return SqlToken.INTO;
            }
            // fall through
          case 233: break;
          case 64:
            { return SqlToken.JOIN;
            }
            // fall through
          case 234: break;
          case 65:
            { return SqlToken.LEFT;
            }
            // fall through
          case 235: break;
          case 66:
            { return SqlToken.LIKE;
            }
            // fall through
          case 236: break;
          case 67:
            { return SqlToken.LONG;
            }
            // fall through
          case 237: break;
          case 68:
            { return SqlToken.MEMO;
            }
            // fall through
          case 238: break;
          case 69:
            { return SqlToken.NULL;
            }
            // fall through
          case 239: break;
          case 70:
            { return SqlToken.REAL;
            }
            // fall through
          case 240: break;
          case 71:
            { return SqlToken.SOME;
            }
            // fall through
          case 241: break;
          case 72:
            { return SqlToken.TEXT;
            }
            // fall through
          case 242: break;
          case 73:
            { return SqlToken.TIME;
            }
            // fall through
          case 243: break;
          case 74:
            { return SqlToken.TRIM;
            }
            // fall through
          case 244: break;
          case 75:
            { return SqlToken.TYPE;
            }
            // fall through
          case 245: break;
          case 76:
            { return SqlToken.USER;
            }
            // fall through
          case 246: break;
          case 77:
            { return SqlToken.VARP;
            }
            // fall through
          case 247: break;
          case 78:
            { return SqlToken.VIEW;
            }
            // fall through
          case 248: break;
          case 79:
            { return SqlToken.WITH;
            }
            // fall through
          case 249: break;
          case 80:
            { return SqlToken.ALTER;
            }
            // fall through
          case 250: break;
          case 81:
            { return SqlToken.COUNT;
            }
            // fall through
          case 251: break;
          case 82:
            { return SqlToken.FLOAT;
            }
            // fall through
          case 252: break;
          case 83:
            { return SqlToken.GROUP;
            }
            // fall through
          case 253: break;
          case 84:
            { return SqlToken.INDEX;
            }
            // fall through
          case 254: break;
          case 85:
            { return SqlToken.INNER;
            }
            // fall through
          case 255: break;
          case 86:
            { return SqlToken.LEVEL;
            }
            // fall through
          case 256: break;
          case 87:
            { return SqlToken.LOWER;
            }
            // fall through
          case 257: break;
          case 88:
            { return SqlToken.MONEY;
            }
            // fall through
          case 258: break;
          case 89:
            { return SqlToken.ORDER;
            }
            // fall through
          case 259: break;
          case 90:
            { return SqlToken.OUTER;
            }
            // fall through
          case 260: break;
          case 91:
            { return SqlToken.PIVOT;
            }
            // fall through
          case 261: break;
          case 92:
            { return SqlToken.RIGHT;
            }
            // fall through
          case 262: break;
          case 93:
            { return SqlToken.SHORT;
            }
            // fall through
          case 263: break;
          case 94:
            { return SqlToken.STDEV;
            }
            // fall through
          case 264: break;
          case 95:
            { return SqlToken.TABLE;
            }
            // fall through
          case 265: break;
          case 96:
            { return SqlToken.UNION;
            }
            // fall through
          case 266: break;
          case 97:
            { return SqlToken.UPPER;
            }
            // fall through
          case 267: break;
          case 98:
            { return SqlToken.VALUE;
            }
            // fall through
          case 268: break;
          case 99:
            { return SqlToken.WHERE;
            }
            // fall through
          case 269: break;
          case 100:
            { return SqlToken.YESNO;
            }
            // fall through
          case 270: break;
          case 101:
            { return SqlToken.BINARY;
            }
            // fall through
          case 271: break;
          case 102:
            { return SqlToken.COLUMN;
            }
            // fall through
          case 272: break;
          case 103:
            { return SqlToken.CREATE;
            }
            // fall through
          case 273: break;
          case 104:
            { return SqlToken.DELETE;
            }
            // fall through
          case 274: break;
          case 105:
            { return SqlToken.DOUBLE;
            }
            // fall through
          case 275: break;
          case 106:
            { return SqlToken.EXISTS;
            }
            // fall through
          case 276: break;
          case 107:
            { return SqlToken.FLOAT4;
            }
            // fall through
          case 277: break;
          case 108:
            { return SqlToken.FLOAT8;
            }
            // fall through
          case 278: break;
          case 109:
            { return SqlToken.HAVING;
            }
            // fall through
          case 279: break;
          case 110:
            { return SqlToken.IGNORE;
            }
            // fall through
          case 280: break;
          case 111:
            { return SqlToken.INSERT;
            }
            // fall through
          case 281: break;
          case 112:
            { return SqlToken.NUMBER;
            }
            // fall through
          case 282: break;
          case 113:
            { return SqlToken.OPTION;
            }
            // fall through
          case 283: break;
          case 114:
            { return SqlToken.SELECT;
            }
            // fall through
          case 284: break;
          case 115:
            { return SqlToken.SINGLE;
            }
            // fall through
          case 285: break;
          case 116:
            { return SqlToken.STDEVP;
            }
            // fall through
          case 286: break;
          case 117:
            { return SqlToken.STRING;
            }
            // fall through
          case 287: break;
          case 118:
            { return SqlToken.UNIQUE;
            }
            // fall through
          case 288: break;
          case 119:
            { return SqlToken.UPDATE;
            }
            // fall through
          case 289: break;
          case 120:
            { return SqlToken.VALUES;
            }
            // fall through
          case 290: break;
          case 121:
            { return SqlToken.BETWEEN;
            }
            // fall through
          case 291: break;
          case 122:
            { return SqlToken.BOOLEAN;
            }
            // fall through
          case 292: break;
          case 123:
            { return SqlToken.CONVERT;
            }
            // fall through
          case 293: break;
          case 124:
            { return SqlToken.COUNTER;
            }
            // fall through
          case 294: break;
          case 125:
            { return SqlToken.EXTRACT;
            }
            // fall through
          case 295: break;
          case 126:
            { return SqlToken.FOREIGN;
            }
            // fall through
          case 296: break;
          case 127:
            { return SqlToken.GENERAL;
            }
            // fall through
          case 297: break;
          case 128:
            { return SqlToken.INTEGER;
            }
            // fall through
          case 298: break;
          case 129:
            { return SqlToken.LOGICAL;
            }
            // fall through
          case 299: break;
          case 130:
            { return SqlToken.NUMERIC;
            }
            // fall through
          case 300: break;
          case 131:
            { return SqlToken.PERCENT;
            }
            // fall through
          case 301: break;
          case 132:
            { return SqlToken.PRIMARY;
            }
            // fall through
          case 302: break;
          case 133:
            { return SqlToken.TABLEID;
            }
            // fall through
          case 303: break;
          case 134:
            { return SqlToken.VARCHAR;
            }
            // fall through
          case 304: break;
          case 135:
            { return SqlToken.CURRENCY;
            }
            // fall through
          case 305: break;
          case 136:
            { return SqlToken.DATABASE;
            }
            // fall through
          case 306: break;
          case 137:
            { return SqlToken.DATETIME;
            }
            // fall through
          case 307: break;
          case 138:
            { return SqlToken.DISALLOW;
            }
            // fall through
          case 308: break;
          case 139:
            { return SqlToken.DISTINCT;
            }
            // fall through
          case 309: break;
          case 140:
            { return SqlToken.INTEGER1;
            }
            // fall through
          case 310: break;
          case 141:
            { return SqlToken.INTEGER2;
            }
            // fall through
          case 311: break;
          case 142:
            { return SqlToken.INTEGER4;
            }
            // fall through
          case 312: break;
          case 143:
            { return SqlToken.LONGTEXT;
            }
            // fall through
          case 313: break;
          case 144:
            { return SqlToken.PASSWORD;
            }
            // fall through
          case 314: break;
          case 145:
            { return SqlToken.POSITION;
            }
            // fall through
          case 315: break;
          case 146:
            { return SqlToken.SMALLINT;
            }
            // fall through
          case 316: break;
          case 147:
            { return SqlToken.CHARACTER;
            }
            // fall through
          case 317: break;
          case 148:
            { return SqlToken.OLEOBJECT;
            }
            // fall through
          case 318: break;
          case 149:
            { return SqlToken.SUBSTRING;
            }
            // fall through
          case 319: break;
          case 150:
            { return SqlToken.TIMESTAMP;
            }
            // fall through
          case 320: break;
          case 151:
            { return SqlToken.TRANSFORM;
            }
            // fall through
          case 321: break;
          case 152:
            { return SqlToken.TRANSLATE;
            }
            // fall through
          case 322: break;
          case 153:
            { return SqlToken.VARBINARY;
            }
            // fall through
          case 323: break;
          case 154:
            { return SqlToken.BIT_LENGTH;
            }
            // fall through
          case 324: break;
          case 155:
            { return SqlToken.CONSTRAINT;
            }
            // fall through
          case 325: break;
          case 156:
            { return SqlToken.LONGBINARY;
            }
            // fall through
          case 326: break;
          case 157:
            { return SqlToken.PARAMETERS;
            }
            // fall through
          case 327: break;
          case 158:
            { return SqlToken.REFERENCES;
            }
            // fall through
          case 328: break;
          case 159:
            { return SqlToken.CHAR_LENGTH;
            }
            // fall through
          case 329: break;
          case 160:
            { return SqlToken.CONCATENATE;
            }
            // fall through
          case 330: break;
          case 161:
            { return SqlToken.DISTINCTROW;
            }
            // fall through
          case 331: break;
          case 162:
            { return SqlToken.OWNERACCESS;
            }
            // fall through
          case 332: break;
          case 163:
            { return SqlToken.SYSTEM_USER;
            }
            // fall through
          case 333: break;
          case 164:
            { return SqlToken.CURRENT_DATE;
            }
            // fall through
          case 334: break;
          case 165:
            { return SqlToken.CURRENT_TIME;
            }
            // fall through
          case 335: break;
          case 166:
            { return SqlToken.CURRENT_USER;
            }
            // fall through
          case 336: break;
          case 167:
            { return SqlToken.OCTET_LENGTH;
            }
            // fall through
          case 337: break;
          case 168:
            { return SqlToken.SESSION_USER;
            }
            // fall through
          case 338: break;
          case 169:
            { return SqlToken.AUTOINCREMENT;
            }
            // fall through
          case 339: break;
          case 170:
            { return SqlToken.CURRENT_TIMESTAMP;
            }
            // fall through
          case 340: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
