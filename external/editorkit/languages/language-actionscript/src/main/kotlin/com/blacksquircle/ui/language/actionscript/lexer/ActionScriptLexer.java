/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.actionscript.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>actionscript.flex</tt>
 */
public class ActionScriptLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\6\1\36\1\37\1\40\1\41\1\42\1\43\5\44"+
    "\1\45\1\44\1\46\1\47\1\50\2\44\1\51\2\44"+
    "\1\52\1\44\1\53\2\44\1\54\1\55\1\56\1\57"+
    "\1\60\1\6\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\44\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\44\1\111\1\112\1\113\1\114"+
    "\6\0\1\115\32\0\2\6\4\12\4\6\1\12\2\6"+
    "\1\0\7\6\1\12\4\6\1\12\5\6\27\12\1\6"+
    "\37\12\1\6\u01ca\12\4\6\14\12\16\6\5\12\7\6"+
    "\1\12\1\6\1\12\21\6\160\0\5\12\1\6\2\12"+
    "\2\6\4\12\10\6\1\12\1\6\3\12\1\6\1\12"+
    "\1\6\24\12\1\6\123\12\1\6\213\12\1\6\5\0"+
    "\2\6\236\12\11\6\46\12\2\6\1\12\7\6\47\12"+
    "\7\6\1\12\1\6\55\0\1\6\1\0\1\6\2\0"+
    "\1\6\2\0\1\6\1\0\10\6\33\12\5\6\3\12"+
    "\15\6\5\0\6\6\1\12\4\6\13\0\5\6\53\12"+
    "\37\0\4\6\2\12\1\0\143\12\1\6\1\12\10\0"+
    "\1\6\6\0\2\12\2\0\1\6\4\0\2\12\12\0"+
    "\3\12\2\6\1\12\17\6\1\0\1\12\1\0\36\12"+
    "\33\0\2\6\131\12\13\0\1\12\16\6\12\0\41\12"+
    "\11\0\2\12\4\6\1\12\5\6\26\12\4\0\1\12"+
    "\11\0\1\12\3\0\1\12\5\0\22\6\31\12\3\0"+
    "\104\6\1\12\1\6\13\12\67\6\33\0\1\6\4\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\2\0"+
    "\2\6\12\0\1\6\7\12\1\6\7\12\1\6\3\0"+
    "\1\6\10\12\2\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\1\12\3\6\4\12\2\6\1\0\1\12\7\0"+
    "\2\6\2\0\2\6\3\0\1\12\10\6\1\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\4\12\7\6"+
    "\1\12\5\6\3\0\1\6\6\12\4\6\2\12\2\6"+
    "\26\12\1\6\7\12\1\6\2\12\1\6\2\12\1\6"+
    "\2\12\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\12\1\6\1\12\7\6"+
    "\14\0\3\12\1\0\13\6\3\0\1\6\11\12\1\6"+
    "\3\12\1\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\5\12\2\6\1\0\1\12\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\12\17\6\2\12\2\0\2\6\12\0"+
    "\1\6\1\12\17\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\2\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\7\6\3\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\12\12"+
    "\1\6\5\12\3\6\1\12\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\1\6\2\12\6\6\2\12\2\0"+
    "\2\6\12\0\22\6\2\0\1\6\10\12\1\6\3\12"+
    "\1\6\27\12\1\6\12\12\1\6\5\12\2\6\1\0"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\7\6\1\12\1\6\2\12\2\0\2\6\12\0\1\6"+
    "\2\12\17\6\2\0\1\6\10\12\1\6\3\12\1\6"+
    "\51\12\2\6\1\12\7\0\1\6\3\0\1\6\4\0"+
    "\1\12\10\6\1\0\10\6\2\12\2\0\2\6\12\0"+
    "\12\6\6\12\2\6\2\0\1\6\22\12\3\6\30\12"+
    "\1\6\11\12\1\6\1\12\2\6\7\12\3\6\1\0"+
    "\4\6\6\0\1\6\1\0\1\6\10\0\22\6\2\0"+
    "\15\6\60\12\1\0\2\12\7\0\4\6\10\12\10\0"+
    "\1\6\12\0\47\6\2\12\1\6\1\12\2\6\2\12"+
    "\1\6\1\12\2\6\1\12\6\6\4\12\1\6\7\12"+
    "\1\6\3\12\1\6\1\12\1\6\1\12\2\6\2\12"+
    "\1\6\4\12\1\0\2\12\6\0\1\6\2\0\1\12"+
    "\2\6\5\12\1\6\1\12\1\6\6\0\2\6\12\0"+
    "\2\6\4\12\40\6\1\12\27\6\2\0\6\6\12\0"+
    "\13\6\1\0\1\6\1\0\1\6\1\0\4\6\2\0"+
    "\10\12\1\6\44\12\4\6\24\0\1\6\2\0\5\12"+
    "\13\0\1\6\44\0\11\6\1\0\71\6\53\12\24\0"+
    "\1\12\12\0\6\6\6\12\4\0\4\12\3\0\1\12"+
    "\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12"+
    "\17\0\2\6\46\12\1\6\1\12\5\6\1\12\2\6"+
    "\53\12\1\6\115\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\51\12\1\6\4\12\2\6"+
    "\41\12\1\6\4\12\2\6\7\12\1\6\1\12\1\6"+
    "\4\12\2\6\17\12\1\6\71\12\1\6\4\12\2\6"+
    "\103\12\2\6\3\0\40\6\20\12\20\6\125\12\14\6"+
    "\u016c\12\2\6\21\12\1\6\32\12\5\6\113\12\3\6"+
    "\3\12\17\6\15\12\1\6\4\12\3\0\13\6\22\12"+
    "\3\0\13\6\22\12\2\0\14\6\15\12\1\6\3\12"+
    "\1\6\2\0\14\6\64\12\40\0\3\6\1\12\3\6"+
    "\2\12\1\0\2\6\12\0\41\6\3\0\2\6\12\0"+
    "\6\6\130\12\10\6\51\12\1\0\1\12\5\6\106\12"+
    "\12\6\35\12\3\6\14\0\4\6\14\0\12\6\12\0"+
    "\36\12\2\6\5\12\13\6\54\12\4\6\21\0\7\12"+
    "\2\0\6\6\12\0\46\6\27\12\5\0\4\6\65\12"+
    "\12\0\1\6\35\0\2\6\13\0\6\6\12\0\15\6"+
    "\1\12\130\6\5\0\57\12\21\0\7\12\4\6\12\0"+
    "\21\6\11\0\14\6\3\0\36\12\15\0\2\12\12\0"+
    "\54\12\16\0\14\6\44\12\24\0\10\6\12\0\3\6"+
    "\3\12\12\0\44\12\122\6\3\0\1\6\25\0\4\12"+
    "\1\0\4\12\3\0\2\12\11\6\300\12\47\0\25\6"+
    "\4\0\26\12\2\6\6\12\2\6\46\12\2\6\6\12"+
    "\2\6\10\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\37\12\2\6\65\12\1\6\7\12\1\6\1\12"+
    "\3\6\3\12\1\6\7\12\3\6\4\12\2\6\6\12"+
    "\4\6\15\12\5\6\3\12\1\6\7\12\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\12\23\6\1\12\13\6"+
    "\5\0\5\6\6\0\1\6\1\12\15\6\1\12\20\6"+
    "\15\12\3\6\33\12\25\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\12\4\6\1\12\2\6\12\12\1\6"+
    "\1\12\3\6\5\12\6\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\4\12\1\6\13\12\2\6\4\12\5\6"+
    "\5\12\4\6\1\12\21\6\51\12\u0177\6\57\12\1\6"+
    "\57\12\1\6\205\12\6\6\4\12\3\0\2\12\14\6"+
    "\46\12\1\6\1\12\5\6\1\12\2\6\70\12\7\6"+
    "\1\12\17\6\1\0\27\12\11\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\40\0\57\6\1\12"+
    "\325\6\3\12\31\6\11\12\6\0\1\6\5\12\2\6"+
    "\5\12\4\6\126\12\2\6\2\0\2\6\3\12\1\6"+
    "\132\12\1\6\4\12\5\6\51\12\3\6\136\12\21\6"+
    "\33\12\65\6\306\12\112\6\315\12\63\6\215\12\103\6"+
    "\56\12\2\6\15\12\3\6\20\12\12\0\2\12\24\6"+
    "\57\12\1\0\4\6\12\0\1\6\31\12\7\6\1\0"+
    "\120\12\2\0\45\6\11\12\2\6\147\12\2\6\4\12"+
    "\1\6\4\12\14\6\13\12\115\6\12\12\1\0\3\12"+
    "\1\0\4\12\1\0\27\12\5\0\20\6\1\12\7\6"+
    "\64\12\14\6\2\0\62\12\21\0\13\6\12\0\6\6"+
    "\22\0\6\12\3\6\1\12\4\6\12\0\34\12\10\0"+
    "\2\6\27\12\15\0\14\6\35\12\3\6\4\0\57\12"+
    "\16\0\16\6\1\12\12\0\46\6\51\12\16\0\11\6"+
    "\3\12\1\0\10\12\2\0\2\6\12\0\6\6\27\12"+
    "\3\6\1\12\1\0\4\6\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\6"+
    "\3\12\2\6\13\12\5\0\2\6\3\12\2\0\12\6"+
    "\6\12\2\6\6\12\2\6\6\12\11\6\7\12\1\6"+
    "\7\12\221\6\43\12\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\12\14\6\27\12\4\6\61\12\4\6\u0100\3"+
    "\156\12\2\6\152\12\46\6\7\12\14\6\5\12\5\6"+
    "\1\12\1\0\12\12\1\6\15\12\1\6\5\12\1\6"+
    "\1\12\1\6\2\12\1\6\2\12\1\6\154\12\41\6"+
    "\153\12\22\6\100\12\2\6\66\12\50\6\15\12\3\6"+
    "\20\0\20\6\7\0\14\6\2\12\30\6\3\12\31\6"+
    "\1\12\6\6\5\12\1\6\207\12\2\6\1\0\4\6"+
    "\1\12\13\6\12\0\7\6\32\12\4\6\1\12\1\6"+
    "\32\12\13\6\131\12\3\6\6\12\2\6\6\12\2\6"+
    "\6\12\2\6\3\12\3\6\2\12\3\6\2\12\22\6"+
    "\3\0\4\6\14\12\1\6\32\12\1\6\23\12\1\6"+
    "\2\12\1\6\17\12\2\6\16\12\42\6\173\12\105\6"+
    "\65\12\210\6\1\0\202\6\35\12\3\6\61\12\57\6"+
    "\37\12\21\6\33\12\65\6\36\12\2\6\44\12\4\6"+
    "\10\12\1\6\5\12\52\6\236\12\2\6\12\0\126\6"+
    "\6\12\2\6\1\12\1\6\54\12\1\6\2\12\3\6"+
    "\1\12\2\6\27\12\252\6\26\12\12\6\32\12\106\6"+
    "\70\12\6\6\2\12\100\6\1\12\3\0\1\6\2\0"+
    "\5\6\4\0\4\12\1\6\3\12\1\6\33\12\4\6"+
    "\3\0\4\6\1\0\40\6\35\12\203\6\66\12\12\6"+
    "\26\12\12\6\23\12\215\6\111\12\267\6\3\0\65\12"+
    "\17\0\37\6\12\0\20\6\3\0\55\12\13\0\2\6"+
    "\1\0\22\6\31\12\7\6\12\0\6\6\3\0\44\12"+
    "\16\0\1\6\12\0\100\6\3\0\60\12\16\0\4\12"+
    "\13\6\12\0\246\6\53\12\15\0\10\6\12\0\66\6"+
    "\157\12\221\6\143\12\235\6\57\12\321\6\71\12\307\6"+
    "\105\12\13\6\1\12\56\0\20\6\4\0\15\12\140\6"+
    "\2\12\u0163\6\5\0\3\6\26\0\2\6\7\0\36\6"+
    "\4\0\224\6\3\0\273\6\125\12\1\6\107\12\1\6"+
    "\2\12\2\6\1\12\2\6\2\12\2\6\4\12\1\6"+
    "\14\12\1\6\1\12\1\6\7\12\1\6\101\12\1\6"+
    "\4\12\2\6\10\12\1\6\7\12\1\6\34\12\1\6"+
    "\4\12\1\6\5\12\1\6\1\12\3\6\7\12\1\6"+
    "\u0154\12\2\6\31\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\37\12\1\6"+
    "\31\12\1\6\37\12\1\6\31\12\1\6\10\12\2\6"+
    "\62\0\4\12\1\6\33\12\1\6\2\12\1\6\1\12"+
    "\2\6\1\12\1\6\12\12\1\6\4\12\1\6\1\12"+
    "\1\6\1\12\6\6\1\12\4\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\3\12\1\6\2\12\1\6\1\12"+
    "\2\6\1\12\1\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\2\12\1\6\1\12\2\6\4\12"+
    "\1\6\7\12\1\6\4\12\1\6\4\12\1\6\1\12"+
    "\1\6\12\12\1\6\21\12\5\6\3\12\1\6\5\12"+
    "\1\6\21\12\104\6\327\12\51\6\65\12\13\6\336\12"+
    "\343\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\6\5\1\30\1\31\1\32\22\5\1\33\1\34"+
    "\1\35\1\36\1\0\1\37\1\4\3\0\1\40\1\41"+
    "\1\42\1\43\1\10\1\0\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\21\2\51\1\55"+
    "\1\56\1\21\1\57\1\60\1\61\1\62\1\63\10\5"+
    "\1\64\1\65\5\5\1\66\11\5\1\67\1\5\1\70"+
    "\26\5\1\71\1\72\1\73\2\4\1\74\2\10\1\0"+
    "\1\51\1\0\1\21\1\75\1\76\1\77\1\100\2\5"+
    "\1\101\21\5\1\102\1\5\1\103\3\5\1\104\3\5"+
    "\1\105\10\5\1\106\6\5\1\107\3\5\1\110\1\111"+
    "\2\5\1\112\1\52\1\0\1\113\6\5\1\114\1\5"+
    "\1\115\6\5\1\116\1\117\14\5\1\120\12\5\1\121"+
    "\1\5\1\122\1\5\1\123\2\5\1\124\1\125\5\5"+
    "\1\126\1\127\1\130\1\131\4\5\1\132\1\133\6\5"+
    "\1\134\12\5\1\135\1\5\1\136\2\5\1\137\1\5"+
    "\1\140\1\141\1\142\1\143\7\5\1\144\5\5\1\145"+
    "\5\5\1\146\1\147\1\150\1\151\1\152\1\5\1\153"+
    "\1\5\1\154\1\155\1\156\2\5\1\157\5\5\1\160"+
    "\1\5\1\161\2\5\1\162\1\163\3\5\1\164\1\5"+
    "\1\165\5\5\1\166\1\167\1\170\1\171\1\172\1\173"+
    "\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\116\0\116\0\u035a\0\u03a8\0\116"+
    "\0\u03f6\0\u0444\0\u0492\0\u04e0\0\u052e\0\116\0\116\0\u057c"+
    "\0\u05ca\0\u0618\0\116\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e"+
    "\0\u07ec\0\116\0\116\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972"+
    "\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2"+
    "\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\116\0\u0e04"+
    "\0\116\0\116\0\u01d4\0\u0e52\0\116\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\116\0\u0fd8\0\116\0\116\0\u1026\0\116\0\116"+
    "\0\116\0\116\0\116\0\u1074\0\u10c2\0\u1110\0\116\0\u115e"+
    "\0\116\0\u11ac\0\116\0\116\0\u11fa\0\u1248\0\116\0\u1296"+
    "\0\116\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8"+
    "\0\u1506\0\u1554\0\116\0\u0222\0\u15a2\0\u15f0\0\u163e\0\u168c"+
    "\0\u16da\0\u0222\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u18ae"+
    "\0\u18fc\0\u194a\0\u1998\0\u0222\0\u19e6\0\u1a34\0\u1a82\0\u1ad0"+
    "\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u1d40"+
    "\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\116\0\u2136\0\116\0\u2184"+
    "\0\u21d2\0\116\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6"+
    "\0\116\0\116\0\116\0\u23f4\0\u2442\0\u2490\0\u0222\0\u24de"+
    "\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e"+
    "\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922\0\u2970\0\u29be"+
    "\0\u0222\0\u2a0c\0\u0222\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92"+
    "\0\u2be0\0\u2c2e\0\u0222\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4"+
    "\0\u2e02\0\u2e50\0\u2e9e\0\u0222\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6"+
    "\0\u3024\0\u3072\0\u0222\0\u30c0\0\u310e\0\u315c\0\u0222\0\u0222"+
    "\0\u31aa\0\u31f8\0\116\0\116\0\u3246\0\116\0\u3294\0\u32e2"+
    "\0\u3330\0\u337e\0\u33cc\0\u341a\0\u0222\0\u3468\0\u0222\0\u34b6"+
    "\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u0222\0\u0222\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u3948\0\u3996\0\u39e4\0\u0222\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u0222\0\u3d3e"+
    "\0\u0222\0\u3d8c\0\u0222\0\u3dda\0\u3e28\0\u0222\0\u0222\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u0222\0\u0222\0\u0222\0\u0222"+
    "\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u0222\0\u4134\0\u4182\0\u41d0"+
    "\0\u421e\0\u426c\0\u42ba\0\u4308\0\u0222\0\u4356\0\u43a4\0\u43f2"+
    "\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614\0\u0222"+
    "\0\u4662\0\u0222\0\u46b0\0\u46fe\0\u0222\0\u474c\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u4920"+
    "\0\u496e\0\u0222\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u0222"+
    "\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u0222\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u4cc8\0\u0222\0\u4d16\0\u0222\0\u0222\0\u0222"+
    "\0\u4d64\0\u4db2\0\u0222\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38"+
    "\0\u0222\0\u4f86\0\u0222\0\u4fd4\0\u5022\0\u0222\0\u0222\0\u5070"+
    "\0\u50be\0\u510c\0\u0222\0\u515a\0\u0222\0\u51a8\0\u51f6\0\u5244"+
    "\0\u5292\0\u52e0\0\u0222\0\u0222\0\u0222\0\u0222\0\u0222\0\u0222"+
    "\0\u0222";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\6\10"+
    "\1\36\1\37\1\10\1\40\1\41\1\10\1\42\1\2"+
    "\1\43\1\44\1\10\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\10\1\54\2\10\1\55\1\10\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\2\10\1\67\1\70\1\71\1\72\1\2\127\0\1\73"+
    "\106\0\1\3\6\0\1\73\137\0\1\74\62\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\75\44\6\1\76\40\6"+
    "\1\0\2\77\1\0\1\77\1\100\30\0\16\101\5\0"+
    "\30\101\5\0\1\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\31\10\4\0\1\10\33\0\1\102\76\0"+
    "\1\103\16\0\1\104\62\0\2\13\1\0\2\13\1\0"+
    "\7\13\1\105\37\13\1\106\40\13\33\0\1\107\103\0"+
    "\1\110\11\0\1\111\105\0\1\112\7\0\1\113\110\0"+
    "\2\114\106\0\1\115\4\0\1\116\5\0\1\117\106\0"+
    "\1\114\1\0\2\25\7\0\1\120\1\0\1\121\1\122"+
    "\1\123\1\0\1\124\5\0\1\125\4\0\1\25\1\0"+
    "\1\120\1\0\1\121\1\122\1\123\5\0\1\124\12\0"+
    "\1\125\32\0\1\114\1\0\2\25\11\0\1\121\1\122"+
    "\1\123\1\0\1\124\12\0\1\25\3\0\1\121\1\122"+
    "\1\123\5\0\1\124\53\0\1\126\1\127\115\0\1\130"+
    "\115\0\1\131\1\132\61\0\1\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\21\10\1\133\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\17\10\1\134\11\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\135\22\10\1\136"+
    "\4\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\2\10\1\137\26\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\23\10\1\140"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\5\10\1\141\11\10\1\142\11\10\4\0"+
    "\1\10\33\0\1\143\62\0\1\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\22\10\1\144\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\145\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\146\12\10\1\147"+
    "\2\10\1\150\11\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\5\10\1\151\11\10\1\152"+
    "\10\10\1\153\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\1\10\1\154\12\10\1\155\12\10"+
    "\1\156\1\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\1\10\1\157\7\10\1\160\5\10"+
    "\1\161\4\10\1\162\4\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\163\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\6\10\1\164\6\10\1\165\1\166\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\1\10\1\167\27\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\170\3\10\1\171"+
    "\16\10\1\172\4\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\25\10\1\173\3\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\1\10\1\174\17\10\1\175\2\10\1\176\4\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\5\10\1\177\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\5\10\1\200\15\10\1\201"+
    "\1\202\1\10\1\203\2\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\10\10\1\204\10\10"+
    "\1\205\6\10\1\206\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\11\10\1\207\4\10\1\210"+
    "\3\10\1\211\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\212\15\10\1\142"+
    "\11\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\10\10\1\213\1\214\17\10\4\0\1\10"+
    "\33\0\1\215\56\0\1\216\36\0\1\217\62\0\1\6"+
    "\1\220\2\6\1\220\1\221\110\6\36\0\16\101\5\0"+
    "\30\101\7\0\1\77\33\0\16\101\5\0\30\101\5\0"+
    "\2\101\1\0\113\101\33\0\1\222\62\0\1\13\1\223"+
    "\2\13\1\223\1\224\110\13\26\0\2\114\11\0\1\121"+
    "\1\122\1\123\14\0\1\114\3\0\1\121\1\122\1\123"+
    "\27\0\20\115\1\225\75\115\2\116\4\0\107\116\27\0"+
    "\2\120\15\0\1\124\12\0\1\120\13\0\1\124\42\0"+
    "\1\226\1\0\1\226\2\0\2\226\11\0\1\121\1\0"+
    "\1\123\14\0\1\226\3\0\1\121\1\0\1\123\53\0"+
    "\1\227\1\0\2\230\6\0\6\230\1\0\1\124\12\0"+
    "\7\230\5\0\1\124\54\0\1\231\115\0\1\232\115\0"+
    "\1\233\1\234\61\0\1\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\21\10\1\235\7\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\17\10"+
    "\1\236\11\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\10\10\1\237\5\10\4\0\31\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\15\10"+
    "\1\240\13\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\12\10\1\241\16\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\21\10"+
    "\1\242\7\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\3\10\1\243\25\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\11\10"+
    "\1\244\17\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\5\10\1\245\23\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\22\10"+
    "\1\246\1\247\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\250\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\16\10\1\251\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\6\10\1\252\22\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\16\10\1\253\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\3\10\1\254\25\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\22\10\1\255\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\23\10\1\256\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\14\10\1\257\14\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\16\10\1\260\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\261\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\16\10\1\262\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\23\10\1\263\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\20\10\1\264\10\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\3\10\1\265\16\10\1\266\1\267\5\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\2\10"+
    "\1\270\26\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\15\10\1\271\5\10\1\272\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\26\10\1\273\2\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\14\10\1\274\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\275\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\3\10\1\276\15\10"+
    "\1\277\7\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\11\10\1\300\5\10\1\301\11\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\2\10\1\302\26\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\23\10\1\303\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\304\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\1\10\1\305\27\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\20\10\1\306\10\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\11\10\1\307\17\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\11\10\1\310\7\10\1\311\7\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\24\10"+
    "\1\312\3\10\1\313\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\20\10\1\314\10\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\16\10\1\315\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\4\10\1\316\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\5\10\1\317\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\21\10\1\320\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\11\10\1\321\17\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\23\10\1\322\5\10\4\0"+
    "\1\10\33\0\1\323\62\0\1\6\1\220\2\6\1\220"+
    "\1\221\2\6\1\75\44\6\1\76\45\6\1\0\2\6"+
    "\1\75\44\6\1\76\40\6\1\13\1\223\2\13\1\223"+
    "\1\224\7\13\1\105\37\13\1\106\45\13\1\0\7\13"+
    "\1\105\37\13\1\106\40\13\20\115\1\225\4\115\1\324"+
    "\70\115\26\0\2\226\11\0\1\121\1\0\1\123\14\0"+
    "\1\226\3\0\1\121\1\0\1\123\55\0\2\325\6\0"+
    "\6\325\14\0\7\325\53\0\1\325\1\0\2\230\6\0"+
    "\6\230\1\0\1\124\2\0\1\122\7\0\7\230\5\0"+
    "\1\124\3\0\1\122\50\0\1\326\62\0\1\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\1\10\1\327"+
    "\27\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\14\10\1\330\14\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\2\10\1\331"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\5\10\1\332\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\11\10\1\333"+
    "\17\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\23\10\1\334\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\4\10\1\335"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\1\10\1\336\27\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\5\10\1\337"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\3\10\1\340\25\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\22\10\1\341"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\22\10\1\342\1\343\5\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\1\10"+
    "\1\344\27\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\1\10\1\345\27\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\10\10"+
    "\1\346\20\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\5\10\1\347\23\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\5\10"+
    "\1\350\23\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\22\10\1\351\6\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\1\10"+
    "\1\352\27\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\16\10\4\0\3\10\1\353\25\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\16\10\4\0\14\10"+
    "\1\354\2\10\1\355\11\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\14\10\1\356\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\357\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\360\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\361\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\362\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\11\10\1\363\17\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\14\10\1\364\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\21\10\1\365\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\13\10\1\366\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\1\10\1\367\27\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\25\10\1\370\3\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\371\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\14\10\1\372\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\24\10\1\373\4\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\23\10\1\374\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\375\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\23\10\1\376\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\22\10\1\377\6\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\17\10\1\u0100\11\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u0101\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0102\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\u0103\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0104\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\14\10\1\u0105\14\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\10\10\1\u0106\20\10"+
    "\4\0\1\10\26\0\2\325\6\0\6\325\4\0\1\122"+
    "\7\0\7\325\11\0\1\122\15\0\1\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\30\10\1\u0107\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\5\10\1\u0108\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\5\10\1\u0109\23\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\3\10\1\u010a\25\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\16\10\1\u010b\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\17\10\1\u010c\11\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\13\10\1\u010d\15\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\10\10\1\u010e\20\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\22\10\1\u010f\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\23\10\1\u0110\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\11\10\1\u0111\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\24\10\1\u0112\4\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\15\10\1\u0113\13\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\16\10\1\u0114\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\5\10\1\u0115\23\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\14\10\1\u0116\14\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\23\10\1\u0117\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\5\10\1\u0118\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\21\10\1\u0119\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\24\10\1\u011a\4\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\u011b\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\u011c\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\14\10\1\u011d\14\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\22\10\1\u011e\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\25\10\1\u011f\3\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\u0120\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\u0121\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\15\10\1\u0122\13\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\1\10\1\u0123\27\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\5\10\1\u0124\23\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\11\10\1\u0125\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\u0126\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\11\10\1\u0127\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\u0128\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\3\10\1\u0129\25\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\26\10\1\u012a\2\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\17\10\1\u012b\11\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\6\10\1\u012c\22\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\5\10\1\u012d\23\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\1\10\1\u012e\27\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\21\10\1\u012f\7\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\23\10\1\u0130\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\7\10\1\u0131\21\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\21\10\1\u0132\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\16\10\1\u0133\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\14\10\1\u0134\14\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\11\10\1\u0135\17\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\4\10\1\u0136\24\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\14\10\1\u0137\14\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\11\10\1\u0138\17\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\15\10\1\u0139\13\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\23\10\1\u013a\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\4\10\1\u013b\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\16\10\4\0"+
    "\16\10\1\u013c\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\16\10\4\0\6\10\1\u013d\7\10\1\u013e"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\20\10\1\u013f\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\5\10\1\u0140"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\11\10\1\u0141\17\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\7\10\1\u0142"+
    "\21\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\5\10\1\u0143\23\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\23\10\1\u0144"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\3\10\1\u0145\25\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\3\10\1\u0146"+
    "\25\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\16\10\1\u0147\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\3\10\1\u0148"+
    "\25\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\10\10\1\u0149\20\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\6\10\1\u014a"+
    "\22\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\11\10\1\u014b\17\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\16\10\1\u014c"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\24\10\1\u014d\4\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\23\10\1\u014e"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\3\10\1\u014e\25\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\16\10\4\0\22\10\1\u014f"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\16\10\4\0\30\10\1\u0150\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\17\10\1\u0151\11\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u0152\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0153\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\3\10\1\u0154\25\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\1\10\1\u0155\27\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\1\10\1\u0156\27\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\1\10\1\u0157\27\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\4\10\1\u0158\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0159\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\u015a\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u015b\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\23\10\1\u015c\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\16\10\1\u015d\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u015e\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\16\10\1\u015f\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\16\10\1\u0160\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0161\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\3\10\1\u0162\25\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\14\10\1\u0163\14\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\3\10\1\u0164\25\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0165\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u0166\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u0167\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u0168\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\23\10\1\u0169\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\17\10\1\u016a\11\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\5\10\1\u016b\23\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\5\10\1\u016c\23\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\21\10\1\u016d\7\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\4\10\1\u016e\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\4\10\1\u016f\24\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\16\10"+
    "\4\0\22\10\1\u0170\6\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\16\10\4\0\6\10\1\u0171\22\10"+
    "\4\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21294];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\6\1\2\11\23\1\1\11\1\1\2\11"+
    "\1\0\1\1\1\11\3\0\1\1\1\11\1\1\2\11"+
    "\1\0\5\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\11\1\1\11\51\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\3\11\67\1\2\11\1\0\1\11\233\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public ActionScriptToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return ActionScriptToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ActionScriptToken.BAD_CHARACTER;
            }
            // fall through
          case 125: break;
          case 2:
            { return ActionScriptToken.WHITESPACE;
            }
            // fall through
          case 126: break;
          case 3:
            { return ActionScriptToken.NOT;
            }
            // fall through
          case 127: break;
          case 4:
            { return ActionScriptToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 128: break;
          case 5:
            { return ActionScriptToken.IDENTIFIER;
            }
            // fall through
          case 129: break;
          case 6:
            { return ActionScriptToken.MOD;
            }
            // fall through
          case 130: break;
          case 7:
            { return ActionScriptToken.AND;
            }
            // fall through
          case 131: break;
          case 8:
            { return ActionScriptToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 132: break;
          case 9:
            { return ActionScriptToken.LPAREN;
            }
            // fall through
          case 133: break;
          case 10:
            { return ActionScriptToken.RPAREN;
            }
            // fall through
          case 134: break;
          case 11:
            { return ActionScriptToken.MULT;
            }
            // fall through
          case 135: break;
          case 12:
            { return ActionScriptToken.PLUS;
            }
            // fall through
          case 136: break;
          case 13:
            { return ActionScriptToken.COMMA;
            }
            // fall through
          case 137: break;
          case 14:
            { return ActionScriptToken.MINUS;
            }
            // fall through
          case 138: break;
          case 15:
            { return ActionScriptToken.DOT;
            }
            // fall through
          case 139: break;
          case 16:
            { return ActionScriptToken.DIV;
            }
            // fall through
          case 140: break;
          case 17:
            { return ActionScriptToken.INTEGER_LITERAL;
            }
            // fall through
          case 141: break;
          case 18:
            { return ActionScriptToken.COLON;
            }
            // fall through
          case 142: break;
          case 19:
            { return ActionScriptToken.SEMICOLON;
            }
            // fall through
          case 143: break;
          case 20:
            { return ActionScriptToken.LT;
            }
            // fall through
          case 144: break;
          case 21:
            { return ActionScriptToken.EQ;
            }
            // fall through
          case 145: break;
          case 22:
            { return ActionScriptToken.GT;
            }
            // fall through
          case 146: break;
          case 23:
            { return ActionScriptToken.QUEST;
            }
            // fall through
          case 147: break;
          case 24:
            { return ActionScriptToken.LBRACK;
            }
            // fall through
          case 148: break;
          case 25:
            { return ActionScriptToken.RBRACK;
            }
            // fall through
          case 149: break;
          case 26:
            { return ActionScriptToken.XOR;
            }
            // fall through
          case 150: break;
          case 27:
            { return ActionScriptToken.LBRACE;
            }
            // fall through
          case 151: break;
          case 28:
            { return ActionScriptToken.OR;
            }
            // fall through
          case 152: break;
          case 29:
            { return ActionScriptToken.RBRACE;
            }
            // fall through
          case 153: break;
          case 30:
            { return ActionScriptToken.TILDE;
            }
            // fall through
          case 154: break;
          case 31:
            { return ActionScriptToken.NOTEQ;
            }
            // fall through
          case 155: break;
          case 32:
            { return ActionScriptToken.PREPROCESSOR;
            }
            // fall through
          case 156: break;
          case 33:
            { return ActionScriptToken.MODEQ;
            }
            // fall through
          case 157: break;
          case 34:
            { return ActionScriptToken.ANDAND;
            }
            // fall through
          case 158: break;
          case 35:
            { return ActionScriptToken.ANDEQ;
            }
            // fall through
          case 159: break;
          case 36:
            { return ActionScriptToken.MULTEQ;
            }
            // fall through
          case 160: break;
          case 37:
            { return ActionScriptToken.PLUSPLUS;
            }
            // fall through
          case 161: break;
          case 38:
            { return ActionScriptToken.PLUSEQ;
            }
            // fall through
          case 162: break;
          case 39:
            { return ActionScriptToken.MINUSMINUS;
            }
            // fall through
          case 163: break;
          case 40:
            { return ActionScriptToken.MINUSEQ;
            }
            // fall through
          case 164: break;
          case 41:
            { return ActionScriptToken.DOUBLE_LITERAL;
            }
            // fall through
          case 165: break;
          case 42:
            { return ActionScriptToken.BLOCK_COMMENT;
            }
            // fall through
          case 166: break;
          case 43:
            { return ActionScriptToken.LINE_COMMENT;
            }
            // fall through
          case 167: break;
          case 44:
            { return ActionScriptToken.DIVEQ;
            }
            // fall through
          case 168: break;
          case 45:
            { return ActionScriptToken.FLOAT_LITERAL;
            }
            // fall through
          case 169: break;
          case 46:
            { return ActionScriptToken.LONG_LITERAL;
            }
            // fall through
          case 170: break;
          case 47:
            { return ActionScriptToken.LTLT;
            }
            // fall through
          case 171: break;
          case 48:
            { return ActionScriptToken.LTEQ;
            }
            // fall through
          case 172: break;
          case 49:
            { return ActionScriptToken.EQEQ;
            }
            // fall through
          case 173: break;
          case 50:
            { return ActionScriptToken.GTEQ;
            }
            // fall through
          case 174: break;
          case 51:
            { return ActionScriptToken.GTGT;
            }
            // fall through
          case 175: break;
          case 52:
            { return ActionScriptToken.XOREQ;
            }
            // fall through
          case 176: break;
          case 53:
            { return ActionScriptToken.AS;
            }
            // fall through
          case 177: break;
          case 54:
            { return ActionScriptToken.DO;
            }
            // fall through
          case 178: break;
          case 55:
            { return ActionScriptToken.IF;
            }
            // fall through
          case 179: break;
          case 56:
            { return ActionScriptToken.IN;
            }
            // fall through
          case 180: break;
          case 57:
            { return ActionScriptToken.OREQ;
            }
            // fall through
          case 181: break;
          case 58:
            { return ActionScriptToken.OROR;
            }
            // fall through
          case 182: break;
          case 59:
            { return ActionScriptToken.NOTEQEQ;
            }
            // fall through
          case 183: break;
          case 60:
            { return ActionScriptToken.ANDANDEQ;
            }
            // fall through
          case 184: break;
          case 61:
            { return ActionScriptToken.LTLTEQ;
            }
            // fall through
          case 185: break;
          case 62:
            { return ActionScriptToken.EQEQEQ;
            }
            // fall through
          case 186: break;
          case 63:
            { return ActionScriptToken.GTGTEQ;
            }
            // fall through
          case 187: break;
          case 64:
            { return ActionScriptToken.GTGTGT;
            }
            // fall through
          case 188: break;
          case 65:
            { return ActionScriptToken.NAN;
            }
            // fall through
          case 189: break;
          case 66:
            { return ActionScriptToken.FOR;
            }
            // fall through
          case 190: break;
          case 67:
            { return ActionScriptToken.GET;
            }
            // fall through
          case 191: break;
          case 68:
            { return ActionScriptToken.INT;
            }
            // fall through
          case 192: break;
          case 69:
            { return ActionScriptToken.NEW;
            }
            // fall through
          case 193: break;
          case 70:
            { return ActionScriptToken.SET;
            }
            // fall through
          case 194: break;
          case 71:
            { return ActionScriptToken.TRY;
            }
            // fall through
          case 195: break;
          case 72:
            { return ActionScriptToken.USE;
            }
            // fall through
          case 196: break;
          case 73:
            { return ActionScriptToken.VAR;
            }
            // fall through
          case 197: break;
          case 74:
            { return ActionScriptToken.OROREQ;
            }
            // fall through
          case 198: break;
          case 75:
            { return ActionScriptToken.GTGTGTEQ;
            }
            // fall through
          case 199: break;
          case 76:
            { return ActionScriptToken.VOID;
            }
            // fall through
          case 200: break;
          case 77:
            { return ActionScriptToken.CASE;
            }
            // fall through
          case 201: break;
          case 78:
            { return ActionScriptToken.EACH;
            }
            // fall through
          case 202: break;
          case 79:
            { return ActionScriptToken.ELSE;
            }
            // fall through
          case 203: break;
          case 80:
            { return ActionScriptToken.NULL;
            }
            // fall through
          case 204: break;
          case 81:
            { return ActionScriptToken.THIS;
            }
            // fall through
          case 205: break;
          case 82:
            { return ActionScriptToken.TRUE;
            }
            // fall through
          case 206: break;
          case 83:
            { return ActionScriptToken.UINT;
            }
            // fall through
          case 207: break;
          case 84:
            { return ActionScriptToken.WITH;
            }
            // fall through
          case 208: break;
          case 85:
            { return ActionScriptToken.ARRAY;
            }
            // fall through
          case 209: break;
          case 86:
            { return ActionScriptToken.BREAK;
            }
            // fall through
          case 210: break;
          case 87:
            { return ActionScriptToken.CATCH;
            }
            // fall through
          case 211: break;
          case 88:
            { return ActionScriptToken.CLASS;
            }
            // fall through
          case 212: break;
          case 89:
            { return ActionScriptToken.CONST;
            }
            // fall through
          case 213: break;
          case 90:
            { return ActionScriptToken.FALSE;
            }
            // fall through
          case 214: break;
          case 91:
            { return ActionScriptToken.FINAL;
            }
            // fall through
          case 215: break;
          case 92:
            { return ActionScriptToken.LABEL;
            }
            // fall through
          case 216: break;
          case 93:
            { return ActionScriptToken.SUPER;
            }
            // fall through
          case 217: break;
          case 94:
            { return ActionScriptToken.THROW;
            }
            // fall through
          case 218: break;
          case 95:
            { return ActionScriptToken.WHILE;
            }
            // fall through
          case 219: break;
          case 96:
            { return ActionScriptToken.NUMBER;
            }
            // fall through
          case 220: break;
          case 97:
            { return ActionScriptToken.OBJECT;
            }
            // fall through
          case 221: break;
          case 98:
            { return ActionScriptToken.STRING;
            }
            // fall through
          case 222: break;
          case 99:
            { return ActionScriptToken.VECTOR;
            }
            // fall through
          case 223: break;
          case 100:
            { return ActionScriptToken.IMPORT;
            }
            // fall through
          case 224: break;
          case 101:
            { return ActionScriptToken.NATIVE;
            }
            // fall through
          case 225: break;
          case 102:
            { return ActionScriptToken.PUBLIC;
            }
            // fall through
          case 226: break;
          case 103:
            { return ActionScriptToken.RETURN;
            }
            // fall through
          case 227: break;
          case 104:
            { return ActionScriptToken.STATIC;
            }
            // fall through
          case 228: break;
          case 105:
            { return ActionScriptToken.SWITCH;
            }
            // fall through
          case 229: break;
          case 106:
            { return ActionScriptToken.TYPEOF;
            }
            // fall through
          case 230: break;
          case 107:
            { return ActionScriptToken.BOOLEAN;
            }
            // fall through
          case 231: break;
          case 108:
            { return ActionScriptToken.DEFAULT;
            }
            // fall through
          case 232: break;
          case 109:
            { return ActionScriptToken.EXTENDS;
            }
            // fall through
          case 233: break;
          case 110:
            { return ActionScriptToken.FINALLY;
            }
            // fall through
          case 234: break;
          case 111:
            { return ActionScriptToken.INCLUDE;
            }
            // fall through
          case 235: break;
          case 112:
            { return ActionScriptToken.PACKAGE;
            }
            // fall through
          case 236: break;
          case 113:
            { return ActionScriptToken.PRIVATE;
            }
            // fall through
          case 237: break;
          case 114:
            { return ActionScriptToken.CONTINUE;
            }
            // fall through
          case 238: break;
          case 115:
            { return ActionScriptToken.FUNCTION;
            }
            // fall through
          case 239: break;
          case 116:
            { return ActionScriptToken.INTERNAL;
            }
            // fall through
          case 240: break;
          case 117:
            { return ActionScriptToken.OVERRIDE;
            }
            // fall through
          case 241: break;
          case 118:
            { return ActionScriptToken.INTERFACE;
            }
            // fall through
          case 242: break;
          case 119:
            { return ActionScriptToken.NAMESPACE;
            }
            // fall through
          case 243: break;
          case 120:
            { return ActionScriptToken.PARAMETER;
            }
            // fall through
          case 244: break;
          case 121:
            { return ActionScriptToken.PROTECTED;
            }
            // fall through
          case 245: break;
          case 122:
            { return ActionScriptToken.UNDEFINED;
            }
            // fall through
          case 246: break;
          case 123:
            { return ActionScriptToken.IMPLEMENTS;
            }
            // fall through
          case 247: break;
          case 124:
            { return ActionScriptToken.INSTANCEOF;
            }
            // fall through
          case 248: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
