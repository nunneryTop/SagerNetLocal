/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.php.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>php.flex</tt>
 */
public class PhpLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\6\1\36\1\37\1\36\1\40\1\41\1\42\2\43"+
    "\1\44\4\43\1\45\1\43\1\46\7\43\1\47\2\43"+
    "\1\50\1\51\1\52\1\53\1\54\1\6\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\43"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\43\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\6\0\1\111\32\0\2\6"+
    "\4\112\4\6\1\112\2\6\1\0\7\6\1\112\4\6"+
    "\1\112\5\6\27\112\1\6\37\112\1\6\u01ca\112\4\6"+
    "\14\112\16\6\5\112\7\6\1\112\1\6\1\112\21\6"+
    "\160\0\5\112\1\6\2\112\2\6\4\112\10\6\1\112"+
    "\1\6\3\112\1\6\1\112\1\6\24\112\1\6\123\112"+
    "\1\6\213\112\1\6\5\0\2\6\236\112\11\6\46\112"+
    "\2\6\1\112\7\6\47\112\7\6\1\112\1\6\55\0"+
    "\1\6\1\0\1\6\2\0\1\6\2\0\1\6\1\0"+
    "\10\6\33\112\5\6\3\112\15\6\5\0\6\6\1\112"+
    "\4\6\13\0\5\6\53\112\37\0\4\6\2\112\1\0"+
    "\143\112\1\6\1\112\10\0\1\6\6\0\2\112\2\0"+
    "\1\6\4\0\2\112\12\0\3\112\2\6\1\112\17\6"+
    "\1\0\1\112\1\0\36\112\33\0\2\6\131\112\13\0"+
    "\1\112\16\6\12\0\41\112\11\0\2\112\4\6\1\112"+
    "\5\6\26\112\4\0\1\112\11\0\1\112\3\0\1\112"+
    "\5\0\22\6\31\112\3\0\104\6\1\112\1\6\13\112"+
    "\67\6\33\0\1\6\4\0\66\112\3\0\1\112\22\0"+
    "\1\112\7\0\12\112\2\0\2\6\12\0\1\6\7\112"+
    "\1\6\7\112\1\6\3\0\1\6\10\112\2\6\2\112"+
    "\2\6\26\112\1\6\7\112\1\6\1\112\3\6\4\112"+
    "\2\6\1\0\1\112\7\0\2\6\2\0\2\6\3\0"+
    "\1\112\10\6\1\0\4\6\2\112\1\6\3\112\2\0"+
    "\2\6\12\0\4\112\7\6\1\112\5\6\3\0\1\6"+
    "\6\112\4\6\2\112\2\6\26\112\1\6\7\112\1\6"+
    "\2\112\1\6\2\112\1\6\2\112\2\6\1\0\1\6"+
    "\5\0\4\6\2\0\2\6\3\0\3\6\1\0\7\6"+
    "\4\112\1\6\1\112\7\6\14\0\3\112\1\0\13\6"+
    "\3\0\1\6\11\112\1\6\3\112\1\6\26\112\1\6"+
    "\7\112\1\6\2\112\1\6\5\112\2\6\1\0\1\112"+
    "\10\0\1\6\3\0\1\6\3\0\2\6\1\112\17\6"+
    "\2\112\2\0\2\6\12\0\1\6\1\112\17\6\3\0"+
    "\1\6\10\112\2\6\2\112\2\6\26\112\1\6\7\112"+
    "\1\6\2\112\1\6\5\112\2\6\1\0\1\112\7\0"+
    "\2\6\2\0\2\6\3\0\10\6\2\0\4\6\2\112"+
    "\1\6\3\112\2\0\2\6\12\0\1\6\1\112\20\6"+
    "\1\0\1\112\1\6\6\112\3\6\3\112\1\6\4\112"+
    "\3\6\2\112\1\6\1\112\1\6\2\112\3\6\2\112"+
    "\3\6\3\112\3\6\14\112\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\112\6\6\1\0\16\6\12\0"+
    "\11\6\1\112\7\6\3\0\1\6\10\112\1\6\3\112"+
    "\1\6\27\112\1\6\12\112\1\6\5\112\3\6\1\112"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\1\6"+
    "\2\112\6\6\2\112\2\0\2\6\12\0\22\6\2\0"+
    "\1\6\10\112\1\6\3\112\1\6\27\112\1\6\12\112"+
    "\1\6\5\112\2\6\1\0\1\112\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\7\6\1\112\1\6\2\112"+
    "\2\0\2\6\12\0\1\6\2\112\17\6\2\0\1\6"+
    "\10\112\1\6\3\112\1\6\51\112\2\6\1\112\7\0"+
    "\1\6\3\0\1\6\4\0\1\112\10\6\1\0\10\6"+
    "\2\112\2\0\2\6\12\0\12\6\6\112\2\6\2\0"+
    "\1\6\22\112\3\6\30\112\1\6\11\112\1\6\1\112"+
    "\2\6\7\112\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\22\6\2\0\15\6\60\112\1\0\2\112"+
    "\7\0\4\6\10\112\10\0\1\6\12\0\47\6\2\112"+
    "\1\6\1\112\2\6\2\112\1\6\1\112\2\6\1\112"+
    "\6\6\4\112\1\6\7\112\1\6\3\112\1\6\1\112"+
    "\1\6\1\112\2\6\2\112\1\6\4\112\1\0\2\112"+
    "\6\0\1\6\2\0\1\112\2\6\5\112\1\6\1\112"+
    "\1\6\6\0\2\6\12\0\2\6\4\112\40\6\1\112"+
    "\27\6\2\0\6\6\12\0\13\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\2\0\10\112\1\6\44\112\4\6"+
    "\24\0\1\6\2\0\5\112\13\0\1\6\44\0\11\6"+
    "\1\0\71\6\53\112\24\0\1\112\12\0\6\6\6\112"+
    "\4\0\4\112\3\0\1\112\3\0\2\112\7\0\3\112"+
    "\4\0\15\112\14\0\1\112\17\0\2\6\46\112\1\6"+
    "\1\112\5\6\1\112\2\6\53\112\1\6\115\112\1\6"+
    "\4\112\2\6\7\112\1\6\1\112\1\6\4\112\2\6"+
    "\51\112\1\6\4\112\2\6\41\112\1\6\4\112\2\6"+
    "\7\112\1\6\1\112\1\6\4\112\2\6\17\112\1\6"+
    "\71\112\1\6\4\112\2\6\103\112\2\6\3\0\40\6"+
    "\20\112\20\6\125\112\14\6\u016c\112\2\6\21\112\1\6"+
    "\32\112\5\6\113\112\3\6\3\112\17\6\15\112\1\6"+
    "\4\112\3\0\13\6\22\112\3\0\13\6\22\112\2\0"+
    "\14\6\15\112\1\6\3\112\1\6\2\0\14\6\64\112"+
    "\40\0\3\6\1\112\3\6\2\112\1\0\2\6\12\0"+
    "\41\6\3\0\2\6\12\0\6\6\130\112\10\6\51\112"+
    "\1\0\1\112\5\6\106\112\12\6\35\112\3\6\14\0"+
    "\4\6\14\0\12\6\12\0\36\112\2\6\5\112\13\6"+
    "\54\112\4\6\21\0\7\112\2\0\6\6\12\0\46\6"+
    "\27\112\5\0\4\6\65\112\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\112\130\6\5\0\57\112"+
    "\21\0\7\112\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\112\15\0\2\112\12\0\54\112\16\0\14\6\44\112"+
    "\24\0\10\6\12\0\3\6\3\112\12\0\44\112\122\6"+
    "\3\0\1\6\25\0\4\112\1\0\4\112\3\0\2\112"+
    "\11\6\300\112\47\0\25\6\4\0\26\112\2\6\6\112"+
    "\2\6\46\112\2\6\6\112\2\6\10\112\1\6\1\112"+
    "\1\6\1\112\1\6\1\112\1\6\37\112\2\6\65\112"+
    "\1\6\7\112\1\6\1\112\3\6\3\112\1\6\7\112"+
    "\3\6\4\112\2\6\6\112\4\6\15\112\5\6\3\112"+
    "\1\6\7\112\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\112\23\6\1\112\13\6\5\0\5\6\6\0\1\6"+
    "\1\112\15\6\1\112\20\6\15\112\3\6\33\112\25\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\112\4\6"+
    "\1\112\2\6\12\112\1\6\1\112\3\6\5\112\6\6"+
    "\1\112\1\6\1\112\1\6\1\112\1\6\4\112\1\6"+
    "\13\112\2\6\4\112\5\6\5\112\4\6\1\112\21\6"+
    "\51\112\u0177\6\57\112\1\6\57\112\1\6\205\112\6\6"+
    "\4\112\3\0\2\112\14\6\46\112\1\6\1\112\5\6"+
    "\1\112\2\6\70\112\7\6\1\112\17\6\1\0\27\112"+
    "\11\6\7\112\1\6\7\112\1\6\7\112\1\6\7\112"+
    "\1\6\7\112\1\6\7\112\1\6\7\112\1\6\7\112"+
    "\1\6\40\0\57\6\1\112\325\6\3\112\31\6\11\112"+
    "\6\0\1\6\5\112\2\6\5\112\4\6\126\112\2\6"+
    "\2\0\2\6\3\112\1\6\132\112\1\6\4\112\5\6"+
    "\51\112\3\6\136\112\21\6\33\112\65\6\306\112\112\6"+
    "\315\112\63\6\215\112\103\6\56\112\2\6\15\112\3\6"+
    "\20\112\12\0\2\112\24\6\57\112\1\0\4\6\12\0"+
    "\1\6\31\112\7\6\1\0\120\112\2\0\45\6\11\112"+
    "\2\6\147\112\2\6\4\112\1\6\4\112\14\6\13\112"+
    "\115\6\12\112\1\0\3\112\1\0\4\112\1\0\27\112"+
    "\5\0\20\6\1\112\7\6\64\112\14\6\2\0\62\112"+
    "\21\0\13\6\12\0\6\6\22\0\6\112\3\6\1\112"+
    "\4\6\12\0\34\112\10\0\2\6\27\112\15\0\14\6"+
    "\35\112\3\6\4\0\57\112\16\0\16\6\1\112\12\0"+
    "\46\6\51\112\16\0\11\6\3\112\1\0\10\112\2\0"+
    "\2\6\12\0\6\6\27\112\3\6\1\112\1\0\4\6"+
    "\60\112\1\0\1\112\3\0\2\112\2\0\5\112\2\0"+
    "\1\112\1\0\1\112\30\6\3\112\2\6\13\112\5\0"+
    "\2\6\3\112\2\0\12\6\6\112\2\6\6\112\2\6"+
    "\6\112\11\6\7\112\1\6\7\112\221\6\43\112\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\112\14\6\27\112"+
    "\4\6\61\112\4\6\u0100\3\156\112\2\6\152\112\46\6"+
    "\7\112\14\6\5\112\5\6\1\112\1\0\12\112\1\6"+
    "\15\112\1\6\5\112\1\6\1\112\1\6\2\112\1\6"+
    "\2\112\1\6\154\112\41\6\153\112\22\6\100\112\2\6"+
    "\66\112\50\6\15\112\3\6\20\0\20\6\7\0\14\6"+
    "\2\112\30\6\3\112\31\6\1\112\6\6\5\112\1\6"+
    "\207\112\2\6\1\0\4\6\1\112\13\6\12\0\7\6"+
    "\32\112\4\6\1\112\1\6\32\112\13\6\131\112\3\6"+
    "\6\112\2\6\6\112\2\6\6\112\2\6\3\112\3\6"+
    "\2\112\3\6\2\112\22\6\3\0\4\6\14\112\1\6"+
    "\32\112\1\6\23\112\1\6\2\112\1\6\17\112\2\6"+
    "\16\112\42\6\173\112\105\6\65\112\210\6\1\0\202\6"+
    "\35\112\3\6\61\112\57\6\37\112\21\6\33\112\65\6"+
    "\36\112\2\6\44\112\4\6\10\112\1\6\5\112\52\6"+
    "\236\112\2\6\12\0\126\6\6\112\2\6\1\112\1\6"+
    "\54\112\1\6\2\112\3\6\1\112\2\6\27\112\252\6"+
    "\26\112\12\6\32\112\106\6\70\112\6\6\2\112\100\6"+
    "\1\112\3\0\1\6\2\0\5\6\4\0\4\112\1\6"+
    "\3\112\1\6\33\112\4\6\3\0\4\6\1\0\40\6"+
    "\35\112\203\6\66\112\12\6\26\112\12\6\23\112\215\6"+
    "\111\112\267\6\3\0\65\112\17\0\37\6\12\0\20\6"+
    "\3\0\55\112\13\0\2\6\1\0\22\6\31\112\7\6"+
    "\12\0\6\6\3\0\44\112\16\0\1\6\12\0\100\6"+
    "\3\0\60\112\16\0\4\112\13\6\12\0\246\6\53\112"+
    "\15\0\10\6\12\0\66\6\157\112\221\6\143\112\235\6"+
    "\57\112\321\6\71\112\307\6\105\112\13\6\1\112\56\0"+
    "\20\6\4\0\15\112\140\6\2\112\u0163\6\5\0\3\6"+
    "\26\0\2\6\7\0\36\6\4\0\224\6\3\0\273\6"+
    "\125\112\1\6\107\112\1\6\2\112\2\6\1\112\2\6"+
    "\2\112\2\6\4\112\1\6\14\112\1\6\1\112\1\6"+
    "\7\112\1\6\101\112\1\6\4\112\2\6\10\112\1\6"+
    "\7\112\1\6\34\112\1\6\4\112\1\6\5\112\1\6"+
    "\1\112\3\6\7\112\1\6\u0154\112\2\6\31\112\1\6"+
    "\31\112\1\6\37\112\1\6\31\112\1\6\37\112\1\6"+
    "\31\112\1\6\37\112\1\6\31\112\1\6\37\112\1\6"+
    "\31\112\1\6\10\112\2\6\62\0\4\112\1\6\33\112"+
    "\1\6\2\112\1\6\1\112\2\6\1\112\1\6\12\112"+
    "\1\6\4\112\1\6\1\112\1\6\1\112\6\6\1\112"+
    "\4\6\1\112\1\6\1\112\1\6\1\112\1\6\3\112"+
    "\1\6\2\112\1\6\1\112\2\6\1\112\1\6\1\112"+
    "\1\6\1\112\1\6\1\112\1\6\1\112\1\6\2\112"+
    "\1\6\1\112\2\6\4\112\1\6\7\112\1\6\4\112"+
    "\1\6\4\112\1\6\1\112\1\6\12\112\1\6\21\112"+
    "\5\6\3\112\1\6\5\112\1\6\21\112\104\6\327\112"+
    "\51\6\65\112\13\6\336\112\343\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\6\1\31\1\32\1\33\21\6\1\34\1\1"+
    "\1\35\1\36\1\37\1\4\1\0\1\40\1\41\1\42"+
    "\1\43\1\11\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\22\2\51\1\54\1\22\1\0"+
    "\1\55\1\56\1\57\1\60\2\6\1\61\2\6\1\62"+
    "\11\6\1\63\13\6\1\64\4\6\1\65\1\6\1\66"+
    "\30\6\1\67\1\70\2\4\2\11\1\0\1\51\1\0"+
    "\1\22\1\71\1\72\1\73\1\6\1\74\15\6\1\75"+
    "\16\6\1\76\6\6\1\77\2\6\1\100\3\6\1\101"+
    "\21\6\1\102\2\6\1\103\4\6\1\52\1\0\1\104"+
    "\5\6\1\105\1\106\1\6\1\107\7\6\1\110\1\111"+
    "\1\112\1\6\1\113\1\6\1\114\1\115\10\6\1\116"+
    "\7\6\1\117\2\6\1\120\10\6\1\121\5\6\1\122"+
    "\2\6\1\123\2\6\1\124\2\6\1\125\2\6\1\126"+
    "\1\6\1\127\1\130\1\131\1\132\6\6\1\133\3\6"+
    "\1\134\1\135\1\136\12\6\1\137\5\6\1\140\4\6"+
    "\1\141\1\6\1\142\2\6\1\143\4\6\1\144\6\6"+
    "\1\145\1\146\1\147\1\150\1\151\4\6\1\152\1\6"+
    "\1\153\6\6\1\154\1\6\1\155\4\6\1\156\1\157"+
    "\1\160\1\161\1\6\1\162\1\6\1\163\4\6\1\164"+
    "\2\6\1\165\1\166\1\167\1\170\2\6\1\171\5\6"+
    "\1\172\2\6\1\173\5\6\1\174\1\175\1\176\1\177"+
    "\1\200\5\6\1\201\2\6\1\202\3\6\1\203\1\204"+
    "\3\6\1\205\1\206\1\207\1\6\1\210\1\6\1\211"+
    "\1\212\1\6\1\213\1\214\3\6\1\215\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2"+
    "\0\u020d\0\u0258\0\u02a3\0\113\0\113\0\u02ee\0\u0339\0\113"+
    "\0\u0384\0\u03cf\0\u041a\0\u0465\0\u04b0\0\113\0\113\0\u04fb"+
    "\0\u0546\0\u0591\0\113\0\u05dc\0\u0627\0\u0672\0\113\0\113"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22"+
    "\0\u0b6d\0\u0bb8\0\113\0\u0c03\0\113\0\113\0\113\0\113"+
    "\0\u0c4e\0\u0c99\0\113\0\113\0\113\0\113\0\u0ce4\0\113"+
    "\0\113\0\113\0\113\0\113\0\u0d2f\0\u0d7a\0\113\0\u0dc5"+
    "\0\113\0\u0e10\0\113\0\u0e5b\0\u0ea6\0\113\0\113\0\113"+
    "\0\u0ef1\0\u0f3c\0\u0f87\0\113\0\u0fd2\0\u101d\0\u05dc\0\u1068"+
    "\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0"+
    "\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518"+
    "\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u05dc\0\u168f\0\u16da\0\u1725"+
    "\0\u1770\0\u05dc\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\113\0\113\0\u1f59\0\u1fa4"+
    "\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166\0\113\0\113"+
    "\0\u21b1\0\u21fc\0\u05dc\0\u2247\0\u2292\0\u22dd\0\u2328\0\u2373"+
    "\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb"+
    "\0\u05dc\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8"+
    "\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30"+
    "\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88"+
    "\0\u2cd3\0\u05dc\0\u2d1e\0\u2d69\0\u2db4\0\u05dc\0\u2dff\0\u2e4a"+
    "\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2"+
    "\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u05dc"+
    "\0\u32fa\0\u3345\0\u05dc\0\u3390\0\u33db\0\u3426\0\u3471\0\113"+
    "\0\u34bc\0\113\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633\0\u05dc"+
    "\0\u05dc\0\u367e\0\u05dc\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u05dc\0\u05dc\0\u38d6\0\u3921\0\u05dc\0\u396c"+
    "\0\u05dc\0\u05dc\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e"+
    "\0\u3b79\0\u3bc4\0\u05dc\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b"+
    "\0\u3d86\0\u3dd1\0\u05dc\0\u3e1c\0\u3e67\0\u05dc\0\u3eb2\0\u3efd"+
    "\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u40bf\0\u05dc\0\u410a"+
    "\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u05dc\0\u4281\0\u42cc\0\u05dc"+
    "\0\u4317\0\u4362\0\u05dc\0\u43ad\0\u43f8\0\u05dc\0\u4443\0\u448e"+
    "\0\u05dc\0\u44d9\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u4524\0\u456f"+
    "\0\u45ba\0\u4605\0\u4650\0\u469b\0\u05dc\0\u46e6\0\u4731\0\u477c"+
    "\0\u05dc\0\u47c7\0\u05dc\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e"+
    "\0\u4989\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5\0\u05dc\0\u4b00\0\u4b4b"+
    "\0\u4b96\0\u4be1\0\u4c2c\0\u05dc\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58"+
    "\0\u05dc\0\u4da3\0\u05dc\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a"+
    "\0\u4f65\0\u4fb0\0\u05dc\0\u4ffb\0\u5046\0\u5091\0\u50dc\0\u5127"+
    "\0\u5172\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u51bd\0\u5208"+
    "\0\u5253\0\u529e\0\u05dc\0\u52e9\0\u05dc\0\u5334\0\u537f\0\u53ca"+
    "\0\u5415\0\u5460\0\u54ab\0\u05dc\0\u54f6\0\u05dc\0\u5541\0\u558c"+
    "\0\u55d7\0\u5622\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u566d\0\u05dc"+
    "\0\u56b8\0\u05dc\0\u5703\0\u574e\0\u5799\0\u57e4\0\u05dc\0\u582f"+
    "\0\u587a\0\u05dc\0\u05dc\0\u05dc\0\u05dc\0\u58c5\0\u5910\0\u595b"+
    "\0\u59a6\0\u59f1\0\u5a3c\0\u5a87\0\u5ad2\0\u05dc\0\u5b1d\0\u5b68"+
    "\0\u05dc\0\u5bb3\0\u5bfe\0\u5c49\0\u5c94\0\u5cdf\0\u05dc\0\u05dc"+
    "\0\u05dc\0\u05dc\0\u05dc\0\u5d2a\0\u5d75\0\u5dc0\0\u5e0b\0\u5e56"+
    "\0\u05dc\0\u5ea1\0\u5eec\0\u05dc\0\u5f37\0\u5f82\0\u5fcd\0\u05dc"+
    "\0\u05dc\0\u6018\0\u6063\0\u60ae\0\u05dc\0\u05dc\0\u05dc\0\u60f9"+
    "\0\u05dc\0\u6144\0\u05dc\0\u05dc\0\u618f\0\u05dc\0\u05dc\0\u61da"+
    "\0\u6225\0\u6270\0\u05dc\0\u05dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\6\34\1\35\1\36"+
    "\2\34\1\37\1\2\1\40\1\41\1\34\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\34\1\51\1\34"+
    "\1\52\1\34\1\53\1\34\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\3\34\1\63\1\64\1\65\1\66"+
    "\1\2\1\34\115\0\1\3\143\0\1\67\57\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\70\40\6\1\71\41\6"+
    "\2\7\4\0\103\7\1\0\1\7\1\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\72\4\0\31\72\4\0\2\34"+
    "\33\0\1\73\73\0\1\74\16\0\1\75\57\0\2\13"+
    "\1\0\2\13\1\0\7\13\1\76\33\13\1\77\41\13"+
    "\33\0\1\100\100\0\1\101\11\0\1\102\102\0\1\103"+
    "\7\0\1\104\105\0\2\105\103\0\1\106\4\0\1\7"+
    "\5\0\1\107\103\0\1\105\1\0\2\25\7\0\1\110"+
    "\1\111\1\112\1\113\4\0\1\114\4\0\1\25\1\0"+
    "\1\110\1\0\1\111\1\112\1\113\17\0\1\114\34\0"+
    "\1\105\1\0\2\25\10\0\1\111\1\112\1\113\11\0"+
    "\1\25\3\0\1\111\1\112\1\113\62\0\1\115\1\116"+
    "\112\0\1\117\112\0\1\120\1\121\56\0\1\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\31\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\122\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\123\27\34\4\0"+
    "\2\34\33\0\1\124\57\0\1\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\2\34\1\125\15\34\1\126"+
    "\1\127\7\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\130\1\34\1\131\6\34"+
    "\1\132\1\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\133\6\34\1\134\2\34"+
    "\1\135\2\34\1\136\12\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\137\3\34"+
    "\1\140\4\34\1\141\12\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\142\1\34"+
    "\1\143\7\34\1\144\1\145\1\146\3\34\1\147\2\34"+
    "\1\150\1\34\1\151\2\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\152\7\34"+
    "\1\153\1\34\1\154\1\34\1\155\1\156\4\34\1\157"+
    "\5\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\13\34\1\160\2\34\1\161\12\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\6\34\1\162\5\34\1\163\1\164\3\34\1\165\7\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\166\10\34\1\167\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\170\3\34\1\171\15\34\1\172\5\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\173\16\34\1\174\2\34\1\175\5\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\176\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\177\2\34\1\200\11\34"+
    "\1\201\1\202\1\34\1\203\1\34\1\204\1\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\10\34\1\205\7\34\1\206\6\34\1\207\1\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\210\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\211\14\34\1\212"+
    "\12\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\10\34\1\213\1\214\17\34\4\0\2\34"+
    "\33\0\1\215\52\0\1\216\4\0\1\6\1\217\2\6"+
    "\1\217\1\220\105\6\1\34\11\0\1\34\13\0\2\72"+
    "\6\0\12\72\4\0\31\72\4\0\2\34\1\13\1\221"+
    "\2\13\1\221\1\222\105\13\26\0\2\105\10\0\1\111"+
    "\1\112\1\113\11\0\1\105\3\0\1\111\1\112\1\113"+
    "\30\0\20\106\1\223\72\106\26\0\2\110\24\0\1\110"+
    "\57\0\1\224\1\0\1\224\2\0\2\224\10\0\1\111"+
    "\1\0\1\113\11\0\1\224\3\0\1\111\1\0\1\113"+
    "\54\0\1\225\1\0\2\226\6\0\5\226\11\0\7\226"+
    "\63\0\1\227\112\0\1\230\1\231\56\0\1\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\6\34\1\232"+
    "\22\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\7\34\1\233\2\34\4\0\31\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\21\34\1\234"+
    "\7\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\20\34\1\235\10\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\16\34\1\236"+
    "\12\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\237\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\22\34\1\240"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\21\34\1\241\1\242\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\243\27\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\244\27\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\245\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\2\34\1\246\3\34\1\247\4\34"+
    "\1\250\15\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\251\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\252\5\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\3\34\1\253\25\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\10\34"+
    "\1\254\20\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\21\34\1\255\7\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\17\34"+
    "\1\256\11\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\257\5\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\260\25\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\261\27\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\262\5\34\1\263\2\34\1\264\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\265\15\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\266\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\16\34"+
    "\1\267\12\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\20\34\1\270\10\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\271\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\272\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\22\34"+
    "\1\273\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\17\34\1\274\11\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\275\15\34\1\276\1\277\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\4\34\1\300\2\34\1\301"+
    "\2\34\4\0\31\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\302\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\303\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\14\34\1\304\5\34\1\305"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\25\34\1\306\3\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\307"+
    "\15\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\310\14\34\1\311\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\312\4\34\1\313\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\2\34\1\314"+
    "\26\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\315\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\316"+
    "\15\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\16\34\1\317\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\320"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\17\34\1\321\11\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\11\34\1\322"+
    "\17\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\15\34\1\323\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\11\34\1\324"+
    "\6\34\1\325\10\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\326\21\34\1\327"+
    "\3\34\1\330\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\17\34\1\331\11\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\332\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\20\34\1\333\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\334\1\34\1\335\15\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\11\34\1\336"+
    "\17\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\337\6\34\4\0\2\34\1\6"+
    "\1\217\2\6\1\217\1\220\2\6\1\70\40\6\1\71"+
    "\46\6\1\0\2\6\1\70\40\6\1\71\41\6\1\13"+
    "\1\221\2\13\1\221\1\222\7\13\1\76\33\13\1\77"+
    "\46\13\1\0\7\13\1\76\33\13\1\77\41\13\20\106"+
    "\1\223\4\106\1\340\65\106\26\0\2\224\10\0\1\111"+
    "\1\0\1\113\11\0\1\224\3\0\1\111\1\0\1\113"+
    "\56\0\2\341\6\0\5\341\11\0\7\341\54\0\1\341"+
    "\1\0\2\226\6\0\5\226\3\0\1\112\5\0\7\226"+
    "\10\0\1\112\52\0\1\342\57\0\1\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\11\34\1\343\17\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\22\34\1\344\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\345\27\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\346\15\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\347\27\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\350\23\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\351\23\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\3\34\1\352\25\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\20\34\1\353\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\21\34\1\354\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\355\1\356"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\23\34\1\357\5\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\360"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\361\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\2\34\1\362"+
    "\26\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\10\34\1\363\20\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\16\34\1\364"+
    "\12\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\365\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\22\34\1\366"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\14\34\1\367\14\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\370"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\13\34\1\371\15\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\22\34\1\372"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\16\34\1\373\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\374"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\21\34\1\375\7\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\376"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\377\27\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u0100"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\u0101\25\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\2\34\1\u0102"+
    "\26\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\16\34\1\u0103\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\u0104"+
    "\2\34\1\u0105\12\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u0106\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u0107\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u0108\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\u0109\17\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u010a\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\7\34\1\u010b\21\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u010c\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\u010d\17\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u010e\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\12\34\1\u010f\16\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u0110\13\34\1\u0111"+
    "\7\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\15\34\1\u0112\6\34\1\u0113\4\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u0114\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u0115\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\23\34\1\u0116\5\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\6\34\1\u0117\22\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\20\34\1\u0118\10\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u0119\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u011a\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u011b\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\u011c\25\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\21\34\1\u011d\7\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\16\34\1\u011e\12\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\15\34\1\u011f\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u0120\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u0121\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\21\34\1\u0122\7\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\4\34\1\u0123\24\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\1\34\1\u0124\27\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u0125\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\10\34\1\u0126\20\34\4\0\2\34\26\0\2\341\6\0"+
    "\5\341\3\0\1\112\5\0\7\341\10\0\1\112\17\0"+
    "\1\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\u0127\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\20\34\1\u0128\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\27\34\1\u0129\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u012a\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\12\34\1\u012b\16\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\10\34\1\u012c\20\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\21\34\1\u012d\7\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u012e\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\u012f\17\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\7\34\1\u0130\21\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\23\34\1\u0131\5\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u0132\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\13\34\1\u0133\15\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\11\34\1\u0134\17\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\27\34\1\u0135\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\17\34\1\u0136\11\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\20\34\1\u0137\10\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\15\34\1\u0138\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u0139\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u013a\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u013b\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u013c\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u013d\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u013e\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u013f\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\20\34\1\u0140\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\23\34\1\u0141\5\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u0142\3\34\1\u0143"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\20\34\1\u0144\10\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\15\34\1\u0145"+
    "\13\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\7\34\1\u0146\2\34\4\0\31\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\21\34\1\u0147"+
    "\7\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\24\34\1\u0148\4\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\u0149"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\15\34\1\u014a\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u014b"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\u014c\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\u014d"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u014e\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\11\34\1\u014f"+
    "\17\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\20\34\1\u0150\10\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\22\34\1\u0151"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\11\34\1\u0152\17\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\20\34\1\u0153"+
    "\10\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\u0154\25\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\10\34\1\u0155"+
    "\20\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\25\34\1\u0156\3\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\21\34\1\u0157"+
    "\7\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\16\34\1\u0158\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\3\34\1\u0159"+
    "\25\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\u015a\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u015b"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\11\34\1\u015c\17\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\u015d"+
    "\27\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\u015e\27\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\15\34\1\u015f"+
    "\13\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\7\34\1\u0160\21\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\u0161"+
    "\15\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u0162\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u0163"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\6\34\1\u0164\22\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u0165"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\u0166\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\4\34\1\u0167"+
    "\24\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\13\34\1\u0168\15\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\3\34\1\u0169"+
    "\25\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\11\34\1\u016a\17\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\u016b"+
    "\15\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\14\34\1\u016c\14\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\22\34\1\u016d"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\4\34\1\u016e\24\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\15\34\1\u016f"+
    "\13\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\u0170\27\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\6\34\1\u0171"+
    "\22\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\11\34\1\u0172\17\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\17\34\1\u0173"+
    "\11\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u0174\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\7\34\1\u0175"+
    "\21\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\u0176\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\4\34\1\u0177\1\34\1\u0178"+
    "\3\34\4\0\31\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u0179\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\u017a\25\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\3\34\1\u017b\25\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\u017c\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\3\34\1\u017d\25\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\10\34\1\u017e\20\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\20\34\1\u017f\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\21\34\1\u0180\7\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\11\34\1\u0181\17\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\6\34\1\u0182\22\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u0183\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\u0184\17\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\22\34\1\u0185\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\u0186\25\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\15\34\1\u0187\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\23\34\1\u0188\5\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u0189\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u018a\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\21\34\1\u018b\7\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\27\34\1\u018c\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\10\34\1\u018d\20\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\16\34\1\u018e\12\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u018f\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u0190\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\3\34\1\u0191\25\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\4\34\1\u0192\24\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u0193\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u0194\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\u0195\27\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u0196\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\u0197\15\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\u0198\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u0199\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u019a\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\16\34\1\u019b\12\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u019c\23\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\17\34\1\u019d\11\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\13\34\1\u019e\15\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\27\34\1\u019f\1\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\u01a0\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u01a1\23\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\20\34\1\u01a2\10\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\15\34\1\u01a3\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\15\34\1\u01a4\13\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\u01a5\30\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u01a6\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u01a7\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\u01a8\25\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01a9\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\u01aa\25\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u01ab\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\22\34"+
    "\1\u01ac\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01ad\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u01ae\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\u01af\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u01b0\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01b1\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\22\34"+
    "\1\u01b2\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u01b3\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\16\34"+
    "\1\u01b4\12\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\6\34\1\u01b5\22\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u01b6\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01b7\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\u01b8\27\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\4\34\1\u01b9\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\u01ba\17\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\22\34\1\u01bb\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\21\34"+
    "\1\u01bc\7\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\u01bd\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\6\34"+
    "\1\u01be\22\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\22\34\1\u01bf\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\30\34"+
    "\1\u01c0\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\u01c1\25\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u01c2"+
    "\23\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u01c3\23\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\4\34\1\u01c4"+
    "\24\34\4\0\2\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25275];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\3\1\2\11\22\1\1\11\1\1\4\11"+
    "\1\0\1\1\4\11\1\0\5\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\11\3\1\1\11"+
    "\70\1\2\11\4\1\1\0\1\1\1\0\1\1\2\11"+
    "\107\1\1\11\1\0\1\11\342\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public PhpToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return PhpToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PhpToken.BAD_CHARACTER;
            }
            // fall through
          case 143: break;
          case 2:
            { return PhpToken.WHITESPACE;
            }
            // fall through
          case 144: break;
          case 3:
            { return PhpToken.NOT;
            }
            // fall through
          case 145: break;
          case 4:
            { return PhpToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 146: break;
          case 5:
            { return PhpToken.LINE_COMMENT;
            }
            // fall through
          case 147: break;
          case 6:
            { return PhpToken.IDENTIFIER;
            }
            // fall through
          case 148: break;
          case 7:
            { return PhpToken.MOD;
            }
            // fall through
          case 149: break;
          case 8:
            { return PhpToken.AND;
            }
            // fall through
          case 150: break;
          case 9:
            { return PhpToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 151: break;
          case 10:
            { return PhpToken.LPAREN;
            }
            // fall through
          case 152: break;
          case 11:
            { return PhpToken.RPAREN;
            }
            // fall through
          case 153: break;
          case 12:
            { return PhpToken.MULT;
            }
            // fall through
          case 154: break;
          case 13:
            { return PhpToken.PLUS;
            }
            // fall through
          case 155: break;
          case 14:
            { return PhpToken.COMMA;
            }
            // fall through
          case 156: break;
          case 15:
            { return PhpToken.MINUS;
            }
            // fall through
          case 157: break;
          case 16:
            { return PhpToken.DOT;
            }
            // fall through
          case 158: break;
          case 17:
            { return PhpToken.DIV;
            }
            // fall through
          case 159: break;
          case 18:
            { return PhpToken.INTEGER_LITERAL;
            }
            // fall through
          case 160: break;
          case 19:
            { return PhpToken.COLON;
            }
            // fall through
          case 161: break;
          case 20:
            { return PhpToken.SEMICOLON;
            }
            // fall through
          case 162: break;
          case 21:
            { return PhpToken.LT;
            }
            // fall through
          case 163: break;
          case 22:
            { return PhpToken.EQ;
            }
            // fall through
          case 164: break;
          case 23:
            { return PhpToken.GT;
            }
            // fall through
          case 165: break;
          case 24:
            { return PhpToken.QUEST;
            }
            // fall through
          case 166: break;
          case 25:
            { return PhpToken.LBRACK;
            }
            // fall through
          case 167: break;
          case 26:
            { return PhpToken.RBRACK;
            }
            // fall through
          case 168: break;
          case 27:
            { return PhpToken.XOR;
            }
            // fall through
          case 169: break;
          case 28:
            { return PhpToken.LBRACE;
            }
            // fall through
          case 170: break;
          case 29:
            { return PhpToken.RBRACE;
            }
            // fall through
          case 171: break;
          case 30:
            { return PhpToken.TILDA;
            }
            // fall through
          case 172: break;
          case 31:
            { return PhpToken.NOTEQ;
            }
            // fall through
          case 173: break;
          case 32:
            { return PhpToken.VARIABLE_LITERAL;
            }
            // fall through
          case 174: break;
          case 33:
            { return PhpToken.MODEQ;
            }
            // fall through
          case 175: break;
          case 34:
            { return PhpToken.ANDAND;
            }
            // fall through
          case 176: break;
          case 35:
            { return PhpToken.ANDEQ;
            }
            // fall through
          case 177: break;
          case 36:
            { return PhpToken.MULTEQ;
            }
            // fall through
          case 178: break;
          case 37:
            { return PhpToken.PLUSPLUS;
            }
            // fall through
          case 179: break;
          case 38:
            { return PhpToken.PLUSEQ;
            }
            // fall through
          case 180: break;
          case 39:
            { return PhpToken.MINUSMINUS;
            }
            // fall through
          case 181: break;
          case 40:
            { return PhpToken.MINUSEQ;
            }
            // fall through
          case 182: break;
          case 41:
            { return PhpToken.DOUBLE_LITERAL;
            }
            // fall through
          case 183: break;
          case 42:
            { return PhpToken.BLOCK_COMMENT;
            }
            // fall through
          case 184: break;
          case 43:
            { return PhpToken.DIVEQ;
            }
            // fall through
          case 185: break;
          case 44:
            { return PhpToken.FLOAT_LITERAL;
            }
            // fall through
          case 186: break;
          case 45:
            { return PhpToken.LTEQ;
            }
            // fall through
          case 187: break;
          case 46:
            { return PhpToken.EQEQ;
            }
            // fall through
          case 188: break;
          case 47:
            { return PhpToken.GTEQ;
            }
            // fall through
          case 189: break;
          case 48:
            { return PhpToken.GTGT;
            }
            // fall through
          case 190: break;
          case 49:
            { return PhpToken.XOREQ;
            }
            // fall through
          case 191: break;
          case 50:
            { return PhpToken.AS;
            }
            // fall through
          case 192: break;
          case 51:
            { return PhpToken.DO;
            }
            // fall through
          case 193: break;
          case 52:
            { return PhpToken.FN;
            }
            // fall through
          case 194: break;
          case 53:
            { return PhpToken.IF;
            }
            // fall through
          case 195: break;
          case 54:
            { return PhpToken.IN;
            }
            // fall through
          case 196: break;
          case 55:
            { return PhpToken.OREQ;
            }
            // fall through
          case 197: break;
          case 56:
            { return PhpToken.OROR;
            }
            // fall through
          case 198: break;
          case 57:
            { return PhpToken.LTLTEQ;
            }
            // fall through
          case 199: break;
          case 58:
            { return PhpToken.GTGTEQ;
            }
            // fall through
          case 200: break;
          case 59:
            { return PhpToken.GTGTGT;
            }
            // fall through
          case 201: break;
          case 60:
            { return PhpToken.NAN;
            }
            // fall through
          case 202: break;
          case 61:
            { return PhpToken.DIE;
            }
            // fall through
          case 203: break;
          case 62:
            { return PhpToken.FOR;
            }
            // fall through
          case 204: break;
          case 63:
            { return PhpToken.INT;
            }
            // fall through
          case 205: break;
          case 64:
            { return PhpToken.LET;
            }
            // fall through
          case 206: break;
          case 65:
            { return PhpToken.NEW;
            }
            // fall through
          case 207: break;
          case 66:
            { return PhpToken.TRY;
            }
            // fall through
          case 208: break;
          case 67:
            { return PhpToken.VAR;
            }
            // fall through
          case 209: break;
          case 68:
            { return PhpToken.GTGTGTEQ;
            }
            // fall through
          case 210: break;
          case 69:
            { return PhpToken.BYTE;
            }
            // fall through
          case 211: break;
          case 70:
            { return PhpToken.CASE;
            }
            // fall through
          case 212: break;
          case 71:
            { return PhpToken.CHAR;
            }
            // fall through
          case 213: break;
          case 72:
            { return PhpToken.EACH;
            }
            // fall through
          case 214: break;
          case 73:
            { return PhpToken.ECHO;
            }
            // fall through
          case 215: break;
          case 74:
            { return PhpToken.ELSE;
            }
            // fall through
          case 216: break;
          case 75:
            { return PhpToken.ENUM;
            }
            // fall through
          case 217: break;
          case 76:
            { return PhpToken.EVAL;
            }
            // fall through
          case 218: break;
          case 77:
            { return PhpToken.EXIT;
            }
            // fall through
          case 219: break;
          case 78:
            { return PhpToken.GOTO;
            }
            // fall through
          case 220: break;
          case 79:
            { return PhpToken.LONG;
            }
            // fall through
          case 221: break;
          case 80:
            { return PhpToken.NULL;
            }
            // fall through
          case 222: break;
          case 81:
            { return PhpToken.SELF;
            }
            // fall through
          case 223: break;
          case 82:
            { return PhpToken.THIS;
            }
            // fall through
          case 224: break;
          case 83:
            { return PhpToken.TRUE;
            }
            // fall through
          case 225: break;
          case 84:
            { return PhpToken.VOID;
            }
            // fall through
          case 226: break;
          case 85:
            { return PhpToken.WITH;
            }
            // fall through
          case 227: break;
          case 86:
            { return PhpToken.ARRAY;
            }
            // fall through
          case 228: break;
          case 87:
            { return PhpToken.BREAK;
            }
            // fall through
          case 229: break;
          case 88:
            { return PhpToken.CATCH;
            }
            // fall through
          case 230: break;
          case 89:
            { return PhpToken.CLASS;
            }
            // fall through
          case 231: break;
          case 90:
            { return PhpToken.CONST;
            }
            // fall through
          case 232: break;
          case 91:
            { return PhpToken.EMPTY;
            }
            // fall through
          case 233: break;
          case 92:
            { return PhpToken.FALSE;
            }
            // fall through
          case 234: break;
          case 93:
            { return PhpToken.FINAL;
            }
            // fall through
          case 235: break;
          case 94:
            { return PhpToken.FLOAT;
            }
            // fall through
          case 236: break;
          case 95:
            { return PhpToken.ISNAN;
            }
            // fall through
          case 237: break;
          case 96:
            { return PhpToken.PRINT;
            }
            // fall through
          case 238: break;
          case 97:
            { return PhpToken.SHORT;
            }
            // fall through
          case 239: break;
          case 98:
            { return PhpToken.SUPER;
            }
            // fall through
          case 240: break;
          case 99:
            { return PhpToken.THROW;
            }
            // fall through
          case 241: break;
          case 100:
            { return PhpToken.WHILE;
            }
            // fall through
          case 242: break;
          case 101:
            { return PhpToken.DELETE;
            }
            // fall through
          case 243: break;
          case 102:
            { return PhpToken.DOUBLE;
            }
            // fall through
          case 244: break;
          case 103:
            { return PhpToken.ELSEIF;
            }
            // fall through
          case 245: break;
          case 104:
            { return PhpToken.ESCAPE;
            }
            // fall through
          case 246: break;
          case 105:
            { return PhpToken.EXPORT;
            }
            // fall through
          case 247: break;
          case 106:
            { return PhpToken.GLOBAL;
            }
            // fall through
          case 248: break;
          case 107:
            { return PhpToken.IMPORT;
            }
            // fall through
          case 249: break;
          case 108:
            { return PhpToken.NATIVE;
            }
            // fall through
          case 250: break;
          case 109:
            { return PhpToken.PARENT;
            }
            // fall through
          case 251: break;
          case 110:
            { return PhpToken.PUBLIC;
            }
            // fall through
          case 252: break;
          case 111:
            { return PhpToken.RETURN;
            }
            // fall through
          case 253: break;
          case 112:
            { return PhpToken.STATIC;
            }
            // fall through
          case 254: break;
          case 113:
            { return PhpToken.SWITCH;
            }
            // fall through
          case 255: break;
          case 114:
            { return PhpToken.THROWS;
            }
            // fall through
          case 256: break;
          case 115:
            { return PhpToken.TYPEOF;
            }
            // fall through
          case 257: break;
          case 116:
            { return PhpToken.BOOLEAN;
            }
            // fall through
          case 258: break;
          case 117:
            { return PhpToken.DEFAULT;
            }
            // fall through
          case 259: break;
          case 118:
            { return PhpToken.EXTENDS;
            }
            // fall through
          case 260: break;
          case 119:
            { return PhpToken.FINALLY;
            }
            // fall through
          case 261: break;
          case 120:
            { return PhpToken.FOREACH;
            }
            // fall through
          case 262: break;
          case 121:
            { return PhpToken.INCLUDE;
            }
            // fall through
          case 263: break;
          case 122:
            { return PhpToken.PACKAGE;
            }
            // fall through
          case 264: break;
          case 123:
            { return PhpToken.PRIVATE;
            }
            // fall through
          case 265: break;
          case 124:
            { return PhpToken.INFINITY;
            }
            // fall through
          case 266: break;
          case 125:
            { return PhpToken.ABSTRACT;
            }
            // fall through
          case 267: break;
          case 126:
            { return PhpToken.CONTINUE;
            }
            // fall through
          case 268: break;
          case 127:
            { return PhpToken.DEBUGGER;
            }
            // fall through
          case 269: break;
          case 128:
            { return PhpToken.FUNCTION;
            }
            // fall through
          case 270: break;
          case 129:
            { return PhpToken.ISFINITE;
            }
            // fall through
          case 271: break;
          case 130:
            { return PhpToken.PARSEINT;
            }
            // fall through
          case 272: break;
          case 131:
            { return PhpToken.UNESCAPE;
            }
            // fall through
          case 273: break;
          case 132:
            { return PhpToken.VOLATILE;
            }
            // fall through
          case 274: break;
          case 133:
            { return PhpToken.INSTEADOF;
            }
            // fall through
          case 275: break;
          case 134:
            { return PhpToken.INTERFACE;
            }
            // fall through
          case 276: break;
          case 135:
            { return PhpToken.NAMESPACE;
            }
            // fall through
          case 277: break;
          case 136:
            { return PhpToken.PROTECTED;
            }
            // fall through
          case 278: break;
          case 137:
            { return PhpToken.TRANSIENT;
            }
            // fall through
          case 279: break;
          case 138:
            { return PhpToken.IMPLEMENTS;
            }
            // fall through
          case 280: break;
          case 139:
            { return PhpToken.INSTANCEOF;
            }
            // fall through
          case 281: break;
          case 140:
            { return PhpToken.PARSEFLOAT;
            }
            // fall through
          case 282: break;
          case 141:
            { return PhpToken.INCLUDE_ONCE;
            }
            // fall through
          case 283: break;
          case 142:
            { return PhpToken.SYNCHRONIZED;
            }
            // fall through
          case 284: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
