/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.csharp.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>csharp.flex</tt>
 */
public class CSharpLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\6\1\36\1\37\1\36\1\40\1\41\1\42\5\43"+
    "\1\44\3\43\1\45\7\43\1\46\2\43\1\47\1\50"+
    "\1\51\1\52\1\53\1\6\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\43\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\6\0\1\111\32\0\2\6\4\12\4\6"+
    "\1\12\2\6\1\0\7\6\1\12\4\6\1\12\5\6"+
    "\27\12\1\6\37\12\1\6\u01ca\12\4\6\14\12\16\6"+
    "\5\12\7\6\1\12\1\6\1\12\21\6\160\0\5\12"+
    "\1\6\2\12\2\6\4\12\10\6\1\12\1\6\3\12"+
    "\1\6\1\12\1\6\24\12\1\6\123\12\1\6\213\12"+
    "\1\6\5\0\2\6\236\12\11\6\46\12\2\6\1\12"+
    "\7\6\47\12\7\6\1\12\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\12"+
    "\5\6\3\12\15\6\5\0\6\6\1\12\4\6\13\0"+
    "\5\6\53\12\37\0\4\6\2\12\1\0\143\12\1\6"+
    "\1\12\10\0\1\6\6\0\2\12\2\0\1\6\4\0"+
    "\2\12\12\0\3\12\2\6\1\12\17\6\1\0\1\12"+
    "\1\0\36\12\33\0\2\6\131\12\13\0\1\12\16\6"+
    "\12\0\41\12\11\0\2\12\4\6\1\12\5\6\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\5\0\22\6"+
    "\31\12\3\0\104\6\1\12\1\6\13\12\67\6\33\0"+
    "\1\6\4\0\66\12\3\0\1\12\22\0\1\12\7\0"+
    "\12\12\2\0\2\6\12\0\1\6\7\12\1\6\7\12"+
    "\1\6\3\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\1\12\3\6\4\12\2\6\1\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\1\12\10\6"+
    "\1\0\4\6\2\12\1\6\3\12\2\0\2\6\12\0"+
    "\4\12\7\6\1\12\5\6\3\0\1\6\6\12\4\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\2\12\1\6"+
    "\2\12\1\6\2\12\2\6\1\0\1\6\5\0\4\6"+
    "\2\0\2\6\3\0\3\6\1\0\7\6\4\12\1\6"+
    "\1\12\7\6\14\0\3\12\1\0\13\6\3\0\1\6"+
    "\11\12\1\6\3\12\1\6\26\12\1\6\7\12\1\6"+
    "\2\12\1\6\5\12\2\6\1\0\1\12\10\0\1\6"+
    "\3\0\1\6\3\0\2\6\1\12\17\6\2\12\2\0"+
    "\2\6\12\0\1\6\1\12\17\6\3\0\1\6\10\12"+
    "\2\6\2\12\2\6\26\12\1\6\7\12\1\6\2\12"+
    "\1\6\5\12\2\6\1\0\1\12\7\0\2\6\2\0"+
    "\2\6\3\0\10\6\2\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\1\6\1\12\20\6\1\0\1\12"+
    "\1\6\6\12\3\6\3\12\1\6\4\12\3\6\2\12"+
    "\1\6\1\12\1\6\2\12\3\6\2\12\3\6\3\12"+
    "\3\6\14\12\4\6\5\0\3\6\3\0\1\6\4\0"+
    "\2\6\1\12\6\6\1\0\16\6\12\0\11\6\1\12"+
    "\7\6\3\0\1\6\10\12\1\6\3\12\1\6\27\12"+
    "\1\6\12\12\1\6\5\12\3\6\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\1\6\2\12\6\6"+
    "\2\12\2\0\2\6\12\0\22\6\2\0\1\6\10\12"+
    "\1\6\3\12\1\6\27\12\1\6\12\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\7\6\1\12\1\6\2\12\2\0\2\6"+
    "\12\0\1\6\2\12\17\6\2\0\1\6\10\12\1\6"+
    "\3\12\1\6\51\12\2\6\1\12\7\0\1\6\3\0"+
    "\1\6\4\0\1\12\10\6\1\0\10\6\2\12\2\0"+
    "\2\6\12\0\12\6\6\12\2\6\2\0\1\6\22\12"+
    "\3\6\30\12\1\6\11\12\1\6\1\12\2\6\7\12"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\22\6\2\0\15\6\60\12\1\0\2\12\7\0\4\6"+
    "\10\12\10\0\1\6\12\0\47\6\2\12\1\6\1\12"+
    "\2\6\2\12\1\6\1\12\2\6\1\12\6\6\4\12"+
    "\1\6\7\12\1\6\3\12\1\6\1\12\1\6\1\12"+
    "\2\6\2\12\1\6\4\12\1\0\2\12\6\0\1\6"+
    "\2\0\1\12\2\6\5\12\1\6\1\12\1\6\6\0"+
    "\2\6\12\0\2\6\4\12\40\6\1\12\27\6\2\0"+
    "\6\6\12\0\13\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\2\0\10\12\1\6\44\12\4\6\24\0\1\6"+
    "\2\0\5\12\13\0\1\6\44\0\11\6\1\0\71\6"+
    "\53\12\24\0\1\12\12\0\6\6\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12"+
    "\14\0\1\12\17\0\2\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\53\12\1\6\115\12\1\6\4\12\2\6"+
    "\7\12\1\6\1\12\1\6\4\12\2\6\51\12\1\6"+
    "\4\12\2\6\41\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\17\12\1\6\71\12\1\6"+
    "\4\12\2\6\103\12\2\6\3\0\40\6\20\12\20\6"+
    "\125\12\14\6\u016c\12\2\6\21\12\1\6\32\12\5\6"+
    "\113\12\3\6\3\12\17\6\15\12\1\6\4\12\3\0"+
    "\13\6\22\12\3\0\13\6\22\12\2\0\14\6\15\12"+
    "\1\6\3\12\1\6\2\0\14\6\64\12\40\0\3\6"+
    "\1\12\3\6\2\12\1\0\2\6\12\0\41\6\3\0"+
    "\2\6\12\0\6\6\130\12\10\6\51\12\1\0\1\12"+
    "\5\6\106\12\12\6\35\12\3\6\14\0\4\6\14\0"+
    "\12\6\12\0\36\12\2\6\5\12\13\6\54\12\4\6"+
    "\21\0\7\12\2\0\6\6\12\0\46\6\27\12\5\0"+
    "\4\6\65\12\12\0\1\6\35\0\2\6\13\0\6\6"+
    "\12\0\15\6\1\12\130\6\5\0\57\12\21\0\7\12"+
    "\4\6\12\0\21\6\11\0\14\6\3\0\36\12\15\0"+
    "\2\12\12\0\54\12\16\0\14\6\44\12\24\0\10\6"+
    "\12\0\3\6\3\12\12\0\44\12\122\6\3\0\1\6"+
    "\25\0\4\12\1\0\4\12\3\0\2\12\11\6\300\12"+
    "\47\0\25\6\4\0\26\12\2\6\6\12\2\6\46\12"+
    "\2\6\6\12\2\6\10\12\1\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\37\12\2\6\65\12\1\6\7\12"+
    "\1\6\1\12\3\6\3\12\1\6\7\12\3\6\4\12"+
    "\2\6\6\12\4\6\15\12\5\6\3\12\1\6\7\12"+
    "\16\6\5\0\30\6\2\3\5\0\20\6\2\12\23\6"+
    "\1\12\13\6\5\0\5\6\6\0\1\6\1\12\15\6"+
    "\1\12\20\6\15\12\3\6\33\12\25\6\15\0\4\6"+
    "\1\0\3\6\14\0\21\6\1\12\4\6\1\12\2\6"+
    "\12\12\1\6\1\12\3\6\5\12\6\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\4\12\1\6\13\12\2\6"+
    "\4\12\5\6\5\12\4\6\1\12\21\6\51\12\u0177\6"+
    "\57\12\1\6\57\12\1\6\205\12\6\6\4\12\3\0"+
    "\2\12\14\6\46\12\1\6\1\12\5\6\1\12\2\6"+
    "\70\12\7\6\1\12\17\6\1\0\27\12\11\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\40\0"+
    "\57\6\1\12\325\6\3\12\31\6\11\12\6\0\1\6"+
    "\5\12\2\6\5\12\4\6\126\12\2\6\2\0\2\6"+
    "\3\12\1\6\132\12\1\6\4\12\5\6\51\12\3\6"+
    "\136\12\21\6\33\12\65\6\306\12\112\6\315\12\63\6"+
    "\215\12\103\6\56\12\2\6\15\12\3\6\20\12\12\0"+
    "\2\12\24\6\57\12\1\0\4\6\12\0\1\6\31\12"+
    "\7\6\1\0\120\12\2\0\45\6\11\12\2\6\147\12"+
    "\2\6\4\12\1\6\4\12\14\6\13\12\115\6\12\12"+
    "\1\0\3\12\1\0\4\12\1\0\27\12\5\0\20\6"+
    "\1\12\7\6\64\12\14\6\2\0\62\12\21\0\13\6"+
    "\12\0\6\6\22\0\6\12\3\6\1\12\4\6\12\0"+
    "\34\12\10\0\2\6\27\12\15\0\14\6\35\12\3\6"+
    "\4\0\57\12\16\0\16\6\1\12\12\0\46\6\51\12"+
    "\16\0\11\6\3\12\1\0\10\12\2\0\2\6\12\0"+
    "\6\6\27\12\3\6\1\12\1\0\4\6\60\12\1\0"+
    "\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0"+
    "\1\12\30\6\3\12\2\6\13\12\5\0\2\6\3\12"+
    "\2\0\12\6\6\12\2\6\6\12\2\6\6\12\11\6"+
    "\7\12\1\6\7\12\221\6\43\12\10\0\1\6\2\0"+
    "\2\6\12\0\6\6\244\12\14\6\27\12\4\6\61\12"+
    "\4\6\u0100\3\156\12\2\6\152\12\46\6\7\12\14\6"+
    "\5\12\5\6\1\12\1\0\12\12\1\6\15\12\1\6"+
    "\5\12\1\6\1\12\1\6\2\12\1\6\2\12\1\6"+
    "\154\12\41\6\153\12\22\6\100\12\2\6\66\12\50\6"+
    "\15\12\3\6\20\0\20\6\7\0\14\6\2\12\30\6"+
    "\3\12\31\6\1\12\6\6\5\12\1\6\207\12\2\6"+
    "\1\0\4\6\1\12\13\6\12\0\7\6\32\12\4\6"+
    "\1\12\1\6\32\12\13\6\131\12\3\6\6\12\2\6"+
    "\6\12\2\6\6\12\2\6\3\12\3\6\2\12\3\6"+
    "\2\12\22\6\3\0\4\6\14\12\1\6\32\12\1\6"+
    "\23\12\1\6\2\12\1\6\17\12\2\6\16\12\42\6"+
    "\173\12\105\6\65\12\210\6\1\0\202\6\35\12\3\6"+
    "\61\12\57\6\37\12\21\6\33\12\65\6\36\12\2\6"+
    "\44\12\4\6\10\12\1\6\5\12\52\6\236\12\2\6"+
    "\12\0\126\6\6\12\2\6\1\12\1\6\54\12\1\6"+
    "\2\12\3\6\1\12\2\6\27\12\252\6\26\12\12\6"+
    "\32\12\106\6\70\12\6\6\2\12\100\6\1\12\3\0"+
    "\1\6\2\0\5\6\4\0\4\12\1\6\3\12\1\6"+
    "\33\12\4\6\3\0\4\6\1\0\40\6\35\12\203\6"+
    "\66\12\12\6\26\12\12\6\23\12\215\6\111\12\267\6"+
    "\3\0\65\12\17\0\37\6\12\0\20\6\3\0\55\12"+
    "\13\0\2\6\1\0\22\6\31\12\7\6\12\0\6\6"+
    "\3\0\44\12\16\0\1\6\12\0\100\6\3\0\60\12"+
    "\16\0\4\12\13\6\12\0\246\6\53\12\15\0\10\6"+
    "\12\0\66\6\157\12\221\6\143\12\235\6\57\12\321\6"+
    "\71\12\307\6\105\12\13\6\1\12\56\0\20\6\4\0"+
    "\15\12\140\6\2\12\u0163\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\12\1\6"+
    "\107\12\1\6\2\12\2\6\1\12\2\6\2\12\2\6"+
    "\4\12\1\6\14\12\1\6\1\12\1\6\7\12\1\6"+
    "\101\12\1\6\4\12\2\6\10\12\1\6\7\12\1\6"+
    "\34\12\1\6\4\12\1\6\5\12\1\6\1\12\3\6"+
    "\7\12\1\6\u0154\12\2\6\31\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\37\12\1\6\31\12\1\6\37\12\1\6\31\12\1\6"+
    "\10\12\2\6\62\0\4\12\1\6\33\12\1\6\2\12"+
    "\1\6\1\12\2\6\1\12\1\6\12\12\1\6\4\12"+
    "\1\6\1\12\1\6\1\12\6\6\1\12\4\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\3\12\1\6\2\12"+
    "\1\6\1\12\2\6\1\12\1\6\1\12\1\6\1\12"+
    "\1\6\1\12\1\6\1\12\1\6\2\12\1\6\1\12"+
    "\2\6\4\12\1\6\7\12\1\6\4\12\1\6\4\12"+
    "\1\6\1\12\1\6\12\12\1\6\21\12\5\6\3\12"+
    "\1\6\5\12\1\6\21\12\104\6\327\12\51\6\65\12"+
    "\13\6\336\12\343\6\1\0\36\6\140\0\200\6\360\0"+
    "\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\22\5\1\33\1\34\1\35"+
    "\1\36\1\0\1\37\1\4\3\0\1\40\1\41\1\42"+
    "\1\43\1\10\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\21\2\51\1\55\1\56"+
    "\1\21\1\57\1\60\1\61\1\62\1\63\1\64\1\5"+
    "\1\65\12\5\1\66\12\5\1\67\1\5\1\70\1\71"+
    "\35\5\1\72\1\73\2\4\2\10\1\0\1\51\1\0"+
    "\1\21\1\74\1\75\33\5\1\76\2\5\1\77\3\5"+
    "\1\100\3\5\1\101\6\5\1\102\22\5\1\103\4\5"+
    "\1\52\1\0\3\5\1\104\1\105\1\5\1\106\1\107"+
    "\1\5\1\110\11\5\1\111\1\112\10\5\1\113\2\5"+
    "\1\114\1\115\1\5\1\116\22\5\1\117\1\5\1\120"+
    "\1\5\1\121\6\5\1\122\3\5\1\123\1\124\1\125"+
    "\1\126\1\5\1\127\1\130\6\5\1\131\2\5\1\132"+
    "\1\5\1\133\1\134\15\5\1\135\1\5\1\136\6\5"+
    "\1\137\1\5\1\140\3\5\1\141\2\5\1\142\6\5"+
    "\1\143\2\5\1\144\6\5\1\145\2\5\1\146\2\5"+
    "\1\147\1\5\1\150\1\151\1\152\1\5\1\153\1\154"+
    "\1\155\1\156\1\157\1\5\1\160\1\161\3\5\1\162"+
    "\1\5\1\163\1\164\1\5\1\165\1\5\1\166\1\167"+
    "\6\5\1\170\4\5\1\171\1\5\1\172\1\173\1\174"+
    "\1\175\1\176\1\5\1\177\1\5\1\200\1\201\1\5"+
    "\1\202\2\5\1\203\1\204\1\205\1\206\1\5\1\207"+
    "\1\210";

  private static int [] zzUnpackAction() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\u0250\0\u029a\0\u02e4\0\112\0\112\0\u032e\0\u0378\0\112"+
    "\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea\0\112\0\112\0\u0534"+
    "\0\u057e\0\u05c8\0\112\0\112\0\112\0\u0612\0\u065c\0\u06a6"+
    "\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac\0\u08f6"+
    "\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\u0b46"+
    "\0\112\0\u0b90\0\112\0\112\0\u01bc\0\112\0\112\0\u0bda"+
    "\0\u0c24\0\u0c6e\0\u0cb8\0\112\0\112\0\112\0\112\0\u0d02"+
    "\0\112\0\112\0\112\0\112\0\112\0\u0d4c\0\u0d96\0\u0de0"+
    "\0\112\0\u0e2a\0\112\0\u0e74\0\112\0\112\0\u0ebe\0\u0f08"+
    "\0\112\0\112\0\112\0\u0f52\0\112\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\u107a\0\u10c4\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280"+
    "\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0"+
    "\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u0206\0\u1642\0\u168c\0\u0206"+
    "\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc"+
    "\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c"+
    "\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c"+
    "\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee\0\112\0\112\0\u1f38"+
    "\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\112"+
    "\0\112\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344"+
    "\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594"+
    "\0\u25de\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4"+
    "\0\u282e\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34"+
    "\0\u2a7e\0\u2ac8\0\u2b12\0\u0206\0\u2b5c\0\u2ba6\0\u2bf0\0\u0206"+
    "\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u0206\0\u2df6"+
    "\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046"+
    "\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c\0\u3296"+
    "\0\u32e0\0\u0206\0\u332a\0\u3374\0\u33be\0\u3408\0\112\0\u3452"+
    "\0\u349c\0\u34e6\0\u3530\0\u0206\0\u0206\0\u357a\0\u0206\0\u0206"+
    "\0\u35c4\0\u0206\0\u360e\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780"+
    "\0\u37ca\0\u3814\0\u385e\0\u0206\0\u0206\0\u38a8\0\u38f2\0\u393c"+
    "\0\u3986\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u0206\0\u3af8\0\u3b42"+
    "\0\u0206\0\u0206\0\u3b8c\0\u0206\0\u3bd6\0\u3c20\0\u3c6a\0\u3cb4"+
    "\0\u3cfe\0\u3d48\0\u3d92\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u3f04"+
    "\0\u3f4e\0\u3f98\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\u0206\0\u410a"+
    "\0\u0206\0\u4154\0\u0206\0\u419e\0\u41e8\0\u4232\0\u427c\0\u42c6"+
    "\0\u4310\0\u0206\0\u435a\0\u43a4\0\u43ee\0\u0206\0\u0206\0\u0206"+
    "\0\u0206\0\u4438\0\u0206\0\u0206\0\u4482\0\u44cc\0\u4516\0\u4560"+
    "\0\u45aa\0\u45f4\0\u0206\0\u463e\0\u4688\0\u0206\0\u46d2\0\u0206"+
    "\0\u0206\0\u471c\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8"+
    "\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u4a4a\0\u4a94\0\u0206\0\u4ade"+
    "\0\u0206\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u4c50\0\u4c9a\0\u0206"+
    "\0\u4ce4\0\u0206\0\u4d2e\0\u4d78\0\u4dc2\0\u0206\0\u4e0c\0\u4e56"+
    "\0\u0206\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u4fc8\0\u5012\0\u0206"+
    "\0\u505c\0\u50a6\0\u0206\0\u50f0\0\u513a\0\u5184\0\u51ce\0\u5218"+
    "\0\u5262\0\u0206\0\u52ac\0\u52f6\0\u0206\0\u5340\0\u538a\0\u0206"+
    "\0\u53d4\0\u0206\0\u0206\0\u0206\0\u541e\0\u0206\0\u0206\0\u0206"+
    "\0\u0206\0\u0206\0\u5468\0\u0206\0\u0206\0\u54b2\0\u54fc\0\u5546"+
    "\0\u0206\0\u5590\0\u0206\0\u0206\0\u55da\0\u0206\0\u5624\0\u0206"+
    "\0\u0206\0\u566e\0\u56b8\0\u5702\0\u574c\0\u5796\0\u57e0\0\u0206"+
    "\0\u582a\0\u5874\0\u58be\0\u5908\0\u0206\0\u5952\0\u0206\0\u0206"+
    "\0\u0206\0\u0206\0\u0206\0\u599c\0\u0206\0\u59e6\0\u0206\0\u0206"+
    "\0\u5a30\0\u0206\0\u5a7a\0\u5ac4\0\u0206\0\u0206\0\u0206\0\u0206"+
    "\0\u5b0e\0\u0206\0\u0206";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\11\10\1\34\1\2"+
    "\1\35\1\36\1\10\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\10\1\46\2\10\1\47\1\10\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\3\10\1\61\1\62\1\63\1\64\1\2\123\0\1\65"+
    "\102\0\1\3\6\0\1\65\133\0\1\66\56\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\67\37\6\1\70\41\6"+
    "\1\0\2\71\1\0\1\71\1\72\30\0\11\73\5\0"+
    "\31\73\5\0\1\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\32\10\4\0\1\10\33\0\1\74\72\0"+
    "\1\75\16\0\1\76\56\0\2\13\1\0\2\13\1\0"+
    "\7\13\1\77\32\13\1\100\41\13\33\0\1\101\77\0"+
    "\1\102\11\0\1\103\101\0\1\104\7\0\1\105\104\0"+
    "\2\106\102\0\1\107\4\0\1\110\5\0\1\111\102\0"+
    "\1\106\1\0\2\25\7\0\1\112\1\113\1\114\1\115"+
    "\1\0\1\116\1\0\1\117\4\0\1\25\1\0\1\112"+
    "\1\0\1\113\1\114\1\115\5\0\1\116\12\0\1\117"+
    "\33\0\1\106\1\0\2\25\10\0\1\113\1\114\1\115"+
    "\1\0\1\116\6\0\1\25\3\0\1\113\1\114\1\115"+
    "\5\0\1\116\54\0\1\120\1\121\111\0\1\122\111\0"+
    "\1\123\1\124\110\0\1\125\56\0\1\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\2\10\1\126\17\10"+
    "\1\127\3\10\1\130\3\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\1\10\1\131\15\10"+
    "\1\132\1\10\1\133\6\10\1\134\1\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\1\10"+
    "\1\135\6\10\1\136\3\10\1\137\2\10\1\140\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\5\10\1\141\11\10\1\142\10\10\1\143\1\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\14\10\1\144\1\10\1\145\6\10\1\146\1\10"+
    "\1\147\2\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\1\10\1\150\7\10\1\151\2\10"+
    "\1\152\2\10\1\153\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\17\10\1\154\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\6\10\1\155\6\10\1\156\1\157\3\10\1\160"+
    "\7\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\17\10\1\161\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\162"+
    "\3\10\1\163\16\10\1\164\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\2\10\1\165"+
    "\15\10\1\166\3\10\1\167\1\170\4\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\1\10"+
    "\1\171\17\10\1\172\2\10\1\173\5\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\5\10"+
    "\1\174\24\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\2\10\1\175\2\10\1\176\2\10"+
    "\1\177\1\200\11\10\1\201\2\10\1\202\3\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\10\10\1\203\10\10\1\204\6\10\1\205\1\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\11\10\1\206\2\10\1\207\1\10\1\210\3\10\1\211"+
    "\7\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\212\7\10\1\213\5\10\1\214"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\10\10\1\215\21\10\4\0\1\10\33\0"+
    "\1\216\52\0\1\217\3\0\1\6\1\220\2\6\1\220"+
    "\1\221\104\6\36\0\11\73\5\0\31\73\7\0\1\71"+
    "\33\0\11\73\5\0\31\73\5\0\2\73\1\0\107\73"+
    "\1\13\1\222\2\13\1\222\1\223\104\13\26\0\2\106"+
    "\10\0\1\113\1\114\1\115\10\0\1\106\3\0\1\113"+
    "\1\114\1\115\30\0\20\107\1\224\71\107\2\110\4\0"+
    "\103\110\27\0\2\112\14\0\1\116\6\0\1\112\13\0"+
    "\1\116\43\0\1\225\1\0\1\225\2\0\2\225\10\0"+
    "\1\113\1\0\1\115\10\0\1\225\3\0\1\113\1\0"+
    "\1\115\54\0\1\226\1\0\2\227\6\0\5\227\1\0"+
    "\1\116\6\0\7\227\5\0\1\116\55\0\1\230\111\0"+
    "\1\231\56\0\1\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\22\10\1\232\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\30\10\1\233"+
    "\1\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\234\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\22\10\1\235"+
    "\7\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\17\10\1\236\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\237"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\240\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\22\10\1\241"+
    "\1\242\6\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\1\10\1\243\3\10\1\244\24\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\1\10\1\245\30\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\16\10\1\246\13\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\3\10\1\247\2\10\1\250\5\10\1\251\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\24\10\1\252\5\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\16\10\1\253\13\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\22\10\1\254\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\24\10\1\255\5\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\5\10\1\256\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\20\10\1\257\2\10"+
    "\1\260\6\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\14\10\1\261\15\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\16\10"+
    "\1\262\10\10\1\263\2\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\17\10\1\264\12\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\21\10\1\265\10\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\23\10\1\266\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\20\10\1\267\11\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\23\10\1\270\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\3\10\1\271\12\10\1\272\13\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\15\10"+
    "\1\273\14\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\26\10\1\274\3\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\14\10"+
    "\1\275\15\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\12\10\1\276\17\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\5\10"+
    "\1\277\24\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\23\10\1\300\6\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\5\10"+
    "\1\301\24\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\21\10\1\302\10\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\11\10"+
    "\1\303\5\10\1\304\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\2\10\1\305\27\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\1\10\1\306\4\10\1\307\14\10\1\310\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\30\10\1\311\1\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\1\10\1\312\30\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\17\10\1\313\12\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\31\10\1\314\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\1\10\1\315\17\10\1\316\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\11\10\1\317"+
    "\20\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\11\10\1\320\7\10\1\321\10\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\24\10\1\322\5\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\20\10\1\323\11\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\16\10\1\324\13\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\17\10\1\325\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\3\10\1\326\16\10\1\327\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\10\10\1\330"+
    "\1\331\20\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\21\10\1\332\10\10\4\0\2\10"+
    "\11\0\1\10\13\0\2\10\6\0\11\10\4\0\21\10"+
    "\1\333\10\10\4\0\2\10\11\0\1\10\13\0\2\10"+
    "\6\0\11\10\4\0\11\10\1\334\2\10\1\335\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\11\10\1\336\20\10\4\0\1\10\1\6\1\220"+
    "\2\6\1\220\1\221\2\6\1\67\37\6\1\70\46\6"+
    "\1\0\2\6\1\67\37\6\1\70\41\6\1\13\1\222"+
    "\2\13\1\222\1\223\7\13\1\77\32\13\1\100\46\13"+
    "\1\0\7\13\1\77\32\13\1\100\41\13\20\107\1\224"+
    "\4\107\1\337\64\107\26\0\2\225\10\0\1\113\1\0"+
    "\1\115\10\0\1\225\3\0\1\113\1\0\1\115\56\0"+
    "\2\340\6\0\5\340\10\0\7\340\54\0\1\340\1\0"+
    "\2\227\6\0\5\227\1\0\1\116\1\114\5\0\7\227"+
    "\5\0\1\116\3\0\1\114\16\0\1\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\23\10\1\341\6\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\16\10\1\342\13\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\11\10\1\343\20\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\5\10\1\344\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\14\10\1\345\15\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\1\10\1\346\30\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\5\10\1\347\24\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\5\10\1\350\24\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\3\10\1\351\26\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\21\10\1\352\10\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\3\10\1\353\26\10"+
    "\4\0\2\10\11\0\1\10\13\0\2\10\6\0\11\10"+
    "\4\0\22\10\1\354\7\10\4\0\2\10\11\0\1\10"+
    "\13\0\2\10\6\0\11\10\4\0\22\10\1\355\1\356"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\11\10\1\357\20\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\360"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\361\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\2\10\1\362"+
    "\27\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\363\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\364"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\15\10\1\365\14\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\16\10\1\366"+
    "\13\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\367\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\370"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\22\10\1\371\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\372"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\373\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\374"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\375\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\17\10\1\376"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\377\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\u0100"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\13\10\1\u0101\16\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\7\10\1\u0102"+
    "\22\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0103\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\14\10\1\u0104"+
    "\15\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0105\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\21\10\1\u0106"+
    "\10\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\21\10\1\u0107\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\u0108"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\25\10\1\u0109\4\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u010a"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\u010b\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\4\10\1\u010c"+
    "\25\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\24\10\1\u010d\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u010e"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\u010f\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\21\10\1\u0110"+
    "\10\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0111\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u0112"+
    "\17\10\1\u0113\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\11\10\1\u0114\12\10\1\u0115"+
    "\5\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\u0116\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\22\10\1\u0117"+
    "\7\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\17\10\1\u0118\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\u0119"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u011a\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u011b"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\16\10\1\u011c\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\10\10\1\u011d"+
    "\21\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\u011e\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\17\10\1\u011f"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\16\10\1\u0120\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u0121"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\4\10\1\u0122\25\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\u0123"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\u0124\15\10\4\0\1\10\26\0"+
    "\2\340\6\0\5\340\2\0\1\114\5\0\7\340\11\0"+
    "\1\114\16\0\1\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\21\10\1\u0125\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u0126"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\u0127\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\13\10\1\u0128"+
    "\16\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\10\10\1\u0129\21\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\13\10\1\u012a"+
    "\16\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\22\10\1\u012b\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u012c"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\11\10\1\u012d\20\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\15\10\1\u012e"+
    "\14\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\24\10\1\u012f\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\7\10\1\u0130"+
    "\22\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\u0131\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\15\10\1\u0132"+
    "\14\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\u0133\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\11\10\1\u0134"+
    "\20\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\21\10\1\u0135\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\u0136"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\14\10\1\u0137\15\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\4\10\1\u0138"+
    "\25\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\u0139\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\u013a"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\11\10\1\u013b\20\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\21\10\1\u013c"+
    "\10\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\22\10\1\u013d\7\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u013e"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\u013f\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\21\10\1\u0140"+
    "\10\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\15\10\1\u0141\14\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\u0142"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0143\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\11\10\1\u0144"+
    "\20\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\17\10\1\u0145\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\21\10\1\u0146"+
    "\10\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0147\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\u0148"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\23\10\1\u0149\6\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\17\10\1\u014a"+
    "\12\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\13\10\1\u014b\16\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\11\10\1\u014c"+
    "\20\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\16\10\1\u014d\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u014e"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\3\10\1\u014f\26\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\26\10\1\u0150"+
    "\3\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\17\10\1\u0151\12\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\7\10\1\u0152"+
    "\22\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0153\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\6\10\1\u0154"+
    "\23\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\21\10\1\u0155\10\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\7\10\1\u0156"+
    "\22\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\24\10\1\u0157\5\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\23\10\1\u0158"+
    "\6\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u0159\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\1\10\1\u015a"+
    "\30\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\5\10\1\u015b\24\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\16\10\1\u015c"+
    "\13\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\u015d\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\14\10\1\u015e"+
    "\15\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\1\10\1\u015f\30\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\5\10\1\u0160"+
    "\24\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\11\10\1\u0161\20\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u0162"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\16\10\1\u0163\13\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\14\10\1\u0164"+
    "\15\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\3\10\1\u0165\26\10\4\0\2\10\11\0"+
    "\1\10\13\0\2\10\6\0\11\10\4\0\3\10\1\u0166"+
    "\26\10\4\0\2\10\11\0\1\10\13\0\2\10\6\0"+
    "\11\10\4\0\6\10\1\u0167\7\10\1\u0168\13\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\20\10\1\u0169\11\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\23\10\1\u016a\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u016b\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\11\10\1\u016c\20\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\22\10\1\u016d\7\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\23\10\1\u016e\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\3\10\1\u016f\26\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u0170\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\16\10\1\u0171\13\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\16\10\1\u0172\13\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\4\10\1\u0173\25\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\6\10\1\u0174\23\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\1\10\1\u0175\30\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u0176\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\7\10\1\u0177\22\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\23\10\1\u0178\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\10\10\1\u0179\21\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\6\10\1\u017a\23\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\3\10\1\u017b\26\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u017c\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u017d\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\1\10\1\u017e\30\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\11\10\1\u017f\20\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u0180\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\4\10\1\u0181\25\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\24\10\1\u0182\5\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\14\10\1\u0183\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\23\10\1\u0184\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u0185\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u0186\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\11\10\1\u0187\20\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\30\10\1\u0188\1\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\10\10\1\u0189\21\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\11\10\1\u018a\20\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\1\10\1\u018b\30\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\1\10\1\u018c\30\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\1\10\1\u018d\30\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\17\10\1\u018e\12\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\4\10\1\u018f\25\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u0190\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u0191\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\14\10\1\u0192\15\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\14\10\1\u0193\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\13\10\1\u0194\16\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\14\10\1\u0195\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\14\10\1\u0196\15\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u0197\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u0198\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\5\10\1\u0199\24\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\23\10\1\u019a\6\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\23\10\1\u019b\6\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u019c\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\14\10\1\u019d\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\3\10\1\u019e\26\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\21\10\1\u019f\10\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u01a0\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\5\10\1\u01a1\24\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\30\10\1\u01a2\1\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\14\10\1\u01a3\15\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u01a4\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\5\10\1\u01a5\24\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\5\10\1\u01a6\24\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\5\10\1\u01a7\24\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\4\10\1\u01a8\25\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\17\10\1\u01a9\12\10\4\0\2\10\11\0\1\10\13\0"+
    "\2\10\6\0\11\10\4\0\4\10\1\u01aa\25\10\4\0"+
    "\2\10\11\0\1\10\13\0\2\10\6\0\11\10\4\0"+
    "\3\10\1\u01ab\26\10\4\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\3\11\23\1\1\11\1\1\2\11\1\0\2\11"+
    "\3\0\1\1\4\11\1\0\5\11\3\1\1\11\1\1"+
    "\1\11\1\1\2\11\2\1\3\11\1\1\1\11\70\1"+
    "\2\11\4\1\1\0\1\1\1\0\1\1\2\11\105\1"+
    "\1\11\1\0\313\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[427];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CSharpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public CSharpToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return CSharpToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CSharpToken.BAD_CHARACTER;
            }
            // fall through
          case 137: break;
          case 2:
            { return CSharpToken.WHITESPACE;
            }
            // fall through
          case 138: break;
          case 3:
            { return CSharpToken.NOT;
            }
            // fall through
          case 139: break;
          case 4:
            { return CSharpToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 140: break;
          case 5:
            { return CSharpToken.IDENTIFIER;
            }
            // fall through
          case 141: break;
          case 6:
            { return CSharpToken.MOD;
            }
            // fall through
          case 142: break;
          case 7:
            { return CSharpToken.AND;
            }
            // fall through
          case 143: break;
          case 8:
            { return CSharpToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 144: break;
          case 9:
            { return CSharpToken.LPAREN;
            }
            // fall through
          case 145: break;
          case 10:
            { return CSharpToken.RPAREN;
            }
            // fall through
          case 146: break;
          case 11:
            { return CSharpToken.MULT;
            }
            // fall through
          case 147: break;
          case 12:
            { return CSharpToken.PLUS;
            }
            // fall through
          case 148: break;
          case 13:
            { return CSharpToken.COMMA;
            }
            // fall through
          case 149: break;
          case 14:
            { return CSharpToken.MINUS;
            }
            // fall through
          case 150: break;
          case 15:
            { return CSharpToken.DOT;
            }
            // fall through
          case 151: break;
          case 16:
            { return CSharpToken.DIV;
            }
            // fall through
          case 152: break;
          case 17:
            { return CSharpToken.INTEGER_LITERAL;
            }
            // fall through
          case 153: break;
          case 18:
            { return CSharpToken.COLON;
            }
            // fall through
          case 154: break;
          case 19:
            { return CSharpToken.SEMICOLON;
            }
            // fall through
          case 155: break;
          case 20:
            { return CSharpToken.LT;
            }
            // fall through
          case 156: break;
          case 21:
            { return CSharpToken.EQ;
            }
            // fall through
          case 157: break;
          case 22:
            { return CSharpToken.GT;
            }
            // fall through
          case 158: break;
          case 23:
            { return CSharpToken.QUEST;
            }
            // fall through
          case 159: break;
          case 24:
            { return CSharpToken.LBRACK;
            }
            // fall through
          case 160: break;
          case 25:
            { return CSharpToken.RBRACK;
            }
            // fall through
          case 161: break;
          case 26:
            { return CSharpToken.XOR;
            }
            // fall through
          case 162: break;
          case 27:
            { return CSharpToken.LBRACE;
            }
            // fall through
          case 163: break;
          case 28:
            { return CSharpToken.OR;
            }
            // fall through
          case 164: break;
          case 29:
            { return CSharpToken.RBRACE;
            }
            // fall through
          case 165: break;
          case 30:
            { return CSharpToken.TILDE;
            }
            // fall through
          case 166: break;
          case 31:
            { return CSharpToken.NOTEQ;
            }
            // fall through
          case 167: break;
          case 32:
            { return CSharpToken.PREPROCESSOR;
            }
            // fall through
          case 168: break;
          case 33:
            { return CSharpToken.MODEQ;
            }
            // fall through
          case 169: break;
          case 34:
            { return CSharpToken.ANDAND;
            }
            // fall through
          case 170: break;
          case 35:
            { return CSharpToken.ANDEQ;
            }
            // fall through
          case 171: break;
          case 36:
            { return CSharpToken.MULTEQ;
            }
            // fall through
          case 172: break;
          case 37:
            { return CSharpToken.PLUSPLUS;
            }
            // fall through
          case 173: break;
          case 38:
            { return CSharpToken.PLUSEQ;
            }
            // fall through
          case 174: break;
          case 39:
            { return CSharpToken.MINUSMINUS;
            }
            // fall through
          case 175: break;
          case 40:
            { return CSharpToken.MINUSEQ;
            }
            // fall through
          case 176: break;
          case 41:
            { return CSharpToken.DOUBLE_LITERAL;
            }
            // fall through
          case 177: break;
          case 42:
            { return CSharpToken.BLOCK_COMMENT;
            }
            // fall through
          case 178: break;
          case 43:
            { return CSharpToken.LINE_COMMENT;
            }
            // fall through
          case 179: break;
          case 44:
            { return CSharpToken.DIVEQ;
            }
            // fall through
          case 180: break;
          case 45:
            { return CSharpToken.FLOAT_LITERAL;
            }
            // fall through
          case 181: break;
          case 46:
            { return CSharpToken.LONG_LITERAL;
            }
            // fall through
          case 182: break;
          case 47:
            { return CSharpToken.LTLT;
            }
            // fall through
          case 183: break;
          case 48:
            { return CSharpToken.LTEQ;
            }
            // fall through
          case 184: break;
          case 49:
            { return CSharpToken.EQEQ;
            }
            // fall through
          case 185: break;
          case 50:
            { return CSharpToken.GTEQ;
            }
            // fall through
          case 186: break;
          case 51:
            { return CSharpToken.GTGT;
            }
            // fall through
          case 187: break;
          case 52:
            { return CSharpToken.XOREQ;
            }
            // fall through
          case 188: break;
          case 53:
            { return CSharpToken.AS;
            }
            // fall through
          case 189: break;
          case 54:
            { return CSharpToken.DO;
            }
            // fall through
          case 190: break;
          case 55:
            { return CSharpToken.IF;
            }
            // fall through
          case 191: break;
          case 56:
            { return CSharpToken.IN;
            }
            // fall through
          case 192: break;
          case 57:
            { return CSharpToken.IS;
            }
            // fall through
          case 193: break;
          case 58:
            { return CSharpToken.OREQ;
            }
            // fall through
          case 194: break;
          case 59:
            { return CSharpToken.OROR;
            }
            // fall through
          case 195: break;
          case 60:
            { return CSharpToken.LTLTEQ;
            }
            // fall through
          case 196: break;
          case 61:
            { return CSharpToken.GTGTEQ;
            }
            // fall through
          case 197: break;
          case 62:
            { return CSharpToken.FOR;
            }
            // fall through
          case 198: break;
          case 63:
            { return CSharpToken.INT;
            }
            // fall through
          case 199: break;
          case 64:
            { return CSharpToken.NEW;
            }
            // fall through
          case 200: break;
          case 65:
            { return CSharpToken.OUT;
            }
            // fall through
          case 201: break;
          case 66:
            { return CSharpToken.REF;
            }
            // fall through
          case 202: break;
          case 67:
            { return CSharpToken.VAR;
            }
            // fall through
          case 203: break;
          case 68:
            { return CSharpToken.BASE;
            }
            // fall through
          case 204: break;
          case 69:
            { return CSharpToken.BOOL;
            }
            // fall through
          case 205: break;
          case 70:
            { return CSharpToken.BYTE;
            }
            // fall through
          case 206: break;
          case 71:
            { return CSharpToken.CASE;
            }
            // fall through
          case 207: break;
          case 72:
            { return CSharpToken.CHAR;
            }
            // fall through
          case 208: break;
          case 73:
            { return CSharpToken.ELSE;
            }
            // fall through
          case 209: break;
          case 74:
            { return CSharpToken.ENUM;
            }
            // fall through
          case 210: break;
          case 75:
            { return CSharpToken.GOTO;
            }
            // fall through
          case 211: break;
          case 76:
            { return CSharpToken.LOCK;
            }
            // fall through
          case 212: break;
          case 77:
            { return CSharpToken.LONG;
            }
            // fall through
          case 213: break;
          case 78:
            { return CSharpToken.NULL;
            }
            // fall through
          case 214: break;
          case 79:
            { return CSharpToken.THIS;
            }
            // fall through
          case 215: break;
          case 80:
            { return CSharpToken.TRUE;
            }
            // fall through
          case 216: break;
          case 81:
            { return CSharpToken.UINT;
            }
            // fall through
          case 217: break;
          case 82:
            { return CSharpToken.VOID;
            }
            // fall through
          case 218: break;
          case 83:
            { return CSharpToken.ASYNC;
            }
            // fall through
          case 219: break;
          case 84:
            { return CSharpToken.AWAIT;
            }
            // fall through
          case 220: break;
          case 85:
            { return CSharpToken.BREAK;
            }
            // fall through
          case 221: break;
          case 86:
            { return CSharpToken.CATCH;
            }
            // fall through
          case 222: break;
          case 87:
            { return CSharpToken.CLASS;
            }
            // fall through
          case 223: break;
          case 88:
            { return CSharpToken.CONST;
            }
            // fall through
          case 224: break;
          case 89:
            { return CSharpToken.EVENT;
            }
            // fall through
          case 225: break;
          case 90:
            { return CSharpToken.FALSE;
            }
            // fall through
          case 226: break;
          case 91:
            { return CSharpToken.FIXED;
            }
            // fall through
          case 227: break;
          case 92:
            { return CSharpToken.FLOAT;
            }
            // fall through
          case 228: break;
          case 93:
            { return CSharpToken.SBYTE;
            }
            // fall through
          case 229: break;
          case 94:
            { return CSharpToken.SHORT;
            }
            // fall through
          case 230: break;
          case 95:
            { return CSharpToken.THROW;
            }
            // fall through
          case 231: break;
          case 96:
            { return CSharpToken.ULONG;
            }
            // fall through
          case 232: break;
          case 97:
            { return CSharpToken.USING;
            }
            // fall through
          case 233: break;
          case 98:
            { return CSharpToken.WHILE;
            }
            // fall through
          case 234: break;
          case 99:
            { return CSharpToken.DOUBLE;
            }
            // fall through
          case 235: break;
          case 100:
            { return CSharpToken.EXTERN;
            }
            // fall through
          case 236: break;
          case 101:
            { return CSharpToken.OBJECT;
            }
            // fall through
          case 237: break;
          case 102:
            { return CSharpToken.PARAMS;
            }
            // fall through
          case 238: break;
          case 103:
            { return CSharpToken.PUBLIC;
            }
            // fall through
          case 239: break;
          case 104:
            { return CSharpToken.RETURN;
            }
            // fall through
          case 240: break;
          case 105:
            { return CSharpToken.SEALED;
            }
            // fall through
          case 241: break;
          case 106:
            { return CSharpToken.SIZEOF;
            }
            // fall through
          case 242: break;
          case 107:
            { return CSharpToken.STATIC;
            }
            // fall through
          case 243: break;
          case 108:
            { return CSharpToken.STRING;
            }
            // fall through
          case 244: break;
          case 109:
            { return CSharpToken.STRUCT;
            }
            // fall through
          case 245: break;
          case 110:
            { return CSharpToken.SWITCH;
            }
            // fall through
          case 246: break;
          case 111:
            { return CSharpToken.TYPEOF;
            }
            // fall through
          case 247: break;
          case 112:
            { return CSharpToken.UNSAFE;
            }
            // fall through
          case 248: break;
          case 113:
            { return CSharpToken.USHORT;
            }
            // fall through
          case 249: break;
          case 114:
            { return CSharpToken.CHECKED;
            }
            // fall through
          case 250: break;
          case 115:
            { return CSharpToken.DECIMAL;
            }
            // fall through
          case 251: break;
          case 116:
            { return CSharpToken.DEFAULT;
            }
            // fall through
          case 252: break;
          case 117:
            { return CSharpToken.DYNAMIC;
            }
            // fall through
          case 253: break;
          case 118:
            { return CSharpToken.FINALLY;
            }
            // fall through
          case 254: break;
          case 119:
            { return CSharpToken.FOREACH;
            }
            // fall through
          case 255: break;
          case 120:
            { return CSharpToken.PRIVATE;
            }
            // fall through
          case 256: break;
          case 121:
            { return CSharpToken.VIRTUAL;
            }
            // fall through
          case 257: break;
          case 122:
            { return CSharpToken.ABSTRACT;
            }
            // fall through
          case 258: break;
          case 123:
            { return CSharpToken.CONTINUE;
            }
            // fall through
          case 259: break;
          case 124:
            { return CSharpToken.DELEGATE;
            }
            // fall through
          case 260: break;
          case 125:
            { return CSharpToken.EXPLICIT;
            }
            // fall through
          case 261: break;
          case 126:
            { return CSharpToken.IMPLICIT;
            }
            // fall through
          case 262: break;
          case 127:
            { return CSharpToken.INTERNAL;
            }
            // fall through
          case 263: break;
          case 128:
            { return CSharpToken.OPERATOR;
            }
            // fall through
          case 264: break;
          case 129:
            { return CSharpToken.OVERRIDE;
            }
            // fall through
          case 265: break;
          case 130:
            { return CSharpToken.READONLY;
            }
            // fall through
          case 266: break;
          case 131:
            { return CSharpToken.VOLATILE;
            }
            // fall through
          case 267: break;
          case 132:
            { return CSharpToken.INTERFACE;
            }
            // fall through
          case 268: break;
          case 133:
            { return CSharpToken.NAMESPACE;
            }
            // fall through
          case 269: break;
          case 134:
            { return CSharpToken.PROTECTED;
            }
            // fall through
          case 270: break;
          case 135:
            { return CSharpToken.UNCHECKED;
            }
            // fall through
          case 271: break;
          case 136:
            { return CSharpToken.STACKALLOC;
            }
            // fall through
          case 272: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
